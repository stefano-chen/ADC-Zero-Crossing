
ADC-Zero-Crossing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e344  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800e5f8  0800e5f8  0000f5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea90  0800ea90  0000fa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea98  0800ea98  0000fa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ea9c  0800ea9c  0000fa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800eaa0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005c54  240001dc  0800ec7c  000101dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005e30  0800ec7c  00010e30  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026c0c  00000000  00000000  0001020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004a8f  00000000  00000000  00036e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d88  00000000  00000000  0003b8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016d4  00000000  00000000  0003d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036885  00000000  00000000  0003ed04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002533b  00000000  00000000  00075589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160188  00000000  00000000  0009a8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001faa4c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b84  00000000  00000000  001faa90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  00203614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e5dc 	.word	0x0800e5dc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	0800e5dc 	.word	0x0800e5dc

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96a 	b.w	800068c <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	460c      	mov	r4, r1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d14e      	bne.n	800047a <__udivmoddi4+0xaa>
 80003dc:	4694      	mov	ip, r2
 80003de:	458c      	cmp	ip, r1
 80003e0:	4686      	mov	lr, r0
 80003e2:	fab2 f282 	clz	r2, r2
 80003e6:	d962      	bls.n	80004ae <__udivmoddi4+0xde>
 80003e8:	b14a      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ea:	f1c2 0320 	rsb	r3, r2, #32
 80003ee:	4091      	lsls	r1, r2
 80003f0:	fa20 f303 	lsr.w	r3, r0, r3
 80003f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f8:	4319      	orrs	r1, r3
 80003fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f f68c 	uxth.w	r6, ip
 8000406:	fbb1 f4f7 	udiv	r4, r1, r7
 800040a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040e:	fb07 1114 	mls	r1, r7, r4, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb04 f106 	mul.w	r1, r4, r6
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f104 30ff 	add.w	r0, r4, #4294967295
 8000426:	f080 8112 	bcs.w	800064e <__udivmoddi4+0x27e>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 810f 	bls.w	800064e <__udivmoddi4+0x27e>
 8000430:	3c02      	subs	r4, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	fa1f f38e 	uxth.w	r3, lr
 800043a:	fbb1 f0f7 	udiv	r0, r1, r7
 800043e:	fb07 1110 	mls	r1, r7, r0, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f606 	mul.w	r6, r0, r6
 800044a:	429e      	cmp	r6, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x94>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 31ff 	add.w	r1, r0, #4294967295
 8000456:	f080 80fc 	bcs.w	8000652 <__udivmoddi4+0x282>
 800045a:	429e      	cmp	r6, r3
 800045c:	f240 80f9 	bls.w	8000652 <__udivmoddi4+0x282>
 8000460:	4463      	add	r3, ip
 8000462:	3802      	subs	r0, #2
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800046a:	2100      	movs	r1, #0
 800046c:	b11d      	cbz	r5, 8000476 <__udivmoddi4+0xa6>
 800046e:	40d3      	lsrs	r3, r2
 8000470:	2200      	movs	r2, #0
 8000472:	e9c5 3200 	strd	r3, r2, [r5]
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d905      	bls.n	800048a <__udivmoddi4+0xba>
 800047e:	b10d      	cbz	r5, 8000484 <__udivmoddi4+0xb4>
 8000480:	e9c5 0100 	strd	r0, r1, [r5]
 8000484:	2100      	movs	r1, #0
 8000486:	4608      	mov	r0, r1
 8000488:	e7f5      	b.n	8000476 <__udivmoddi4+0xa6>
 800048a:	fab3 f183 	clz	r1, r3
 800048e:	2900      	cmp	r1, #0
 8000490:	d146      	bne.n	8000520 <__udivmoddi4+0x150>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xcc>
 8000496:	4290      	cmp	r0, r2
 8000498:	f0c0 80f0 	bcc.w	800067c <__udivmoddi4+0x2ac>
 800049c:	1a86      	subs	r6, r0, r2
 800049e:	eb64 0303 	sbc.w	r3, r4, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d0e6      	beq.n	8000476 <__udivmoddi4+0xa6>
 80004a8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ac:	e7e3      	b.n	8000476 <__udivmoddi4+0xa6>
 80004ae:	2a00      	cmp	r2, #0
 80004b0:	f040 8090 	bne.w	80005d4 <__udivmoddi4+0x204>
 80004b4:	eba1 040c 	sub.w	r4, r1, ip
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	2101      	movs	r1, #1
 80004c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ca:	fb08 4416 	mls	r4, r8, r6, r4
 80004ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004d2:	fb07 f006 	mul.w	r0, r7, r6
 80004d6:	4298      	cmp	r0, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x11c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f106 34ff 	add.w	r4, r6, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x11a>
 80004e4:	4298      	cmp	r0, r3
 80004e6:	f200 80cd 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004ea:	4626      	mov	r6, r4
 80004ec:	1a1c      	subs	r4, r3, r0
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004f6:	fb08 4410 	mls	r4, r8, r0, r4
 80004fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004fe:	fb00 f707 	mul.w	r7, r0, r7
 8000502:	429f      	cmp	r7, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x148>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 34ff 	add.w	r4, r0, #4294967295
 800050e:	d202      	bcs.n	8000516 <__udivmoddi4+0x146>
 8000510:	429f      	cmp	r7, r3
 8000512:	f200 80b0 	bhi.w	8000676 <__udivmoddi4+0x2a6>
 8000516:	4620      	mov	r0, r4
 8000518:	1bdb      	subs	r3, r3, r7
 800051a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800051e:	e7a5      	b.n	800046c <__udivmoddi4+0x9c>
 8000520:	f1c1 0620 	rsb	r6, r1, #32
 8000524:	408b      	lsls	r3, r1
 8000526:	fa22 f706 	lsr.w	r7, r2, r6
 800052a:	431f      	orrs	r7, r3
 800052c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000530:	fa04 f301 	lsl.w	r3, r4, r1
 8000534:	ea43 030c 	orr.w	r3, r3, ip
 8000538:	40f4      	lsrs	r4, r6
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	0c38      	lsrs	r0, r7, #16
 8000540:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000544:	fbb4 fef0 	udiv	lr, r4, r0
 8000548:	fa1f fc87 	uxth.w	ip, r7
 800054c:	fb00 441e 	mls	r4, r0, lr, r4
 8000550:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000554:	fb0e f90c 	mul.w	r9, lr, ip
 8000558:	45a1      	cmp	r9, r4
 800055a:	fa02 f201 	lsl.w	r2, r2, r1
 800055e:	d90a      	bls.n	8000576 <__udivmoddi4+0x1a6>
 8000560:	193c      	adds	r4, r7, r4
 8000562:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000566:	f080 8084 	bcs.w	8000672 <__udivmoddi4+0x2a2>
 800056a:	45a1      	cmp	r9, r4
 800056c:	f240 8081 	bls.w	8000672 <__udivmoddi4+0x2a2>
 8000570:	f1ae 0e02 	sub.w	lr, lr, #2
 8000574:	443c      	add	r4, r7
 8000576:	eba4 0409 	sub.w	r4, r4, r9
 800057a:	fa1f f983 	uxth.w	r9, r3
 800057e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000582:	fb00 4413 	mls	r4, r0, r3, r4
 8000586:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800058a:	fb03 fc0c 	mul.w	ip, r3, ip
 800058e:	45a4      	cmp	ip, r4
 8000590:	d907      	bls.n	80005a2 <__udivmoddi4+0x1d2>
 8000592:	193c      	adds	r4, r7, r4
 8000594:	f103 30ff 	add.w	r0, r3, #4294967295
 8000598:	d267      	bcs.n	800066a <__udivmoddi4+0x29a>
 800059a:	45a4      	cmp	ip, r4
 800059c:	d965      	bls.n	800066a <__udivmoddi4+0x29a>
 800059e:	3b02      	subs	r3, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005a6:	fba0 9302 	umull	r9, r3, r0, r2
 80005aa:	eba4 040c 	sub.w	r4, r4, ip
 80005ae:	429c      	cmp	r4, r3
 80005b0:	46ce      	mov	lr, r9
 80005b2:	469c      	mov	ip, r3
 80005b4:	d351      	bcc.n	800065a <__udivmoddi4+0x28a>
 80005b6:	d04e      	beq.n	8000656 <__udivmoddi4+0x286>
 80005b8:	b155      	cbz	r5, 80005d0 <__udivmoddi4+0x200>
 80005ba:	ebb8 030e 	subs.w	r3, r8, lr
 80005be:	eb64 040c 	sbc.w	r4, r4, ip
 80005c2:	fa04 f606 	lsl.w	r6, r4, r6
 80005c6:	40cb      	lsrs	r3, r1
 80005c8:	431e      	orrs	r6, r3
 80005ca:	40cc      	lsrs	r4, r1
 80005cc:	e9c5 6400 	strd	r6, r4, [r5]
 80005d0:	2100      	movs	r1, #0
 80005d2:	e750      	b.n	8000476 <__udivmoddi4+0xa6>
 80005d4:	f1c2 0320 	rsb	r3, r2, #32
 80005d8:	fa20 f103 	lsr.w	r1, r0, r3
 80005dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e0:	fa24 f303 	lsr.w	r3, r4, r3
 80005e4:	4094      	lsls	r4, r2
 80005e6:	430c      	orrs	r4, r1
 80005e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80005f0:	fa1f f78c 	uxth.w	r7, ip
 80005f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005f8:	fb08 3110 	mls	r1, r8, r0, r3
 80005fc:	0c23      	lsrs	r3, r4, #16
 80005fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000602:	fb00 f107 	mul.w	r1, r0, r7
 8000606:	4299      	cmp	r1, r3
 8000608:	d908      	bls.n	800061c <__udivmoddi4+0x24c>
 800060a:	eb1c 0303 	adds.w	r3, ip, r3
 800060e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000612:	d22c      	bcs.n	800066e <__udivmoddi4+0x29e>
 8000614:	4299      	cmp	r1, r3
 8000616:	d92a      	bls.n	800066e <__udivmoddi4+0x29e>
 8000618:	3802      	subs	r0, #2
 800061a:	4463      	add	r3, ip
 800061c:	1a5b      	subs	r3, r3, r1
 800061e:	b2a4      	uxth	r4, r4
 8000620:	fbb3 f1f8 	udiv	r1, r3, r8
 8000624:	fb08 3311 	mls	r3, r8, r1, r3
 8000628:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800062c:	fb01 f307 	mul.w	r3, r1, r7
 8000630:	42a3      	cmp	r3, r4
 8000632:	d908      	bls.n	8000646 <__udivmoddi4+0x276>
 8000634:	eb1c 0404 	adds.w	r4, ip, r4
 8000638:	f101 36ff 	add.w	r6, r1, #4294967295
 800063c:	d213      	bcs.n	8000666 <__udivmoddi4+0x296>
 800063e:	42a3      	cmp	r3, r4
 8000640:	d911      	bls.n	8000666 <__udivmoddi4+0x296>
 8000642:	3902      	subs	r1, #2
 8000644:	4464      	add	r4, ip
 8000646:	1ae4      	subs	r4, r4, r3
 8000648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800064c:	e739      	b.n	80004c2 <__udivmoddi4+0xf2>
 800064e:	4604      	mov	r4, r0
 8000650:	e6f0      	b.n	8000434 <__udivmoddi4+0x64>
 8000652:	4608      	mov	r0, r1
 8000654:	e706      	b.n	8000464 <__udivmoddi4+0x94>
 8000656:	45c8      	cmp	r8, r9
 8000658:	d2ae      	bcs.n	80005b8 <__udivmoddi4+0x1e8>
 800065a:	ebb9 0e02 	subs.w	lr, r9, r2
 800065e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000662:	3801      	subs	r0, #1
 8000664:	e7a8      	b.n	80005b8 <__udivmoddi4+0x1e8>
 8000666:	4631      	mov	r1, r6
 8000668:	e7ed      	b.n	8000646 <__udivmoddi4+0x276>
 800066a:	4603      	mov	r3, r0
 800066c:	e799      	b.n	80005a2 <__udivmoddi4+0x1d2>
 800066e:	4630      	mov	r0, r6
 8000670:	e7d4      	b.n	800061c <__udivmoddi4+0x24c>
 8000672:	46d6      	mov	lr, sl
 8000674:	e77f      	b.n	8000576 <__udivmoddi4+0x1a6>
 8000676:	4463      	add	r3, ip
 8000678:	3802      	subs	r0, #2
 800067a:	e74d      	b.n	8000518 <__udivmoddi4+0x148>
 800067c:	4606      	mov	r6, r0
 800067e:	4623      	mov	r3, r4
 8000680:	4608      	mov	r0, r1
 8000682:	e70f      	b.n	80004a4 <__udivmoddi4+0xd4>
 8000684:	3e02      	subs	r6, #2
 8000686:	4463      	add	r3, ip
 8000688:	e730      	b.n	80004ec <__udivmoddi4+0x11c>
 800068a:	bf00      	nop

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
 80006b0:	615a      	str	r2, [r3, #20]
 80006b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006b6:	4a30      	ldr	r2, [pc, #192]	@ (8000778 <MX_ADC1_Init+0xe8>)
 80006b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006cc:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d8:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006de:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e4:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ea:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <MX_ADC1_Init+0xe4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000702:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_ADC1_Init+0xe4>)
 8000704:	2200      	movs	r2, #0
 8000706:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000708:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_ADC1_Init+0xe4>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000710:	4818      	ldr	r0, [pc, #96]	@ (8000774 <MX_ADC1_Init+0xe4>)
 8000712:	f001 f8dd 	bl	80018d0 <HAL_ADC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800071c:	f000 fbac 	bl	8000e78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4812      	ldr	r0, [pc, #72]	@ (8000774 <MX_ADC1_Init+0xe4>)
 800072c:	f002 f824 	bl	8002778 <HAL_ADCEx_MultiModeConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000736:	f000 fb9f 	bl	8000e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_ADC1_Init+0xec>)
 800073c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073e:	2306      	movs	r3, #6
 8000740:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000746:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800074a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074c:	2304      	movs	r3, #4
 800074e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_ADC1_Init+0xe4>)
 800075e:	f001 fbb1 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000768:	f000 fb86 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	240001f8 	.word	0x240001f8
 8000778:	40022000 	.word	0x40022000
 800077c:	0c900008 	.word	0x0c900008

08000780 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b0ba      	sub	sp, #232	@ 0xe8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	22c0      	movs	r2, #192	@ 0xc0
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00c f810 	bl	800c7c6 <memset>
  if(adcHandle->Instance==ADC1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000858 <HAL_ADC_MspInit+0xd8>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d14f      	bne.n	8000850 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007b0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007b4:	f04f 0300 	mov.w	r3, #0
 80007b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80007c0:	2310      	movs	r3, #16
 80007c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 80007c4:	2303      	movs	r3, #3
 80007c6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007d0:	23c0      	movs	r3, #192	@ 0xc0
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80007d8:	2300      	movs	r3, #0
 80007da:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fb66 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80007f2:	f000 fb41 	bl	8000e78 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <HAL_ADC_MspInit+0xdc>)
 80007f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80007fc:	4a17      	ldr	r2, [pc, #92]	@ (800085c <HAL_ADC_MspInit+0xdc>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <HAL_ADC_MspInit+0xdc>)
 8000808:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800080c:	f003 0320 	and.w	r3, r3, #32
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <HAL_ADC_MspInit+0xdc>)
 8000816:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081a:	4a10      	ldr	r2, [pc, #64]	@ (800085c <HAL_ADC_MspInit+0xdc>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000824:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <HAL_ADC_MspInit+0xdc>)
 8000826:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000832:	2340      	movs	r3, #64	@ 0x40
 8000834:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000848:	4619      	mov	r1, r3
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <HAL_ADC_MspInit+0xe0>)
 800084c:	f002 f910 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000850:	bf00      	nop
 8000852:	37e8      	adds	r7, #232	@ 0xe8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40022000 	.word	0x40022000
 800085c:	58024400 	.word	0x58024400
 8000860:	58020000 	.word	0x58020000

08000864 <vCopyBuffer>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void vCopyBuffer(){
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
	for(int i=0; i < NUM_SAMPLES; i++){
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	e00a      	b.n	8000886 <vCopyBuffer+0x22>
		processing_buffer[i] = adc_buffer[i];
 8000870:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <vCopyBuffer+0x38>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000878:	4909      	ldr	r1, [pc, #36]	@ (80008a0 <vCopyBuffer+0x3c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i < NUM_SAMPLES; i++){
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800088c:	dbf0      	blt.n	8000870 <vCopyBuffer+0xc>
	}
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	2400025c 	.word	0x2400025c
 80008a0:	24000a30 	.word	0x24000a30

080008a4 <vADC_Acquire>:

// The Timer Callback function
void vADC_Acquire(){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
	uint32_t value = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 80008ae:	4813      	ldr	r0, [pc, #76]	@ (80008fc <vADC_Acquire+0x58>)
 80008b0:	f001 f968 	bl	8001b84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	4811      	ldr	r0, [pc, #68]	@ (80008fc <vADC_Acquire+0x58>)
 80008b8:	f001 fa1e 	bl	8001cf8 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(&hadc1);
 80008bc:	480f      	ldr	r0, [pc, #60]	@ (80008fc <vADC_Acquire+0x58>)
 80008be:	f001 faf3 	bl	8001ea8 <HAL_ADC_GetValue>
 80008c2:	6078      	str	r0, [r7, #4]
	adc_buffer[current_sample_n] = value;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <vADC_Acquire+0x5c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	490e      	ldr	r1, [pc, #56]	@ (8000904 <vADC_Acquire+0x60>)
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	current_sample_n++;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <vADC_Acquire+0x5c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <vADC_Acquire+0x5c>)
 80008d8:	6013      	str	r3, [r2, #0]

	if(current_sample_n == NUM_SAMPLES){
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <vADC_Acquire+0x5c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008e2:	d107      	bne.n	80008f4 <vADC_Acquire+0x50>
		current_sample_n = 0;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <vADC_Acquire+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(xProcessingSemaphore);
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <vADC_Acquire+0x64>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f007 fefe 	bl	80086f0 <osSemaphoreRelease>
	}
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	240001f8 	.word	0x240001f8
 8000900:	24000a2c 	.word	0x24000a2c
 8000904:	2400025c 	.word	0x2400025c
 8000908:	24001208 	.word	0x24001208

0800090c <vFrequencyEstimationTask>:


void vFrequencyEstimationTask(void *pvParameters){
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	@ 0x30
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

	unsigned long int iteractions = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
	unsigned long int zero_crossing;

	//The ADC use 16bits (0V->0  3.3V->65536)
	unsigned long int logical_zero = 32768; // =(2^16)/2  indicates the logical zero (1.65V)
 8000918:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800091c:	623b      	str	r3, [r7, #32]

	// Represent the duration in seconds of the sampling process
	float sampling_period = (float)NUM_SAMPLES / SAMPLING_FREQUENCY_HZ;
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <vFrequencyEstimationTask+0xc8>)
 8000920:	61fb      	str	r3, [r7, #28]

	float frequency;

	while(1){
		osSemaphoreAcquire(xProcessingSemaphore, osWaitForever);
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <vFrequencyEstimationTask+0xcc>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f04f 31ff 	mov.w	r1, #4294967295
 800092a:	4618      	mov	r0, r3
 800092c:	f007 fe8e 	bl	800864c <osSemaphoreAcquire>
		vCopyBuffer();
 8000930:	f7ff ff98 	bl	8000864 <vCopyBuffer>
		zero_crossing = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28

		// calculate the number of times the signal pass through the logical zero
		for(int i=1; i<NUM_SAMPLES; i++){
 8000938:	2301      	movs	r3, #1
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
 800093c:	e020      	b.n	8000980 <vFrequencyEstimationTask+0x74>
			unsigned long int prev = processing_buffer[i-1];
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	3b01      	subs	r3, #1
 8000942:	4a26      	ldr	r2, [pc, #152]	@ (80009dc <vFrequencyEstimationTask+0xd0>)
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	617b      	str	r3, [r7, #20]
			unsigned long int curr = processing_buffer[i];
 800094a:	4a24      	ldr	r2, [pc, #144]	@ (80009dc <vFrequencyEstimationTask+0xd0>)
 800094c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000952:	613b      	str	r3, [r7, #16]
			if ((prev < logical_zero && curr > logical_zero) || (prev > logical_zero && curr < logical_zero)){
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	429a      	cmp	r2, r3
 800095a:	d203      	bcs.n	8000964 <vFrequencyEstimationTask+0x58>
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	6a3b      	ldr	r3, [r7, #32]
 8000960:	429a      	cmp	r2, r3
 8000962:	d807      	bhi.n	8000974 <vFrequencyEstimationTask+0x68>
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	429a      	cmp	r2, r3
 800096a:	d906      	bls.n	800097a <vFrequencyEstimationTask+0x6e>
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	429a      	cmp	r2, r3
 8000972:	d202      	bcs.n	800097a <vFrequencyEstimationTask+0x6e>
				zero_crossing++;
 8000974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000976:	3301      	adds	r3, #1
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
		for(int i=1; i<NUM_SAMPLES; i++){
 800097a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800097c:	3301      	adds	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000982:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000986:	dbda      	blt.n	800093e <vFrequencyEstimationTask+0x32>
			}
		}

		// A sinusoidal wave cycle has 2 zero crossing
		// The frequency is define as the number of cycles (number of zero crossing / 2) divided by the period
		frequency = ((float)zero_crossing/2.0) / sampling_period;
 8000988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800098a:	ee07 3a90 	vmov	s15, r3
 800098e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000992:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000996:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800099a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800099e:	edd7 7a07 	vldr	s15, [r7, #28]
 80009a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80009aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009ae:	edc7 7a06 	vstr	s15, [r7, #24]

		xMessage msg = {.iter = iteractions, .freq = frequency};
 80009b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	60fb      	str	r3, [r7, #12]

		iteractions++;
 80009ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009bc:	3301      	adds	r3, #1
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c

		osMessageQueuePut(xSerialQueue, &msg, 0, 0);
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <vFrequencyEstimationTask+0xd4>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	f107 0108 	add.w	r1, r7, #8
 80009c8:	2300      	movs	r3, #0
 80009ca:	2200      	movs	r2, #0
 80009cc:	f007 ff48 	bl	8008860 <osMessageQueuePut>
	while(1){
 80009d0:	e7a7      	b.n	8000922 <vFrequencyEstimationTask+0x16>
 80009d2:	bf00      	nop
 80009d4:	40a00000 	.word	0x40a00000
 80009d8:	24001208 	.word	0x24001208
 80009dc:	24000a30 	.word	0x24000a30
 80009e0:	2400120c 	.word	0x2400120c

080009e4 <vSerialPrintTask>:
	}
}

void vSerialPrintTask(void *pvParameters){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	6078      	str	r0, [r7, #4]

	xMessage msg;

	unsigned long int lowBound = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

	unsigned long int upperBound = NUM_SAMPLES;
 80009f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009f4:	613b      	str	r3, [r7, #16]

	while(1){
		osMessageQueueGet(xSerialQueue, &msg, 0, osWaitForever);
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <vSerialPrintTask+0x54>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	f107 0108 	add.w	r1, r7, #8
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	2200      	movs	r2, #0
 8000a04:	f007 ff8c 	bl	8008920 <osMessageQueueGet>

		lowBound = msg.iter * NUM_SAMPLES;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]

		upperBound = lowBound + NUM_SAMPLES - 1;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8000a1a:	613b      	str	r3, [r7, #16]

		printf("Samples [%lu - %lu] Estimated Frequency = %.2f Hz\r\n", lowBound, upperBound, msg.freq);
 8000a1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a24:	ed8d 7b00 	vstr	d7, [sp]
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	6979      	ldr	r1, [r7, #20]
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <vSerialPrintTask+0x58>)
 8000a2e:	f00b fe75 	bl	800c71c <iprintf>
		osMessageQueueGet(xSerialQueue, &msg, 0, osWaitForever);
 8000a32:	bf00      	nop
 8000a34:	e7df      	b.n	80009f6 <vSerialPrintTask+0x12>
 8000a36:	bf00      	nop
 8000a38:	2400120c 	.word	0x2400120c
 8000a3c:	0800e62c 	.word	0x0800e62c

08000a40 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	xProcessingSemaphore = osSemaphoreNew(1, 0, NULL);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f007 fd75 	bl	8008538 <osSemaphoreNew>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac8 <MX_FREERTOS_Init+0x88>)
 8000a52:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
	xTimer = osTimerNew(vADC_Acquire, osTimerPeriodic, NULL, NULL);
 8000a54:	2300      	movs	r3, #0
 8000a56:	2200      	movs	r2, #0
 8000a58:	2101      	movs	r1, #1
 8000a5a:	481c      	ldr	r0, [pc, #112]	@ (8000acc <MX_FREERTOS_Init+0x8c>)
 8000a5c:	f007 fcc2 	bl	80083e4 <osTimerNew>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <MX_FREERTOS_Init+0x90>)
 8000a64:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	xSerialQueue = osMessageQueueNew(SERIAL_QUEUE_MAX_MSG, sizeof(xMessage), NULL);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f007 fe84 	bl	8008778 <osMessageQueueNew>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a18      	ldr	r2, [pc, #96]	@ (8000ad4 <MX_FREERTOS_Init+0x94>)
 8000a74:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a76:	4a18      	ldr	r2, [pc, #96]	@ (8000ad8 <MX_FREERTOS_Init+0x98>)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4818      	ldr	r0, [pc, #96]	@ (8000adc <MX_FREERTOS_Init+0x9c>)
 8000a7c:	f007 fbf0 	bl	8008260 <osThreadNew>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <MX_FREERTOS_Init+0xa0>)
 8000a84:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTimerStatus = osTimerStart(xTimer, pdMS_TO_TICKS((1.0/(float)SAMPLING_FREQUENCY_HZ)*1000));
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_FREERTOS_Init+0x90>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	210a      	movs	r1, #10
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f007 fd25 	bl	80084dc <osTimerStart>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <MX_FREERTOS_Init+0xa4>)
 8000a96:	6013      	str	r3, [r2, #0]
  if(xTimerStatus == osOK && xProcessingSemaphore != NULL && xSerialQueue != NULL){
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_FREERTOS_Init+0xa4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d111      	bne.n	8000ac4 <MX_FREERTOS_Init+0x84>
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_FREERTOS_Init+0x88>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00d      	beq.n	8000ac4 <MX_FREERTOS_Init+0x84>
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <MX_FREERTOS_Init+0x94>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d009      	beq.n	8000ac4 <MX_FREERTOS_Init+0x84>
	  osThreadNew(vFrequencyEstimationTask, NULL, &frequencyEstimationTask_attribute);
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <MX_FREERTOS_Init+0xa8>)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_FREERTOS_Init+0xac>)
 8000ab6:	f007 fbd3 	bl	8008260 <osThreadNew>
	  osThreadNew(vSerialPrintTask, NULL, &serialPrintTask_attribute);
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <MX_FREERTOS_Init+0xb0>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <MX_FREERTOS_Init+0xb4>)
 8000ac0:	f007 fbce 	bl	8008260 <osThreadNew>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24001208 	.word	0x24001208
 8000acc:	080008a5 	.word	0x080008a5
 8000ad0:	24001200 	.word	0x24001200
 8000ad4:	2400120c 	.word	0x2400120c
 8000ad8:	0800e6c0 	.word	0x0800e6c0
 8000adc:	08000af9 	.word	0x08000af9
 8000ae0:	24001210 	.word	0x24001210
 8000ae4:	24001204 	.word	0x24001204
 8000ae8:	0800e678 	.word	0x0800e678
 8000aec:	0800090d 	.word	0x0800090d
 8000af0:	0800e69c 	.word	0x0800e69c
 8000af4:	080009e5 	.word	0x080009e5

08000af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f007 fc3f 	bl	8008384 <osDelay>
 8000b06:	e7fb      	b.n	8000b00 <StartDefaultTask+0x8>

08000b08 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	@ 0x38
 8000b0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b80      	ldr	r3, [pc, #512]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b24:	4a7e      	ldr	r2, [pc, #504]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b2e:	4b7c      	ldr	r3, [pc, #496]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3c:	4b78      	ldr	r3, [pc, #480]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b42:	4a77      	ldr	r2, [pc, #476]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b44:	f043 0320 	orr.w	r3, r3, #32
 8000b48:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b4c:	4b74      	ldr	r3, [pc, #464]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	4b71      	ldr	r3, [pc, #452]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b60:	4a6f      	ldr	r2, [pc, #444]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b66:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b69      	ldr	r3, [pc, #420]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b7e:	4a68      	ldr	r2, [pc, #416]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b88:	4b65      	ldr	r3, [pc, #404]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b62      	ldr	r3, [pc, #392]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b9c:	4a60      	ldr	r2, [pc, #384]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ba6:	4b5e      	ldr	r3, [pc, #376]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000ba8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000bb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bba:	4a59      	ldr	r2, [pc, #356]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bc4:	4b56      	ldr	r3, [pc, #344]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000bc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	4b53      	ldr	r3, [pc, #332]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd8:	4a51      	ldr	r2, [pc, #324]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bde:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000be2:	4b4f      	ldr	r3, [pc, #316]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c00:	4b47      	ldr	r3, [pc, #284]	@ (8000d20 <MX_GPIO_Init+0x218>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c14:	4843      	ldr	r0, [pc, #268]	@ (8000d24 <MX_GPIO_Init+0x21c>)
 8000c16:	f002 f8db 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c20:	4841      	ldr	r0, [pc, #260]	@ (8000d28 <MX_GPIO_Init+0x220>)
 8000c22:	f002 f8d5 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4840      	ldr	r0, [pc, #256]	@ (8000d2c <MX_GPIO_Init+0x224>)
 8000c2c:	f002 f8d0 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	483a      	ldr	r0, [pc, #232]	@ (8000d30 <MX_GPIO_Init+0x228>)
 8000c46:	f001 ff13 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4830      	ldr	r0, [pc, #192]	@ (8000d24 <MX_GPIO_Init+0x21c>)
 8000c64:	f001 ff04 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4829      	ldr	r0, [pc, #164]	@ (8000d28 <MX_GPIO_Init+0x220>)
 8000c82:	f001 fef5 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c86:	2380      	movs	r3, #128	@ 0x80
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4826      	ldr	r0, [pc, #152]	@ (8000d34 <MX_GPIO_Init+0x22c>)
 8000c9c:	f001 fee8 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ca0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4820      	ldr	r0, [pc, #128]	@ (8000d38 <MX_GPIO_Init+0x230>)
 8000cb6:	f001 fedb 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ccc:	230a      	movs	r3, #10
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4818      	ldr	r0, [pc, #96]	@ (8000d38 <MX_GPIO_Init+0x230>)
 8000cd8:	f001 feca 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000cdc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <MX_GPIO_Init+0x230>)
 8000cf6:	f001 febb 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <MX_GPIO_Init+0x224>)
 8000d12:	f001 fead 	bl	8002a70 <HAL_GPIO_Init>

}
 8000d16:	bf00      	nop
 8000d18:	3738      	adds	r7, #56	@ 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58021400 	.word	0x58021400
 8000d28:	58020400 	.word	0x58020400
 8000d2c:	58021000 	.word	0x58021000
 8000d30:	58020800 	.word	0x58020800
 8000d34:	58021800 	.word	0x58021800
 8000d38:	58020000 	.word	0x58020000

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d40:	f000 fb88 	bl	8001454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d44:	f000 f810 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d48:	f7ff fede 	bl	8000b08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d4c:	f7ff fca0 	bl	8000690 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000d50:	f000 fa86 	bl	8001260 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d54:	f000 fb4c 	bl	80013f0 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d58:	f007 fa38 	bl	80081cc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d5c:	f7ff fe70 	bl	8000a40 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d60:	f007 fa58 	bl	8008214 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <main+0x28>

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09c      	sub	sp, #112	@ 0x70
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	224c      	movs	r2, #76	@ 0x4c
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f00b fd25 	bl	800c7c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2220      	movs	r2, #32
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f00b fd1f 	bl	800c7c6 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000d88:	4b30      	ldr	r3, [pc, #192]	@ (8000e4c <SystemClock_Config+0xe4>)
 8000d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d92:	2004      	movs	r0, #4
 8000d94:	f002 f836 	bl	8002e04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <SystemClock_Config+0xe8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e50 <SystemClock_Config+0xe8>)
 8000da2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b29      	ldr	r3, [pc, #164]	@ (8000e50 <SystemClock_Config+0xe8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000db4:	bf00      	nop
 8000db6:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <SystemClock_Config+0xe8>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dc2:	d1f8      	bne.n	8000db6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000dc4:	2321      	movs	r3, #33	@ 0x21
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dc8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000dde:	2318      	movs	r3, #24
 8000de0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de6:	2304      	movs	r3, #4
 8000de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dee:	230c      	movs	r3, #12
 8000df0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f85a 	bl	8002eb8 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e0a:	f000 f835 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	233f      	movs	r3, #63	@ 0x3f
 8000e10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2303      	movs	r3, #3
 8000e14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2102      	movs	r1, #2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fc72 	bl	800371c <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000e3e:	f000 f81b 	bl	8000e78 <Error_Handler>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3770      	adds	r7, #112	@ 0x70
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58024800 	.word	0x58024800

08000e54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e66:	f000 fb31 	bl	80014cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40001000 	.word	0x40001000

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <Error_Handler+0x8>

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <HAL_MspInit+0x38>)
 8000e8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000e90:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_MspInit+0x38>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_MspInit+0x38>)
 8000e9c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f06f 0001 	mvn.w	r0, #1
 8000eb0:	f001 fdb6 	bl	8002a20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	58024400 	.word	0x58024400

08000ec0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b090      	sub	sp, #64	@ 0x40
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	d827      	bhi.n	8000f1e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	2036      	movs	r0, #54	@ 0x36
 8000ed4:	f001 fda4 	bl	8002a20 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ed8:	2036      	movs	r0, #54	@ 0x36
 8000eda:	f001 fdbb 	bl	8002a54 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ede:	4a29      	ldr	r2, [pc, #164]	@ (8000f84 <HAL_InitTick+0xc4>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee4:	4b28      	ldr	r3, [pc, #160]	@ (8000f88 <HAL_InitTick+0xc8>)
 8000ee6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000eea:	4a27      	ldr	r2, [pc, #156]	@ (8000f88 <HAL_InitTick+0xc8>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ef4:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <HAL_InitTick+0xc8>)
 8000ef6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f02:	f107 0210 	add.w	r2, r7, #16
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 ff91 	bl	8003e34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d106      	bne.n	8000f2a <HAL_InitTick+0x6a>
 8000f1c:	e001      	b.n	8000f22 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e02b      	b.n	8000f7a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f22:	f002 ff5b 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8000f26:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000f28:	e004      	b.n	8000f34 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f2a:	f002 ff57 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f36:	4a15      	ldr	r2, [pc, #84]	@ (8000f8c <HAL_InitTick+0xcc>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	0c9b      	lsrs	r3, r3, #18
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <HAL_InitTick+0xd0>)
 8000f44:	4a13      	ldr	r2, [pc, #76]	@ (8000f94 <HAL_InitTick+0xd4>)
 8000f46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_InitTick+0xd0>)
 8000f4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f50:	4a0f      	ldr	r2, [pc, #60]	@ (8000f90 <HAL_InitTick+0xd0>)
 8000f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HAL_InitTick+0xd0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_InitTick+0xd0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f62:	480b      	ldr	r0, [pc, #44]	@ (8000f90 <HAL_InitTick+0xd0>)
 8000f64:	f005 fbb2 	bl	80066cc <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f6e:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <HAL_InitTick+0xd0>)
 8000f70:	f005 fc0e 	bl	8006790 <HAL_TIM_Base_Start_IT>
 8000f74:	4603      	mov	r3, r0
 8000f76:	e000      	b.n	8000f7a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3740      	adds	r7, #64	@ 0x40
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	24000008 	.word	0x24000008
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	431bde83 	.word	0x431bde83
 8000f90:	24001214 	.word	0x24001214
 8000f94:	40001000 	.word	0x40001000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <NMI_Handler+0x4>

08000fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <MemManage_Handler+0x4>

08000fb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <TIM6_DAC_IRQHandler+0x10>)
 8000fd6:	f005 fc53 	bl	8006880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	24001214 	.word	0x24001214

08000fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return 1;
 8000fe8:	2301      	movs	r3, #1
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_kill>:

int _kill(int pid, int sig)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ffe:	f00b fc8b 	bl	800c918 <__errno>
 8001002:	4603      	mov	r3, r0
 8001004:	2216      	movs	r2, #22
 8001006:	601a      	str	r2, [r3, #0]
  return -1;
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_exit>:

void _exit (int status)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffe7 	bl	8000ff4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001026:	bf00      	nop
 8001028:	e7fd      	b.n	8001026 <_exit+0x12>

0800102a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e00a      	b.n	8001052 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103c:	f3af 8000 	nop.w
 8001040:	4601      	mov	r1, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	60ba      	str	r2, [r7, #8]
 8001048:	b2ca      	uxtb	r2, r1
 800104a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	dbf0      	blt.n	800103c <_read+0x12>
  }

  return len;
 800105a:	687b      	ldr	r3, [r7, #4]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e009      	b.n	800108a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	60ba      	str	r2, [r7, #8]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f9a4 	bl	80013cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	dbf1      	blt.n	8001076 <_write+0x12>
  }
  return len;
 8001092:	687b      	ldr	r3, [r7, #4]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <_close>:

int _close(int file)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c4:	605a      	str	r2, [r3, #4]
  return 0;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <_isatty>:

int _isatty(int file)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010dc:	2301      	movs	r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	@ (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f00b fbf0 	bl	800c918 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	24100000 	.word	0x24100000
 8001164:	00000400 	.word	0x00000400
 8001168:	24001260 	.word	0x24001260
 800116c:	24005e30 	.word	0x24005e30

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001174:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <SystemInit+0xd0>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a31      	ldr	r2, [pc, #196]	@ (8001240 <SystemInit+0xd0>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001184:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <SystemInit+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	2b02      	cmp	r3, #2
 800118e:	d807      	bhi.n	80011a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001190:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <SystemInit+0xd4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 030f 	bic.w	r3, r3, #15
 8001198:	4a2a      	ldr	r2, [pc, #168]	@ (8001244 <SystemInit+0xd4>)
 800119a:	f043 0303 	orr.w	r3, r3, #3
 800119e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011a0:	4b29      	ldr	r3, [pc, #164]	@ (8001248 <SystemInit+0xd8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a28      	ldr	r2, [pc, #160]	@ (8001248 <SystemInit+0xd8>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <SystemInit+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011b2:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <SystemInit+0xd8>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4924      	ldr	r1, [pc, #144]	@ (8001248 <SystemInit+0xd8>)
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <SystemInit+0xdc>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <SystemInit+0xd4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <SystemInit+0xd4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 030f 	bic.w	r3, r3, #15
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <SystemInit+0xd4>)
 80011d4:	f043 0303 	orr.w	r3, r3, #3
 80011d8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <SystemInit+0xd8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <SystemInit+0xd8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <SystemInit+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <SystemInit+0xd8>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <SystemInit+0xe0>)
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <SystemInit+0xd8>)
 80011f4:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <SystemInit+0xe4>)
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <SystemInit+0xd8>)
 80011fa:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <SystemInit+0xe8>)
 80011fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <SystemInit+0xd8>)
 8001200:	2200      	movs	r2, #0
 8001202:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001204:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <SystemInit+0xd8>)
 8001206:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <SystemInit+0xe8>)
 8001208:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <SystemInit+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <SystemInit+0xd8>)
 8001212:	4a11      	ldr	r2, [pc, #68]	@ (8001258 <SystemInit+0xe8>)
 8001214:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <SystemInit+0xd8>)
 8001218:	2200      	movs	r2, #0
 800121a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <SystemInit+0xd8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <SystemInit+0xd8>)
 8001222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001226:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <SystemInit+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <SystemInit+0xec>)
 8001230:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001234:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	52002000 	.word	0x52002000
 8001248:	58024400 	.word	0x58024400
 800124c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001250:	02020200 	.word	0x02020200
 8001254:	01ff0000 	.word	0x01ff0000
 8001258:	01010280 	.word	0x01010280
 800125c:	52004000 	.word	0x52004000

08001260 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 8001266:	4a23      	ldr	r2, [pc, #140]	@ (80012f4 <MX_USART3_UART_Init+0x94>)
 8001268:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a2:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012a8:	4811      	ldr	r0, [pc, #68]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 80012aa:	f005 fcdd 	bl	8006c68 <HAL_UART_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012b4:	f7ff fde0 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 80012bc:	f006 fe77 	bl	8007fae <HAL_UARTEx_SetTxFifoThreshold>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012c6:	f7ff fdd7 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4808      	ldr	r0, [pc, #32]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 80012ce:	f006 feac 	bl	800802a <HAL_UARTEx_SetRxFifoThreshold>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f7ff fdce 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_USART3_UART_Init+0x90>)
 80012de:	f006 fe2d 	bl	8007f3c <HAL_UARTEx_DisableFifoMode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012e8:	f7ff fdc6 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	24001264 	.word	0x24001264
 80012f4:	40004800 	.word	0x40004800

080012f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0ba      	sub	sp, #232	@ 0xe8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	22c0      	movs	r2, #192	@ 0xc0
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f00b fa54 	bl	800c7c6 <memset>
  if(uartHandle->Instance==USART3)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a27      	ldr	r2, [pc, #156]	@ (80013c0 <HAL_UART_MspInit+0xc8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d146      	bne.n	80013b6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001328:	f04f 0202 	mov.w	r2, #2
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fdba 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800134a:	f7ff fd95 	bl	8000e78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <HAL_UART_MspInit+0xcc>)
 8001350:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001354:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <HAL_UART_MspInit+0xcc>)
 8001356:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800135a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_UART_MspInit+0xcc>)
 8001360:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_UART_MspInit+0xcc>)
 800136e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001372:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <HAL_UART_MspInit+0xcc>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_UART_MspInit+0xcc>)
 800137e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800138a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800138e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a4:	2307      	movs	r3, #7
 80013a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <HAL_UART_MspInit+0xd0>)
 80013b2:	f001 fb5d 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013b6:	bf00      	nop
 80013b8:	37e8      	adds	r7, #232	@ 0xe8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40004800 	.word	0x40004800
 80013c4:	58024400 	.word	0x58024400
 80013c8:	58020c00 	.word	0x58020c00

080013cc <__io_putchar>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1000);
 80013d4:	1d39      	adds	r1, r7, #4
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	2201      	movs	r2, #1
 80013dc:	4803      	ldr	r0, [pc, #12]	@ (80013ec <__io_putchar+0x20>)
 80013de:	f005 fc93 	bl	8006d08 <HAL_UART_Transmit>
	return ch;
 80013e2:	687b      	ldr	r3, [r7, #4]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	24001264 	.word	0x24001264

080013f0 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001438 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001404:	f7ff feb4 	bl	8001170 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	@ (8001440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	@ (800144c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800142e:	f00b fa79 	bl	800c924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001432:	f7ff fc83 	bl	8000d3c <main>
  bx  lr
 8001436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800143c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001440:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001444:	0800eaa0 	.word	0x0800eaa0
  ldr r2, =_sbss
 8001448:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 800144c:	24005e30 	.word	0x24005e30

08001450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC_IRQHandler>
	...

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145a:	2003      	movs	r0, #3
 800145c:	f001 fad5 	bl	8002a0a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001460:	f002 fb12 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8001464:	4602      	mov	r2, r0
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <HAL_Init+0x68>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	4913      	ldr	r1, [pc, #76]	@ (80014c0 <HAL_Init+0x6c>)
 8001472:	5ccb      	ldrb	r3, [r1, r3]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
 800147c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_Init+0x68>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	4a0e      	ldr	r2, [pc, #56]	@ (80014c0 <HAL_Init+0x6c>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <HAL_Init+0x70>)
 8001496:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <HAL_Init+0x74>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149e:	200f      	movs	r0, #15
 80014a0:	f7ff fd0e 	bl	8000ec0 <HAL_InitTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e002      	b.n	80014b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ae:	f7ff fce9 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	58024400 	.word	0x58024400
 80014c0:	0800e6e4 	.word	0x0800e6e4
 80014c4:	24000004 	.word	0x24000004
 80014c8:	24000000 	.word	0x24000000

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2400000c 	.word	0x2400000c
 80014f0:	240012f8 	.word	0x240012f8

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	240012f8 	.word	0x240012f8

0800150c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	609a      	str	r2, [r3, #8]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3360      	adds	r3, #96	@ 0x60
 8001586:	461a      	mov	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	431a      	orrs	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	431a      	orrs	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	611a      	str	r2, [r3, #16]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b087      	sub	sp, #28
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3360      	adds	r3, #96	@ 0x60
 80015f6:	461a      	mov	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	601a      	str	r2, [r3, #0]
  }
}
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001642:	b480      	push	{r7}
 8001644:	b087      	sub	sp, #28
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3330      	adds	r3, #48	@ 0x30
 8001652:	461a      	mov	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	4413      	add	r3, r2
 8001660:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	211f      	movs	r1, #31
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	0e9b      	lsrs	r3, r3, #26
 800167a:	f003 011f 	and.w	r1, r3, #31
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	431a      	orrs	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800168e:	bf00      	nop
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800169a:	b480      	push	{r7}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3314      	adds	r3, #20
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	0e5b      	lsrs	r3, r3, #25
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	4413      	add	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	0d1b      	lsrs	r3, r3, #20
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	2107      	movs	r1, #7
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	401a      	ands	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	0d1b      	lsrs	r3, r3, #20
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	431a      	orrs	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016e4:	bf00      	nop
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0318 	and.w	r3, r3, #24
 8001712:	4908      	ldr	r1, [pc, #32]	@ (8001734 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001714:	40d9      	lsrs	r1, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	400b      	ands	r3, r1
 800171a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800171e:	431a      	orrs	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	000fffff 	.word	0x000fffff

08001738 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 031f 	and.w	r3, r3, #31
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <LL_ADC_DisableDeepPowerDown+0x20>)
 800177e:	4013      	ands	r3, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6093      	str	r3, [r2, #8]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	5fffffc0 	.word	0x5fffffc0

08001794 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017a8:	d101      	bne.n	80017ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	6fffffc0 	.word	0x6fffffc0

080017e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017f8:	d101      	bne.n	80017fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <LL_ADC_Enable+0x24>)
 800181a:	4013      	ands	r3, r2
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	7fffffc0 	.word	0x7fffffc0

08001834 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <LL_ADC_IsEnabled+0x18>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <LL_ADC_IsEnabled+0x1a>
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <LL_ADC_REG_StartConversion+0x24>)
 800186a:	4013      	ands	r3, r2
 800186c:	f043 0204 	orr.w	r2, r3, #4
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	7fffffc0 	.word	0x7fffffc0

08001884 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b04      	cmp	r3, #4
 8001896:	d101      	bne.n	800189c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d101      	bne.n	80018c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e138      	b.n	8001b5c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7fe ff41 	bl	8000780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff3f 	bl	8001794 <LL_ADC_IsDeepPowerDownEnabled>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff25 	bl	8001770 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff5a 	bl	80017e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d114      	bne.n	8001960 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff3e 	bl	80017bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001940:	4b88      	ldr	r3, [pc, #544]	@ (8001b64 <HAL_ADC_Init+0x294>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	4a88      	ldr	r2, [pc, #544]	@ (8001b68 <HAL_ADC_Init+0x298>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001952:	e002      	b.n	800195a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	3b01      	subs	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f9      	bne.n	8001954 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff3d 	bl	80017e4 <LL_ADC_IsInternalRegulatorEnabled>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001974:	f043 0210 	orr.w	r2, r3, #16
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff77 	bl	8001884 <LL_ADC_REG_IsConversionOngoing>
 8001996:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 80d2 	bne.w	8001b4a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 80ce 	bne.w	8001b4a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019b6:	f043 0202 	orr.w	r2, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff36 	bl	8001834 <LL_ADC_IsEnabled>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d110      	bne.n	80019f0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019ce:	4867      	ldr	r0, [pc, #412]	@ (8001b6c <HAL_ADC_Init+0x29c>)
 80019d0:	f7ff ff30 	bl	8001834 <LL_ADC_IsEnabled>
 80019d4:	4604      	mov	r4, r0
 80019d6:	4866      	ldr	r0, [pc, #408]	@ (8001b70 <HAL_ADC_Init+0x2a0>)
 80019d8:	f7ff ff2c 	bl	8001834 <LL_ADC_IsEnabled>
 80019dc:	4603      	mov	r3, r0
 80019de:	4323      	orrs	r3, r4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4862      	ldr	r0, [pc, #392]	@ (8001b74 <HAL_ADC_Init+0x2a4>)
 80019ec:	f7ff fd8e 	bl	800150c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7d5b      	ldrb	r3, [r3, #21]
 80019f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019fa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001a00:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7f1b      	ldrb	r3, [r3, #28]
 8001a06:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7f1b      	ldrb	r3, [r3, #28]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d106      	bne.n	8001a22 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	045b      	lsls	r3, r3, #17
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b4c      	ldr	r3, [pc, #304]	@ (8001b78 <HAL_ADC_Init+0x2a8>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	69b9      	ldr	r1, [r7, #24]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff14 	bl	8001884 <LL_ADC_REG_IsConversionOngoing>
 8001a5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff21 	bl	80018aa <LL_ADC_INJ_IsConversionOngoing>
 8001a68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d14a      	bne.n	8001b06 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d147      	bne.n	8001b06 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7d1b      	ldrb	r3, [r3, #20]
 8001a7a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b7c <HAL_ADC_Init+0x2ac>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d11b      	bne.n	8001ada <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691a      	ldr	r2, [r3, #16]
 8001aae:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <HAL_ADC_Init+0x2b0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	0411      	lsls	r1, r2, #16
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001abe:	4311      	orrs	r1, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001aca:	430a      	orrs	r2, r1
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	e007      	b.n	8001aea <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fd45 	bl	8002590 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d10c      	bne.n	8001b28 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b14:	f023 010f 	bic.w	r1, r3, #15
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b26:	e007      	b.n	8001b38 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 020f 	bic.w	r2, r2, #15
 8001b36:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b3c:	f023 0303 	bic.w	r3, r3, #3
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b48:	e007      	b.n	8001b5a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3724      	adds	r7, #36	@ 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	24000000 	.word	0x24000000
 8001b68:	053e2d63 	.word	0x053e2d63
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	40022100 	.word	0x40022100
 8001b74:	40022300 	.word	0x40022300
 8001b78:	fff0c003 	.word	0xfff0c003
 8001b7c:	ffffbffc 	.word	0xffffbffc
 8001b80:	fc00f81e 	.word	0xfc00f81e

08001b84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b8c:	4856      	ldr	r0, [pc, #344]	@ (8001ce8 <HAL_ADC_Start+0x164>)
 8001b8e:	f7ff fdd3 	bl	8001738 <LL_ADC_GetMultimode>
 8001b92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fe73 	bl	8001884 <LL_ADC_REG_IsConversionOngoing>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 809a 	bne.w	8001cda <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_Start+0x30>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e095      	b.n	8001ce0 <HAL_ADC_Start+0x15c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fc6b 	bl	8002498 <ADC_Enable>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 8081 	bne.w	8001cd0 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001bd2:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <HAL_ADC_Start+0x168>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a43      	ldr	r2, [pc, #268]	@ (8001cf0 <HAL_ADC_Start+0x16c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d002      	beq.n	8001bee <HAL_ADC_Start+0x6a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e000      	b.n	8001bf0 <HAL_ADC_Start+0x6c>
 8001bee:	4b41      	ldr	r3, [pc, #260]	@ (8001cf4 <HAL_ADC_Start+0x170>)
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d002      	beq.n	8001bfe <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c02:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c16:	d106      	bne.n	8001c26 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1c:	f023 0206 	bic.w	r2, r3, #6
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c24:	e002      	b.n	8001c2c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	221c      	movs	r2, #28
 8001c32:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf0 <HAL_ADC_Start+0x16c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d002      	beq.n	8001c4c <HAL_ADC_Start+0xc8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e000      	b.n	8001c4e <HAL_ADC_Start+0xca>
 8001c4c:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_ADC_Start+0x170>)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d008      	beq.n	8001c68 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d002      	beq.n	8001c68 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	d114      	bne.n	8001c92 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fde6 	bl	800185c <LL_ADC_REG_StartConversion>
 8001c90:	e025      	b.n	8001cde <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <HAL_ADC_Start+0x16c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d002      	beq.n	8001cae <HAL_ADC_Start+0x12a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	e000      	b.n	8001cb0 <HAL_ADC_Start+0x12c>
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_ADC_Start+0x170>)
 8001cb0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00f      	beq.n	8001cde <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cc6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cce:	e006      	b.n	8001cde <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001cd8:	e001      	b.n	8001cde <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40022300 	.word	0x40022300
 8001cec:	fffff0fe 	.word	0xfffff0fe
 8001cf0:	40022100 	.word	0x40022100
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d02:	4866      	ldr	r0, [pc, #408]	@ (8001e9c <HAL_ADC_PollForConversion+0x1a4>)
 8001d04:	f7ff fd18 	bl	8001738 <LL_ADC_GetMultimode>
 8001d08:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d102      	bne.n	8001d18 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d12:	2308      	movs	r3, #8
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e02a      	b.n	8001d6e <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d002      	beq.n	8001d2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b09      	cmp	r3, #9
 8001d28:	d111      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3c:	f043 0220 	orr.w	r2, r3, #32
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0a4      	b.n	8001e92 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d48:	2304      	movs	r3, #4
 8001d4a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001d4c:	e00f      	b.n	8001d6e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d4e:	4853      	ldr	r0, [pc, #332]	@ (8001e9c <HAL_ADC_PollForConversion+0x1a4>)
 8001d50:	f7ff fd00 	bl	8001754 <LL_ADC_GetMultiDMATransfer>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5e:	f043 0220 	orr.w	r2, r3, #32
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e093      	b.n	8001e92 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d6e:	f7ff fbc1 	bl	80014f4 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d74:	e021      	b.n	8001dba <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d01d      	beq.n	8001dba <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d7e:	f7ff fbb9 	bl	80014f4 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d302      	bcc.n	8001d94 <HAL_ADC_PollForConversion+0x9c>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d112      	bne.n	8001dba <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10b      	bne.n	8001dba <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da6:	f043 0204 	orr.w	r2, r3, #4
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e06b      	b.n	8001e92 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0d6      	beq.n	8001d76 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fc1f 	bl	800161c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01c      	beq.n	8001e1e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7d5b      	ldrb	r3, [r3, #21]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d118      	bne.n	8001e1e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d111      	bne.n	8001e1e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <HAL_ADC_PollForConversion+0x1a8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d002      	beq.n	8001e2e <HAL_ADC_PollForConversion+0x136>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e000      	b.n	8001e30 <HAL_ADC_PollForConversion+0x138>
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <HAL_ADC_PollForConversion+0x1ac>)
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d008      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d002      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b09      	cmp	r3, #9
 8001e48:	d104      	bne.n	8001e54 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	e00c      	b.n	8001e6e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <HAL_ADC_PollForConversion+0x1a8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d002      	beq.n	8001e64 <HAL_ADC_PollForConversion+0x16c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	e000      	b.n	8001e66 <HAL_ADC_PollForConversion+0x16e>
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <HAL_ADC_PollForConversion+0x1ac>)
 8001e66:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d104      	bne.n	8001e7e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2208      	movs	r2, #8
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e008      	b.n	8001e90 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	220c      	movs	r2, #12
 8001e8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022300 	.word	0x40022300
 8001ea0:	40022100 	.word	0x40022100
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b0a1      	sub	sp, #132	@ 0x84
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4a95      	ldr	r2, [pc, #596]	@ (8002134 <HAL_ADC_ConfigChannel+0x270>)
 8001ede:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x2a>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e2c0      	b.n	8002470 <HAL_ADC_ConfigChannel+0x5ac>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fcc2 	bl	8001884 <LL_ADC_REG_IsConversionOngoing>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 82a5 	bne.w	8002452 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db2c      	blt.n	8001f6a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x6a>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2201      	movs	r2, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	e016      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x98>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001f46:	2320      	movs	r3, #32
 8001f48:	e003      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001f4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2201      	movs	r2, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	69d1      	ldr	r1, [r2, #28]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	430b      	orrs	r3, r1
 8001f68:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff fb63 	bl	8001642 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fc7f 	bl	8001884 <LL_ADC_REG_IsConversionOngoing>
 8001f86:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc8c 	bl	80018aa <LL_ADC_INJ_IsConversionOngoing>
 8001f92:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 80a0 	bne.w	80020dc <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 809c 	bne.w	80020dc <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f7ff fb72 	bl	800169a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10b      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x118>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	e00a      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x12e>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d027      	beq.n	800204c <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6919      	ldr	r1, [r3, #16]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800200a:	f7ff fab3 	bl	8001574 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6919      	ldr	r1, [r3, #16]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7e5b      	ldrb	r3, [r3, #25]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d102      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x160>
 800201e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002022:	e000      	b.n	8002026 <HAL_ADC_ConfigChannel+0x162>
 8002024:	2300      	movs	r3, #0
 8002026:	461a      	mov	r2, r3
 8002028:	f7ff fadd 	bl	80015e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6919      	ldr	r1, [r3, #16]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	7e1b      	ldrb	r3, [r3, #24]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d102      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x17e>
 800203c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002040:	e000      	b.n	8002044 <HAL_ADC_ConfigChannel+0x180>
 8002042:	2300      	movs	r3, #0
 8002044:	461a      	mov	r2, r3
 8002046:	f7ff fab5 	bl	80015b4 <LL_ADC_SetDataRightShift>
 800204a:	e047      	b.n	80020dc <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	429a      	cmp	r2, r3
 800205e:	d107      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800206e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002092:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020b6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d107      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020da:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fba7 	bl	8001834 <LL_ADC_IsEnabled>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 81bb 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f7ff faf8 	bl	80016f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_ADC_ConfigChannel+0x270>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 8130 	bne.w	800236c <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x274>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	3301      	adds	r3, #1
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2b09      	cmp	r3, #9
 800212a:	bf94      	ite	ls
 800212c:	2301      	movls	r3, #1
 800212e:	2300      	movhi	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	e01b      	b.n	800216c <HAL_ADC_ConfigChannel+0x2a8>
 8002134:	47ff0000 	.word	0x47ff0000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002148:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800214a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e003      	b.n	800215c <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3301      	adds	r3, #1
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	2b09      	cmp	r3, #9
 8002164:	bf94      	ite	ls
 8002166:	2301      	movls	r3, #1
 8002168:	2300      	movhi	r3, #0
 800216a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800216c:	2b00      	cmp	r3, #0
 800216e:	d079      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_ADC_ConfigChannel+0x2c8>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	3301      	adds	r3, #1
 8002184:	069b      	lsls	r3, r3, #26
 8002186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800218a:	e015      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x2f4>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800219a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800219c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800219e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e003      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 80021a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	069b      	lsls	r3, r3, #26
 80021b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x314>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	3301      	adds	r3, #1
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	e017      	b.n	8002208 <HAL_ADC_ConfigChannel+0x344>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80021e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80021ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80021f0:	2320      	movs	r3, #32
 80021f2:	e003      	b.n	80021fc <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 80021f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	ea42 0103 	orr.w	r1, r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_ADC_ConfigChannel+0x36a>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	3301      	adds	r3, #1
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	051b      	lsls	r3, r3, #20
 800222c:	e018      	b.n	8002260 <HAL_ADC_ConfigChannel+0x39c>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800223c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e003      	b.n	8002252 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800224a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002260:	430b      	orrs	r3, r1
 8002262:	e07e      	b.n	8002362 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800226c:	2b00      	cmp	r3, #0
 800226e:	d107      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x3bc>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	3301      	adds	r3, #1
 8002278:	069b      	lsls	r3, r3, #26
 800227a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800227e:	e015      	b.n	80022ac <HAL_ADC_ConfigChannel+0x3e8>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	069b      	lsls	r3, r3, #26
 80022a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x408>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	e017      	b.n	80022fc <HAL_ADC_ConfigChannel+0x438>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	61bb      	str	r3, [r7, #24]
  return result;
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e003      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	ea42 0103 	orr.w	r1, r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10d      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x464>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	3b1e      	subs	r3, #30
 8002320:	051b      	lsls	r3, r3, #20
 8002322:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002326:	e01b      	b.n	8002360 <HAL_ADC_ConfigChannel+0x49c>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	60fb      	str	r3, [r7, #12]
  return result;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e003      	b.n	800234c <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f003 021f 	and.w	r2, r3, #31
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	3b1e      	subs	r3, #30
 800235a:	051b      	lsls	r3, r3, #20
 800235c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002360:	430b      	orrs	r3, r1
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	6892      	ldr	r2, [r2, #8]
 8002366:	4619      	mov	r1, r3
 8002368:	f7ff f997 	bl	800169a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da77      	bge.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002374:	4840      	ldr	r0, [pc, #256]	@ (8002478 <HAL_ADC_ConfigChannel+0x5b4>)
 8002376:	f7ff f8ef 	bl	8001558 <LL_ADC_GetCommonPathInternalCh>
 800237a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800237c:	483f      	ldr	r0, [pc, #252]	@ (800247c <HAL_ADC_ConfigChannel+0x5b8>)
 800237e:	f7ff fa59 	bl	8001834 <LL_ADC_IsEnabled>
 8002382:	4604      	mov	r4, r0
 8002384:	483e      	ldr	r0, [pc, #248]	@ (8002480 <HAL_ADC_ConfigChannel+0x5bc>)
 8002386:	f7ff fa55 	bl	8001834 <LL_ADC_IsEnabled>
 800238a:	4603      	mov	r3, r0
 800238c:	4323      	orrs	r3, r4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d155      	bne.n	800243e <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3b      	ldr	r2, [pc, #236]	@ (8002484 <HAL_ADC_ConfigChannel+0x5c0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d122      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x51e>
 800239c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800239e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11d      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a35      	ldr	r2, [pc, #212]	@ (8002480 <HAL_ADC_ConfigChannel+0x5bc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d159      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023b6:	4619      	mov	r1, r3
 80023b8:	482f      	ldr	r0, [pc, #188]	@ (8002478 <HAL_ADC_ConfigChannel+0x5b4>)
 80023ba:	f7ff f8ba 	bl	8001532 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023be:	4b32      	ldr	r3, [pc, #200]	@ (8002488 <HAL_ADC_ConfigChannel+0x5c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	099b      	lsrs	r3, r3, #6
 80023c4:	4a31      	ldr	r2, [pc, #196]	@ (800248c <HAL_ADC_ConfigChannel+0x5c8>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	3301      	adds	r3, #1
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023d2:	e002      	b.n	80023da <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e0:	e040      	b.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002490 <HAL_ADC_ConfigChannel+0x5cc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d111      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x54c>
 80023ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <HAL_ADC_ConfigChannel+0x5bc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d131      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002406:	4619      	mov	r1, r3
 8002408:	481b      	ldr	r0, [pc, #108]	@ (8002478 <HAL_ADC_ConfigChannel+0x5b4>)
 800240a:	f7ff f892 	bl	8001532 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800240e:	e029      	b.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1f      	ldr	r2, [pc, #124]	@ (8002494 <HAL_ADC_ConfigChannel+0x5d0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d124      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
 800241a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800241c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11f      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a15      	ldr	r2, [pc, #84]	@ (8002480 <HAL_ADC_ConfigChannel+0x5bc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d11a      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800242e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002430:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002434:	4619      	mov	r1, r3
 8002436:	4810      	ldr	r0, [pc, #64]	@ (8002478 <HAL_ADC_ConfigChannel+0x5b4>)
 8002438:	f7ff f87b 	bl	8001532 <LL_ADC_SetCommonPathInternalCh>
 800243c:	e012      	b.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002442:	f043 0220 	orr.w	r2, r3, #32
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002450:	e008      	b.n	8002464 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002456:	f043 0220 	orr.w	r2, r3, #32
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800246c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002470:	4618      	mov	r0, r3
 8002472:	3784      	adds	r7, #132	@ 0x84
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}
 8002478:	40022300 	.word	0x40022300
 800247c:	40022000 	.word	0x40022000
 8002480:	40022100 	.word	0x40022100
 8002484:	cb840000 	.word	0xcb840000
 8002488:	24000000 	.word	0x24000000
 800248c:	053e2d63 	.word	0x053e2d63
 8002490:	bac04000 	.word	0xbac04000
 8002494:	cfb80000 	.word	0xcfb80000

08002498 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff f9c5 	bl	8001834 <LL_ADC_IsEnabled>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d161      	bne.n	8002574 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	4b32      	ldr	r3, [pc, #200]	@ (8002580 <ADC_Enable+0xe8>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c2:	f043 0210 	orr.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	f043 0201 	orr.w	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e04d      	b.n	8002576 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f994 	bl	800180c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024e4:	f7ff f806 	bl	80014f4 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024ea:	4826      	ldr	r0, [pc, #152]	@ (8002584 <ADC_Enable+0xec>)
 80024ec:	f7ff f924 	bl	8001738 <LL_ADC_GetMultimode>
 80024f0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a24      	ldr	r2, [pc, #144]	@ (8002588 <ADC_Enable+0xf0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d002      	beq.n	8002502 <ADC_Enable+0x6a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	e000      	b.n	8002504 <ADC_Enable+0x6c>
 8002502:	4b22      	ldr	r3, [pc, #136]	@ (800258c <ADC_Enable+0xf4>)
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	4293      	cmp	r3, r2
 800250a:	d02c      	beq.n	8002566 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d130      	bne.n	8002574 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002512:	e028      	b.n	8002566 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f98b 	bl	8001834 <LL_ADC_IsEnabled>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f96f 	bl	800180c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800252e:	f7fe ffe1 	bl	80014f4 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d914      	bls.n	8002566 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d00d      	beq.n	8002566 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	f043 0210 	orr.w	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	f043 0201 	orr.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e007      	b.n	8002576 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d1cf      	bne.n	8002514 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	8000003f 	.word	0x8000003f
 8002584:	40022300 	.word	0x40022300
 8002588:	40022100 	.word	0x40022100
 800258c:	40022000 	.word	0x40022000

08002590 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002598:	4b60      	ldr	r3, [pc, #384]	@ (800271c <ADC_ConfigureBoostMode+0x18c>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01c      	beq.n	80025de <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025a4:	f001 fbea 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 80025a8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025b2:	d010      	beq.n	80025d6 <ADC_ConfigureBoostMode+0x46>
 80025b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025b8:	d873      	bhi.n	80026a2 <ADC_ConfigureBoostMode+0x112>
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025be:	d002      	beq.n	80025c6 <ADC_ConfigureBoostMode+0x36>
 80025c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025c4:	d16d      	bne.n	80026a2 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	0c1b      	lsrs	r3, r3, #16
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]
        break;
 80025d4:	e068      	b.n	80026a8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	60fb      	str	r3, [r7, #12]
        break;
 80025dc:	e064      	b.n	80026a8 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025de:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	f002 fe25 	bl	8005234 <HAL_RCCEx_GetPeriphCLKFreq>
 80025ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025f4:	d051      	beq.n	800269a <ADC_ConfigureBoostMode+0x10a>
 80025f6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025fa:	d854      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x116>
 80025fc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002600:	d047      	beq.n	8002692 <ADC_ConfigureBoostMode+0x102>
 8002602:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002606:	d84e      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x116>
 8002608:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800260c:	d03d      	beq.n	800268a <ADC_ConfigureBoostMode+0xfa>
 800260e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002612:	d848      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x116>
 8002614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002618:	d033      	beq.n	8002682 <ADC_ConfigureBoostMode+0xf2>
 800261a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800261e:	d842      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x116>
 8002620:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002624:	d029      	beq.n	800267a <ADC_ConfigureBoostMode+0xea>
 8002626:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800262a:	d83c      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x116>
 800262c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002630:	d01a      	beq.n	8002668 <ADC_ConfigureBoostMode+0xd8>
 8002632:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002636:	d836      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x116>
 8002638:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800263c:	d014      	beq.n	8002668 <ADC_ConfigureBoostMode+0xd8>
 800263e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002642:	d830      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x116>
 8002644:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002648:	d00e      	beq.n	8002668 <ADC_ConfigureBoostMode+0xd8>
 800264a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800264e:	d82a      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x116>
 8002650:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002654:	d008      	beq.n	8002668 <ADC_ConfigureBoostMode+0xd8>
 8002656:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800265a:	d824      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x116>
 800265c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002660:	d002      	beq.n	8002668 <ADC_ConfigureBoostMode+0xd8>
 8002662:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002666:	d11e      	bne.n	80026a6 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0c9b      	lsrs	r3, r3, #18
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	fbb2 f3f3 	udiv	r3, r2, r3
 8002676:	60fb      	str	r3, [r7, #12]
        break;
 8002678:	e016      	b.n	80026a8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
        break;
 8002680:	e012      	b.n	80026a8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	60fb      	str	r3, [r7, #12]
        break;
 8002688:	e00e      	b.n	80026a8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	60fb      	str	r3, [r7, #12]
        break;
 8002690:	e00a      	b.n	80026a8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	09db      	lsrs	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]
        break;
 8002698:	e006      	b.n	80026a8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	60fb      	str	r3, [r7, #12]
        break;
 80026a0:	e002      	b.n	80026a8 <ADC_ConfigureBoostMode+0x118>
        break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80026a6:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002720 <ADC_ConfigureBoostMode+0x190>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d808      	bhi.n	80026c8 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80026c4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026c6:	e025      	b.n	8002714 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a16      	ldr	r2, [pc, #88]	@ (8002724 <ADC_ConfigureBoostMode+0x194>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d80a      	bhi.n	80026e6 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	e016      	b.n	8002714 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002728 <ADC_ConfigureBoostMode+0x198>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d80a      	bhi.n	8002704 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002700:	609a      	str	r2, [r3, #8]
}
 8002702:	e007      	b.n	8002714 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002712:	609a      	str	r2, [r3, #8]
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40022300 	.word	0x40022300
 8002720:	005f5e10 	.word	0x005f5e10
 8002724:	00bebc20 	.word	0x00bebc20
 8002728:	017d7840 	.word	0x017d7840

0800272c <LL_ADC_IsEnabled>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <LL_ADC_IsEnabled+0x18>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <LL_ADC_IsEnabled+0x1a>
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <LL_ADC_REG_IsConversionOngoing>:
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b04      	cmp	r3, #4
 8002764:	d101      	bne.n	800276a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b09f      	sub	sp, #124	@ 0x7c
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002792:	2302      	movs	r3, #2
 8002794:	e080      	b.n	8002898 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a3d      	ldr	r2, [pc, #244]	@ (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d102      	bne.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027b0:	4b3c      	ldr	r3, [pc, #240]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	e001      	b.n	80027ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e05f      	b.n	8002898 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ffb9 	bl	8002752 <LL_ADC_REG_IsConversionOngoing>
 80027e0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ffb3 	bl	8002752 <LL_ADC_REG_IsConversionOngoing>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d141      	bne.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d13e      	bne.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027f8:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80027fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	431a      	orrs	r2, r3
 8002812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002814:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002816:	4822      	ldr	r0, [pc, #136]	@ (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002818:	f7ff ff88 	bl	800272c <LL_ADC_IsEnabled>
 800281c:	4604      	mov	r4, r0
 800281e:	4821      	ldr	r0, [pc, #132]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002820:	f7ff ff84 	bl	800272c <LL_ADC_IsEnabled>
 8002824:	4603      	mov	r3, r0
 8002826:	4323      	orrs	r3, r4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d12e      	bne.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800282c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	4b1e      	ldr	r3, [pc, #120]	@ (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002832:	4013      	ands	r3, r2
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	6811      	ldr	r1, [r2, #0]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	6892      	ldr	r2, [r2, #8]
 800283c:	430a      	orrs	r2, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002842:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002844:	e021      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800284e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002850:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002852:	4813      	ldr	r0, [pc, #76]	@ (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002854:	f7ff ff6a 	bl	800272c <LL_ADC_IsEnabled>
 8002858:	4604      	mov	r4, r0
 800285a:	4812      	ldr	r0, [pc, #72]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800285c:	f7ff ff66 	bl	800272c <LL_ADC_IsEnabled>
 8002860:	4603      	mov	r3, r0
 8002862:	4323      	orrs	r3, r4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d110      	bne.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800286e:	4013      	ands	r3, r2
 8002870:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002872:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002874:	e009      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287a:	f043 0220 	orr.w	r2, r3, #32
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002888:	e000      	b.n	800288c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800288a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002894:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002898:	4618      	mov	r0, r3
 800289a:	377c      	adds	r7, #124	@ 0x7c
 800289c:	46bd      	mov	sp, r7
 800289e:	bd90      	pop	{r4, r7, pc}
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40022100 	.word	0x40022100
 80028a8:	40022300 	.word	0x40022300
 80028ac:	fffff0e0 	.word	0xfffff0e0

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x40>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x40>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00
 80028f4:	05fa0000 	.word	0x05fa0000

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	@ (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	@ (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	@ (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	@ 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	@ 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ff4c 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a2e:	f7ff ff63 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	6978      	ldr	r0, [r7, #20]
 8002a3a:	f7ff ffb3 	bl	80029a4 <NVIC_EncodePriority>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ff82 	bl	8002950 <__NVIC_SetPriority>
}
 8002a4c:	bf00      	nop
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff56 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	@ 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a7e:	4b89      	ldr	r3, [pc, #548]	@ (8002ca4 <HAL_GPIO_Init+0x234>)
 8002a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a82:	e194      	b.n	8002dae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8186 	beq.w	8002da8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d005      	beq.n	8002ab4 <HAL_GPIO_Init+0x44>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d130      	bne.n	8002b16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aea:	2201      	movs	r2, #1
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 0201 	and.w	r2, r3, #1
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d017      	beq.n	8002b52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d123      	bne.n	8002ba6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	08da      	lsrs	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3208      	adds	r2, #8
 8002b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	220f      	movs	r2, #15
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	08da      	lsrs	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3208      	adds	r2, #8
 8002ba0:	69b9      	ldr	r1, [r7, #24]
 8002ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0203 	and.w	r2, r3, #3
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80e0 	beq.w	8002da8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <HAL_GPIO_Init+0x238>)
 8002bea:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002bee:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca8 <HAL_GPIO_Init+0x238>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_GPIO_Init+0x238>)
 8002bfa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c06:	4a29      	ldr	r2, [pc, #164]	@ (8002cac <HAL_GPIO_Init+0x23c>)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a20      	ldr	r2, [pc, #128]	@ (8002cb0 <HAL_GPIO_Init+0x240>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d052      	beq.n	8002cd8 <HAL_GPIO_Init+0x268>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb4 <HAL_GPIO_Init+0x244>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d031      	beq.n	8002c9e <HAL_GPIO_Init+0x22e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb8 <HAL_GPIO_Init+0x248>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02b      	beq.n	8002c9a <HAL_GPIO_Init+0x22a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <HAL_GPIO_Init+0x24c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d025      	beq.n	8002c96 <HAL_GPIO_Init+0x226>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc0 <HAL_GPIO_Init+0x250>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_GPIO_Init+0x222>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc4 <HAL_GPIO_Init+0x254>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x21e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc8 <HAL_GPIO_Init+0x258>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x21a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a19      	ldr	r2, [pc, #100]	@ (8002ccc <HAL_GPIO_Init+0x25c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x216>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	@ (8002cd0 <HAL_GPIO_Init+0x260>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x212>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a17      	ldr	r2, [pc, #92]	@ (8002cd4 <HAL_GPIO_Init+0x264>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x20e>
 8002c7a:	2309      	movs	r3, #9
 8002c7c:	e02d      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c7e:	230a      	movs	r3, #10
 8002c80:	e02b      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c82:	2308      	movs	r3, #8
 8002c84:	e029      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c86:	2307      	movs	r3, #7
 8002c88:	e027      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	e025      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c8e:	2305      	movs	r3, #5
 8002c90:	e023      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c92:	2304      	movs	r3, #4
 8002c94:	e021      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c96:	2303      	movs	r3, #3
 8002c98:	e01f      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e01d      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01b      	b.n	8002cda <HAL_GPIO_Init+0x26a>
 8002ca2:	bf00      	nop
 8002ca4:	58000080 	.word	0x58000080
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	58000400 	.word	0x58000400
 8002cb0:	58020000 	.word	0x58020000
 8002cb4:	58020400 	.word	0x58020400
 8002cb8:	58020800 	.word	0x58020800
 8002cbc:	58020c00 	.word	0x58020c00
 8002cc0:	58021000 	.word	0x58021000
 8002cc4:	58021400 	.word	0x58021400
 8002cc8:	58021800 	.word	0x58021800
 8002ccc:	58021c00 	.word	0x58021c00
 8002cd0:	58022000 	.word	0x58022000
 8002cd4:	58022400 	.word	0x58022400
 8002cd8:	2300      	movs	r3, #0
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f002 0203 	and.w	r2, r2, #3
 8002ce0:	0092      	lsls	r2, r2, #2
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cea:	4938      	ldr	r1, [pc, #224]	@ (8002dcc <HAL_GPIO_Init+0x35c>)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3301      	adds	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f ae63 	bne.w	8002a84 <HAL_GPIO_Init+0x14>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	3724      	adds	r7, #36	@ 0x24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	58000400 	.word	0x58000400

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002dec:	e003      	b.n	8002df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d00a      	beq.n	8002e2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e18:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e040      	b.n	8002eac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e03e      	b.n	8002eac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e2e:	4b21      	ldr	r3, [pc, #132]	@ (8002eb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002e36:	491f      	ldr	r1, [pc, #124]	@ (8002eb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e3e:	f7fe fb59 	bl	80014f4 <HAL_GetTick>
 8002e42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e44:	e009      	b.n	8002e5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e46:	f7fe fb55 	bl	80014f4 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e54:	d901      	bls.n	8002e5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e028      	b.n	8002eac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e5a:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e66:	d1ee      	bne.n	8002e46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b1e      	cmp	r3, #30
 8002e6c:	d008      	beq.n	8002e80 <HAL_PWREx_ConfigSupply+0x7c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e72:	d005      	beq.n	8002e80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b1d      	cmp	r3, #29
 8002e78:	d002      	beq.n	8002e80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b2d      	cmp	r3, #45	@ 0x2d
 8002e7e:	d114      	bne.n	8002eaa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e80:	f7fe fb38 	bl	80014f4 <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e86:	e009      	b.n	8002e9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e88:	f7fe fb34 	bl	80014f4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e96:	d901      	bls.n	8002e9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e007      	b.n	8002eac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea8:	d1ee      	bne.n	8002e88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	58024800 	.word	0x58024800

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	@ 0x30
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f000 bc1f 	b.w	800370a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80b3 	beq.w	8003040 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eda:	4b95      	ldr	r3, [pc, #596]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ee4:	4b92      	ldr	r3, [pc, #584]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d007      	beq.n	8002f00 <HAL_RCC_OscConfig+0x48>
 8002ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef2:	2b18      	cmp	r3, #24
 8002ef4:	d112      	bne.n	8002f1c <HAL_RCC_OscConfig+0x64>
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d10d      	bne.n	8002f1c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	4b8b      	ldr	r3, [pc, #556]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8098 	beq.w	800303e <HAL_RCC_OscConfig+0x186>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 8093 	bne.w	800303e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e3f6      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f24:	d106      	bne.n	8002f34 <HAL_RCC_OscConfig+0x7c>
 8002f26:	4b82      	ldr	r3, [pc, #520]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a81      	ldr	r2, [pc, #516]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e058      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d112      	bne.n	8002f62 <HAL_RCC_OscConfig+0xaa>
 8002f3c:	4b7c      	ldr	r3, [pc, #496]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a7b      	ldr	r2, [pc, #492]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b79      	ldr	r3, [pc, #484]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a78      	ldr	r2, [pc, #480]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f4e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b76      	ldr	r3, [pc, #472]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a75      	ldr	r2, [pc, #468]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	e041      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f6a:	d112      	bne.n	8002f92 <HAL_RCC_OscConfig+0xda>
 8002f6c:	4b70      	ldr	r3, [pc, #448]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6f      	ldr	r2, [pc, #444]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b6d      	ldr	r3, [pc, #436]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a6c      	ldr	r2, [pc, #432]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f7e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a69      	ldr	r2, [pc, #420]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	e029      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002f9a:	d112      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
 8002f9c:	4b64      	ldr	r3, [pc, #400]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a63      	ldr	r2, [pc, #396]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b61      	ldr	r3, [pc, #388]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a60      	ldr	r2, [pc, #384]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	e011      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12e>
 8002fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b58      	ldr	r3, [pc, #352]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a57      	ldr	r2, [pc, #348]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b55      	ldr	r3, [pc, #340]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a54      	ldr	r2, [pc, #336]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8002fe0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d013      	beq.n	8003016 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fe fa81 	bl	80014f4 <HAL_GetTick>
 8002ff2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff6:	f7fe fa7d 	bl	80014f4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	@ 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e380      	b.n	800370a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003008:	4b49      	ldr	r3, [pc, #292]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x13e>
 8003014:	e014      	b.n	8003040 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fe fa6d 	bl	80014f4 <HAL_GetTick>
 800301a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301e:	f7fe fa69 	bl	80014f4 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b64      	cmp	r3, #100	@ 0x64
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e36c      	b.n	800370a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003030:	4b3f      	ldr	r3, [pc, #252]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x166>
 800303c:	e000      	b.n	8003040 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 808c 	beq.w	8003166 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003056:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003058:	4b35      	ldr	r3, [pc, #212]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_RCC_OscConfig+0x1bc>
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	2b18      	cmp	r3, #24
 8003068:	d137      	bne.n	80030da <HAL_RCC_OscConfig+0x222>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d132      	bne.n	80030da <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003074:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_OscConfig+0x1d4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e33e      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800308c:	4b28      	ldr	r3, [pc, #160]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 0219 	bic.w	r2, r3, #25
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4925      	ldr	r1, [pc, #148]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fa29 	bl	80014f4 <HAL_GetTick>
 80030a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fa25 	bl	80014f4 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e328      	b.n	800370a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	4917      	ldr	r1, [pc, #92]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d8:	e045      	b.n	8003166 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d028      	beq.n	8003134 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030e2:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0219 	bic.w	r2, r3, #25
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4910      	ldr	r1, [pc, #64]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe f9fe 	bl	80014f4 <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fe f9fa 	bl	80014f4 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e2fd      	b.n	800370a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310e:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	061b      	lsls	r3, r3, #24
 8003128:	4901      	ldr	r1, [pc, #4]	@ (8003130 <HAL_RCC_OscConfig+0x278>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
 800312e:	e01a      	b.n	8003166 <HAL_RCC_OscConfig+0x2ae>
 8003130:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003134:	4b97      	ldr	r3, [pc, #604]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a96      	ldr	r2, [pc, #600]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe f9d8 	bl	80014f4 <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe f9d4 	bl	80014f4 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e2d7      	b.n	800370a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800315a:	4b8e      	ldr	r3, [pc, #568]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	d06a      	beq.n	8003248 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003172:	4b88      	ldr	r3, [pc, #544]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800317a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800317c:	4b85      	ldr	r3, [pc, #532]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d007      	beq.n	8003198 <HAL_RCC_OscConfig+0x2e0>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b18      	cmp	r3, #24
 800318c:	d11b      	bne.n	80031c6 <HAL_RCC_OscConfig+0x30e>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d116      	bne.n	80031c6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003198:	4b7e      	ldr	r3, [pc, #504]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_OscConfig+0x2f8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	2b80      	cmp	r3, #128	@ 0x80
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e2ac      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031b0:	4b78      	ldr	r3, [pc, #480]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	4975      	ldr	r1, [pc, #468]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031c4:	e040      	b.n	8003248 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d023      	beq.n	8003216 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031ce:	4b71      	ldr	r3, [pc, #452]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a70      	ldr	r2, [pc, #448]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80031d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7fe f98b 	bl	80014f4 <HAL_GetTick>
 80031de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031e2:	f7fe f987 	bl	80014f4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e28a      	b.n	800370a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031f4:	4b67      	ldr	r3, [pc, #412]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003200:	4b64      	ldr	r3, [pc, #400]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	4961      	ldr	r1, [pc, #388]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003210:	4313      	orrs	r3, r2
 8003212:	60cb      	str	r3, [r1, #12]
 8003214:	e018      	b.n	8003248 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003216:	4b5f      	ldr	r3, [pc, #380]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a5e      	ldr	r2, [pc, #376]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800321c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fe f967 	bl	80014f4 <HAL_GetTick>
 8003226:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800322a:	f7fe f963 	bl	80014f4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e266      	b.n	800370a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800323c:	4b55      	ldr	r3, [pc, #340]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d036      	beq.n	80032c2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d019      	beq.n	8003290 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325c:	4b4d      	ldr	r3, [pc, #308]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800325e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003260:	4a4c      	ldr	r2, [pc, #304]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe f944 	bl	80014f4 <HAL_GetTick>
 800326c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003270:	f7fe f940 	bl	80014f4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e243      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003282:	4b44      	ldr	r3, [pc, #272]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x3b8>
 800328e:	e018      	b.n	80032c2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003290:	4b40      	ldr	r3, [pc, #256]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003294:	4a3f      	ldr	r2, [pc, #252]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fe f92a 	bl	80014f4 <HAL_GetTick>
 80032a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fe f926 	bl	80014f4 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e229      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032b6:	4b37      	ldr	r3, [pc, #220]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d036      	beq.n	800333c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d019      	beq.n	800330a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2e      	ldr	r2, [pc, #184]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80032dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032e2:	f7fe f907 	bl	80014f4 <HAL_GetTick>
 80032e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ea:	f7fe f903 	bl	80014f4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e206      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032fc:	4b25      	ldr	r3, [pc, #148]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x432>
 8003308:	e018      	b.n	800333c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800330a:	4b22      	ldr	r3, [pc, #136]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a21      	ldr	r2, [pc, #132]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003310:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003314:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003316:	f7fe f8ed 	bl	80014f4 <HAL_GetTick>
 800331a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800331e:	f7fe f8e9 	bl	80014f4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1ec      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003330:	4b18      	ldr	r3, [pc, #96]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80af 	beq.w	80034a8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800334a:	4b13      	ldr	r3, [pc, #76]	@ (8003398 <HAL_RCC_OscConfig+0x4e0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <HAL_RCC_OscConfig+0x4e0>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003354:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003356:	f7fe f8cd 	bl	80014f4 <HAL_GetTick>
 800335a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7fe f8c9 	bl	80014f4 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b64      	cmp	r3, #100	@ 0x64
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1cc      	b.n	800370a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <HAL_RCC_OscConfig+0x4e0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x4e4>
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003388:	4a02      	ldr	r2, [pc, #8]	@ (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003390:	e05b      	b.n	800344a <HAL_RCC_OscConfig+0x592>
 8003392:	bf00      	nop
 8003394:	58024400 	.word	0x58024400
 8003398:	58024800 	.word	0x58024800
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d112      	bne.n	80033ca <HAL_RCC_OscConfig+0x512>
 80033a4:	4b9d      	ldr	r3, [pc, #628]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a8:	4a9c      	ldr	r2, [pc, #624]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b0:	4b9a      	ldr	r3, [pc, #616]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	4a99      	ldr	r2, [pc, #612]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80033bc:	4b97      	ldr	r3, [pc, #604]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c0:	4a96      	ldr	r2, [pc, #600]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c8:	e03f      	b.n	800344a <HAL_RCC_OscConfig+0x592>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d112      	bne.n	80033f8 <HAL_RCC_OscConfig+0x540>
 80033d2:	4b92      	ldr	r3, [pc, #584]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	4a91      	ldr	r2, [pc, #580]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033de:	4b8f      	ldr	r3, [pc, #572]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	4a8e      	ldr	r2, [pc, #568]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ea:	4b8c      	ldr	r3, [pc, #560]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ee:	4a8b      	ldr	r2, [pc, #556]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f6:	e028      	b.n	800344a <HAL_RCC_OscConfig+0x592>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b85      	cmp	r3, #133	@ 0x85
 80033fe:	d112      	bne.n	8003426 <HAL_RCC_OscConfig+0x56e>
 8003400:	4b86      	ldr	r3, [pc, #536]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003404:	4a85      	ldr	r2, [pc, #532]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6713      	str	r3, [r2, #112]	@ 0x70
 800340c:	4b83      	ldr	r3, [pc, #524]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003410:	4a82      	ldr	r2, [pc, #520]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003416:	6713      	str	r3, [r2, #112]	@ 0x70
 8003418:	4b80      	ldr	r3, [pc, #512]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341c:	4a7f      	ldr	r2, [pc, #508]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	@ 0x70
 8003424:	e011      	b.n	800344a <HAL_RCC_OscConfig+0x592>
 8003426:	4b7d      	ldr	r3, [pc, #500]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	4a7c      	ldr	r2, [pc, #496]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6713      	str	r3, [r2, #112]	@ 0x70
 8003432:	4b7a      	ldr	r3, [pc, #488]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003436:	4a79      	ldr	r2, [pc, #484]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	@ 0x70
 800343e:	4b77      	ldr	r3, [pc, #476]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003442:	4a76      	ldr	r2, [pc, #472]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003448:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003452:	f7fe f84f 	bl	80014f4 <HAL_GetTick>
 8003456:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fe f84b 	bl	80014f4 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e14c      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003470:	4b6a      	ldr	r3, [pc, #424]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ee      	beq.n	800345a <HAL_RCC_OscConfig+0x5a2>
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fe f839 	bl	80014f4 <HAL_GetTick>
 8003482:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe f835 	bl	80014f4 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e136      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800349c:	4b5f      	ldr	r3, [pc, #380]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ee      	bne.n	8003486 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 812b 	beq.w	8003708 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034b2:	4b5a      	ldr	r3, [pc, #360]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034ba:	2b18      	cmp	r3, #24
 80034bc:	f000 80bb 	beq.w	8003636 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	f040 8095 	bne.w	80035f4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	4b54      	ldr	r3, [pc, #336]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a53      	ldr	r2, [pc, #332]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80034d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fe f80d 	bl	80014f4 <HAL_GetTick>
 80034da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7fe f809 	bl	80014f4 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e10c      	b.n	800370a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034f0:	4b4a      	ldr	r3, [pc, #296]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034fc:	4b47      	ldr	r3, [pc, #284]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80034fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003500:	4b47      	ldr	r3, [pc, #284]	@ (8003620 <HAL_RCC_OscConfig+0x768>)
 8003502:	4013      	ands	r3, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	430a      	orrs	r2, r1
 8003510:	4942      	ldr	r1, [pc, #264]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003512:	4313      	orrs	r3, r2
 8003514:	628b      	str	r3, [r1, #40]	@ 0x28
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	3b01      	subs	r3, #1
 800351c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003524:	3b01      	subs	r3, #1
 8003526:	025b      	lsls	r3, r3, #9
 8003528:	b29b      	uxth	r3, r3
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	3b01      	subs	r3, #1
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	3b01      	subs	r3, #1
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003546:	4935      	ldr	r1, [pc, #212]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003548:	4313      	orrs	r3, r2
 800354a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800354c:	4b33      	ldr	r3, [pc, #204]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	4a32      	ldr	r2, [pc, #200]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003558:	4b30      	ldr	r3, [pc, #192]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800355a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800355c:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <HAL_RCC_OscConfig+0x76c>)
 800355e:	4013      	ands	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003564:	00d2      	lsls	r2, r2, #3
 8003566:	492d      	ldr	r1, [pc, #180]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003568:	4313      	orrs	r3, r2
 800356a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800356c:	4b2b      	ldr	r3, [pc, #172]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	f023 020c 	bic.w	r2, r3, #12
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	4928      	ldr	r1, [pc, #160]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800357a:	4313      	orrs	r3, r2
 800357c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800357e:	4b27      	ldr	r3, [pc, #156]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	f023 0202 	bic.w	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	4924      	ldr	r1, [pc, #144]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800358c:	4313      	orrs	r3, r2
 800358e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003590:	4b22      	ldr	r3, [pc, #136]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	4a21      	ldr	r2, [pc, #132]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 8003596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359c:	4b1f      	ldr	r3, [pc, #124]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	4a1e      	ldr	r2, [pc, #120]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035a8:	4b1c      	ldr	r3, [pc, #112]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	4a1b      	ldr	r2, [pc, #108]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80035b4:	4b19      	ldr	r3, [pc, #100]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	4a18      	ldr	r2, [pc, #96]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c0:	4b16      	ldr	r3, [pc, #88]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a15      	ldr	r2, [pc, #84]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fd ff92 	bl	80014f4 <HAL_GetTick>
 80035d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fd ff8e 	bl	80014f4 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e091      	b.n	800370a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x71c>
 80035f2:	e089      	b.n	8003708 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b09      	ldr	r3, [pc, #36]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a08      	ldr	r2, [pc, #32]	@ (800361c <HAL_RCC_OscConfig+0x764>)
 80035fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd ff78 	bl	80014f4 <HAL_GetTick>
 8003604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003606:	e00f      	b.n	8003628 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd ff74 	bl	80014f4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d908      	bls.n	8003628 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e077      	b.n	800370a <HAL_RCC_OscConfig+0x852>
 800361a:	bf00      	nop
 800361c:	58024400 	.word	0x58024400
 8003620:	fffffc0c 	.word	0xfffffc0c
 8003624:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003628:	4b3a      	ldr	r3, [pc, #232]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e9      	bne.n	8003608 <HAL_RCC_OscConfig+0x750>
 8003634:	e068      	b.n	8003708 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003636:	4b37      	ldr	r3, [pc, #220]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800363c:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	2b01      	cmp	r3, #1
 8003648:	d031      	beq.n	80036ae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d12a      	bne.n	80036ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d122      	bne.n	80036ae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d11a      	bne.n	80036ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	0a5b      	lsrs	r3, r3, #9
 800367c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003684:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d111      	bne.n	80036ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003696:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d108      	bne.n	80036ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	0e1b      	lsrs	r3, r3, #24
 80036a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d001      	beq.n	80036b2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e02b      	b.n	800370a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 80036b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b6:	08db      	lsrs	r3, r3, #3
 80036b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036bc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d01f      	beq.n	8003708 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80036c8:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	4a11      	ldr	r2, [pc, #68]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036d4:	f7fd ff0e 	bl	80014f4 <HAL_GetTick>
 80036d8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80036da:	bf00      	nop
 80036dc:	f7fd ff0a 	bl	80014f4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d0f9      	beq.n	80036dc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 80036ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <HAL_RCC_OscConfig+0x860>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036f4:	00d2      	lsls	r2, r2, #3
 80036f6:	4907      	ldr	r1, [pc, #28]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	4a04      	ldr	r2, [pc, #16]	@ (8003714 <HAL_RCC_OscConfig+0x85c>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3730      	adds	r7, #48	@ 0x30
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	58024400 	.word	0x58024400
 8003718:	ffff0007 	.word	0xffff0007

0800371c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e19c      	b.n	8003a6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b8a      	ldr	r3, [pc, #552]	@ (800395c <HAL_RCC_ClockConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d910      	bls.n	8003760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b87      	ldr	r3, [pc, #540]	@ (800395c <HAL_RCC_ClockConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 020f 	bic.w	r2, r3, #15
 8003746:	4985      	ldr	r1, [pc, #532]	@ (800395c <HAL_RCC_ClockConfig+0x240>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b83      	ldr	r3, [pc, #524]	@ (800395c <HAL_RCC_ClockConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e184      	b.n	8003a6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d010      	beq.n	800378e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	4b7b      	ldr	r3, [pc, #492]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003778:	429a      	cmp	r2, r3
 800377a:	d908      	bls.n	800378e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800377c:	4b78      	ldr	r3, [pc, #480]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	4975      	ldr	r1, [pc, #468]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 800378a:	4313      	orrs	r3, r2
 800378c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d010      	beq.n	80037bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	4b70      	ldr	r3, [pc, #448]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d908      	bls.n	80037bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	496a      	ldr	r1, [pc, #424]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d010      	beq.n	80037ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	4b64      	ldr	r3, [pc, #400]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d908      	bls.n	80037ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037d8:	4b61      	ldr	r3, [pc, #388]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	495e      	ldr	r1, [pc, #376]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	4b59      	ldr	r3, [pc, #356]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003802:	429a      	cmp	r2, r3
 8003804:	d908      	bls.n	8003818 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003806:	4b56      	ldr	r3, [pc, #344]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4953      	ldr	r1, [pc, #332]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003814:	4313      	orrs	r3, r2
 8003816:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	4b4d      	ldr	r3, [pc, #308]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	429a      	cmp	r2, r3
 8003832:	d908      	bls.n	8003846 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b4a      	ldr	r3, [pc, #296]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f023 020f 	bic.w	r2, r3, #15
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4947      	ldr	r1, [pc, #284]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003842:	4313      	orrs	r3, r2
 8003844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d055      	beq.n	80038fe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003852:	4b43      	ldr	r3, [pc, #268]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4940      	ldr	r1, [pc, #256]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003860:	4313      	orrs	r3, r2
 8003862:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d107      	bne.n	800387c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800386c:	4b3c      	ldr	r3, [pc, #240]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d121      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0f6      	b.n	8003a6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d107      	bne.n	8003894 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003884:	4b36      	ldr	r3, [pc, #216]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d115      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0ea      	b.n	8003a6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800389c:	4b30      	ldr	r3, [pc, #192]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0de      	b.n	8003a6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0d6      	b.n	8003a6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038bc:	4b28      	ldr	r3, [pc, #160]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f023 0207 	bic.w	r2, r3, #7
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4925      	ldr	r1, [pc, #148]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ce:	f7fd fe11 	bl	80014f4 <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d6:	f7fd fe0d 	bl	80014f4 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e0be      	b.n	8003a6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d1eb      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	429a      	cmp	r2, r3
 8003918:	d208      	bcs.n	800392c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391a:	4b11      	ldr	r3, [pc, #68]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f023 020f 	bic.w	r2, r3, #15
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	490e      	ldr	r1, [pc, #56]	@ (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003928:	4313      	orrs	r3, r2
 800392a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <HAL_RCC_ClockConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d214      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b08      	ldr	r3, [pc, #32]	@ (800395c <HAL_RCC_ClockConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 020f 	bic.w	r2, r3, #15
 8003942:	4906      	ldr	r1, [pc, #24]	@ (800395c <HAL_RCC_ClockConfig+0x240>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b04      	ldr	r3, [pc, #16]	@ (800395c <HAL_RCC_ClockConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e086      	b.n	8003a6a <HAL_RCC_ClockConfig+0x34e>
 800395c:	52002000 	.word	0x52002000
 8003960:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d010      	beq.n	8003992 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	4b3f      	ldr	r3, [pc, #252]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800397c:	429a      	cmp	r2, r3
 800397e:	d208      	bcs.n	8003992 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003980:	4b3c      	ldr	r3, [pc, #240]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	4939      	ldr	r1, [pc, #228]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 800398e:	4313      	orrs	r3, r2
 8003990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d010      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	4b34      	ldr	r3, [pc, #208]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d208      	bcs.n	80039c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039ae:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	492e      	ldr	r1, [pc, #184]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d010      	beq.n	80039ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	4b28      	ldr	r3, [pc, #160]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039d8:	429a      	cmp	r2, r3
 80039da:	d208      	bcs.n	80039ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039dc:	4b25      	ldr	r3, [pc, #148]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	4922      	ldr	r1, [pc, #136]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d208      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4917      	ldr	r1, [pc, #92]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003a1c:	f000 f834 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	4912      	ldr	r1, [pc, #72]	@ (8003a78 <HAL_RCC_ClockConfig+0x35c>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a74 <HAL_RCC_ClockConfig+0x358>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	4a0d      	ldr	r2, [pc, #52]	@ (8003a78 <HAL_RCC_ClockConfig+0x35c>)
 8003a44:	5cd3      	ldrb	r3, [r2, r3]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	4a0a      	ldr	r2, [pc, #40]	@ (8003a7c <HAL_RCC_ClockConfig+0x360>)
 8003a52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a54:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <HAL_RCC_ClockConfig+0x364>)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <HAL_RCC_ClockConfig+0x368>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fa2e 	bl	8000ec0 <HAL_InitTick>
 8003a64:	4603      	mov	r3, r0
 8003a66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	58024400 	.word	0x58024400
 8003a78:	0800e6e4 	.word	0x0800e6e4
 8003a7c:	24000004 	.word	0x24000004
 8003a80:	24000000 	.word	0x24000000
 8003a84:	24000008 	.word	0x24000008

08003a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	@ 0x24
 8003a8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a8e:	4bb3      	ldr	r3, [pc, #716]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a96:	2b18      	cmp	r3, #24
 8003a98:	f200 8155 	bhi.w	8003d46 <HAL_RCC_GetSysClockFreq+0x2be>
 8003a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003b09 	.word	0x08003b09
 8003aa8:	08003d47 	.word	0x08003d47
 8003aac:	08003d47 	.word	0x08003d47
 8003ab0:	08003d47 	.word	0x08003d47
 8003ab4:	08003d47 	.word	0x08003d47
 8003ab8:	08003d47 	.word	0x08003d47
 8003abc:	08003d47 	.word	0x08003d47
 8003ac0:	08003d47 	.word	0x08003d47
 8003ac4:	08003b2f 	.word	0x08003b2f
 8003ac8:	08003d47 	.word	0x08003d47
 8003acc:	08003d47 	.word	0x08003d47
 8003ad0:	08003d47 	.word	0x08003d47
 8003ad4:	08003d47 	.word	0x08003d47
 8003ad8:	08003d47 	.word	0x08003d47
 8003adc:	08003d47 	.word	0x08003d47
 8003ae0:	08003d47 	.word	0x08003d47
 8003ae4:	08003b35 	.word	0x08003b35
 8003ae8:	08003d47 	.word	0x08003d47
 8003aec:	08003d47 	.word	0x08003d47
 8003af0:	08003d47 	.word	0x08003d47
 8003af4:	08003d47 	.word	0x08003d47
 8003af8:	08003d47 	.word	0x08003d47
 8003afc:	08003d47 	.word	0x08003d47
 8003b00:	08003d47 	.word	0x08003d47
 8003b04:	08003b3b 	.word	0x08003b3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b08:	4b94      	ldr	r3, [pc, #592]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b14:	4b91      	ldr	r3, [pc, #580]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	08db      	lsrs	r3, r3, #3
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	4a90      	ldr	r2, [pc, #576]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
 8003b24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003b26:	e111      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b28:	4b8d      	ldr	r3, [pc, #564]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b2a:	61bb      	str	r3, [r7, #24]
      break;
 8003b2c:	e10e      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b30:	61bb      	str	r3, [r7, #24]
      break;
 8003b32:	e10b      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003b34:	4b8c      	ldr	r3, [pc, #560]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b36:	61bb      	str	r3, [r7, #24]
      break;
 8003b38:	e108      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b3a:	4b88      	ldr	r3, [pc, #544]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003b44:	4b85      	ldr	r3, [pc, #532]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b50:	4b82      	ldr	r3, [pc, #520]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b5a:	4b80      	ldr	r3, [pc, #512]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5e:	08db      	lsrs	r3, r3, #3
 8003b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80e1 	beq.w	8003d40 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	f000 8083 	beq.w	8003c8c <HAL_RCC_GetSysClockFreq+0x204>
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	f200 80a1 	bhi.w	8003cd0 <HAL_RCC_GetSysClockFreq+0x248>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x114>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d056      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b9a:	e099      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d02d      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	4a6b      	ldr	r2, [pc, #428]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	ee07 3a90 	vmov	s15, r3
 8003bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b62      	ldr	r3, [pc, #392]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003c02:	e087      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003d70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c16:	4b51      	ldr	r3, [pc, #324]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c46:	e065      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003d74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5a:	4b40      	ldr	r3, [pc, #256]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c8a:	e043      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003d78 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cb2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cce:	e021      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003d74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003d6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003d14:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	0a5b      	lsrs	r3, r3, #9
 8003d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d1e:	3301      	adds	r3, #1
 8003d20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d38:	ee17 3a90 	vmov	r3, s15
 8003d3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003d3e:	e005      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
      break;
 8003d44:	e002      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003d46:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d48:	61bb      	str	r3, [r7, #24]
      break;
 8003d4a:	bf00      	nop
  }

  return sysclockfreq;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3724      	adds	r7, #36	@ 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	03d09000 	.word	0x03d09000
 8003d64:	003d0900 	.word	0x003d0900
 8003d68:	007a1200 	.word	0x007a1200
 8003d6c:	46000000 	.word	0x46000000
 8003d70:	4c742400 	.word	0x4c742400
 8003d74:	4a742400 	.word	0x4a742400
 8003d78:	4af42400 	.word	0x4af42400

08003d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003d82:	f7ff fe81 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003d86:	4602      	mov	r2, r0
 8003d88:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <HAL_RCC_GetHCLKFreq+0x50>)
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	490f      	ldr	r1, [pc, #60]	@ (8003dd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d94:	5ccb      	ldrb	r3, [r1, r3]
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003da0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <HAL_RCC_GetHCLKFreq+0x50>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	4a09      	ldr	r2, [pc, #36]	@ (8003dd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	fa22 f303 	lsr.w	r3, r2, r3
 8003db6:	4a07      	ldr	r2, [pc, #28]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003db8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dba:	4a07      	ldr	r2, [pc, #28]	@ (8003dd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003dc0:	4b04      	ldr	r3, [pc, #16]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	0800e6e4 	.word	0x0800e6e4
 8003dd4:	24000004 	.word	0x24000004
 8003dd8:	24000000 	.word	0x24000000

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003de0:	f7ff ffcc 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4904      	ldr	r1, [pc, #16]	@ (8003e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	58024400 	.word	0x58024400
 8003e04:	0800e6e4 	.word	0x0800e6e4

08003e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003e0c:	f7ff ffb6 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4904      	ldr	r1, [pc, #16]	@ (8003e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	0800e6e4 	.word	0x0800e6e4

08003e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223f      	movs	r2, #63	@ 0x3f
 8003e42:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e44:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f003 0207 	and.w	r2, r3, #7
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8003e50:	4b17      	ldr	r3, [pc, #92]	@ (8003eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003e5c:	4b14      	ldr	r3, [pc, #80]	@ (8003eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f003 020f 	and.w	r2, r3, #15
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003e68:	4b11      	ldr	r3, [pc, #68]	@ (8003eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003e74:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003e8c:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e98:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <HAL_RCC_GetClockConfig+0x80>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 020f 	and.w	r2, r3, #15
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	58024400 	.word	0x58024400
 8003eb4:	52002000 	.word	0x52002000

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ebc:	b0c8      	sub	sp, #288	@ 0x120
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003edc:	2500      	movs	r5, #0
 8003ede:	ea54 0305 	orrs.w	r3, r4, r5
 8003ee2:	d049      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eee:	d02f      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ef0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ef4:	d828      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ef6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003efa:	d01a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003efc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f00:	d822      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f0a:	d007      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f0c:	e01c      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0e:	4ba7      	ldr	r3, [pc, #668]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	4aa6      	ldr	r2, [pc, #664]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f1a:	e01a      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f20:	3308      	adds	r3, #8
 8003f22:	2102      	movs	r1, #2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f002 fa6d 	bl	8006404 <RCCEx_PLL2_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f30:	e00f      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f36:	3328      	adds	r3, #40	@ 0x28
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f002 fb14 	bl	8006568 <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f46:	e004      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f4e:	e000      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f5a:	4b94      	ldr	r3, [pc, #592]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f68:	4a90      	ldr	r2, [pc, #576]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f6e:	e003      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003f84:	f04f 0900 	mov.w	r9, #0
 8003f88:	ea58 0309 	orrs.w	r3, r8, r9
 8003f8c:	d047      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d82a      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003f98:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fb5 	.word	0x08003fb5
 8003fa4:	08003fc3 	.word	0x08003fc3
 8003fa8:	08003fd9 	.word	0x08003fd9
 8003fac:	08003ff7 	.word	0x08003ff7
 8003fb0:	08003ff7 	.word	0x08003ff7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b7d      	ldr	r3, [pc, #500]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	4a7c      	ldr	r2, [pc, #496]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fc0:	e01a      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f002 fa1a 	bl	8006404 <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fd6:	e00f      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fdc:	3328      	adds	r3, #40	@ 0x28
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f002 fac1 	bl	8006568 <RCCEx_PLL3_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fec:	e004      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004000:	4b6a      	ldr	r3, [pc, #424]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004004:	f023 0107 	bic.w	r1, r3, #7
 8004008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	4a67      	ldr	r2, [pc, #412]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004010:	430b      	orrs	r3, r1
 8004012:	6513      	str	r3, [r2, #80]	@ 0x50
 8004014:	e003      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800401a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800401e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800402a:	f04f 0b00 	mov.w	fp, #0
 800402e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004032:	d054      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800403e:	d036      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004040:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004044:	d82f      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800404a:	d032      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800404c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004050:	d829      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004052:	2bc0      	cmp	r3, #192	@ 0xc0
 8004054:	d02f      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004056:	2bc0      	cmp	r3, #192	@ 0xc0
 8004058:	d825      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800405a:	2b80      	cmp	r3, #128	@ 0x80
 800405c:	d018      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800405e:	2b80      	cmp	r3, #128	@ 0x80
 8004060:	d821      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004066:	2b40      	cmp	r3, #64	@ 0x40
 8004068:	d007      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800406a:	e01c      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b4f      	ldr	r3, [pc, #316]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	4a4e      	ldr	r2, [pc, #312]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004078:	e01e      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800407a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407e:	3308      	adds	r3, #8
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f002 f9be 	bl	8006404 <RCCEx_PLL2_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800408e:	e013      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004094:	3328      	adds	r3, #40	@ 0x28
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f002 fa65 	bl	8006568 <RCCEx_PLL3_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80040a4:	e008      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040ac:	e004      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80040b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80040c0:	4b3a      	ldr	r3, [pc, #232]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80040c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ce:	4a37      	ldr	r2, [pc, #220]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80040d4:	e003      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80040de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80040ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80040f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80040f8:	460b      	mov	r3, r1
 80040fa:	4313      	orrs	r3, r2
 80040fc:	d05c      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80040fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004104:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004108:	d03b      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800410a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800410e:	d834      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004114:	d037      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800411a:	d82e      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800411c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004120:	d033      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004122:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004126:	d828      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800412c:	d01a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800412e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004132:	d822      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800413c:	d007      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800413e:	e01c      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004140:	4b1a      	ldr	r3, [pc, #104]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a19      	ldr	r2, [pc, #100]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800414c:	e01e      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004152:	3308      	adds	r3, #8
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f002 f954 	bl	8006404 <RCCEx_PLL2_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004162:	e013      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004168:	3328      	adds	r3, #40	@ 0x28
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f002 f9fb 	bl	8006568 <RCCEx_PLL3_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004178:	e008      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004180:	e004      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004182:	bf00      	nop
 8004184:	e002      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800418a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10d      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004198:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800419c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a2:	4a02      	ldr	r2, [pc, #8]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80041a8:	e006      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80041c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80041ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80041d2:	460b      	mov	r3, r1
 80041d4:	4313      	orrs	r3, r2
 80041d6:	d03a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	2b30      	cmp	r3, #48	@ 0x30
 80041e0:	d01f      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80041e2:	2b30      	cmp	r3, #48	@ 0x30
 80041e4:	d819      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d00c      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d815      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d019      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d111      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f6:	4bae      	ldr	r3, [pc, #696]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	4aad      	ldr	r2, [pc, #692]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004202:	e011      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004208:	3308      	adds	r3, #8
 800420a:	2102      	movs	r1, #2
 800420c:	4618      	mov	r0, r3
 800420e:	f002 f8f9 	bl	8006404 <RCCEx_PLL2_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004220:	e002      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004228:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004230:	4b9f      	ldr	r3, [pc, #636]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004234:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800423c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423e:	4a9c      	ldr	r2, [pc, #624]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004240:	430b      	orrs	r3, r1
 8004242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004244:	e003      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004246:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800424a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800424e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800425a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004264:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004268:	460b      	mov	r3, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	d051      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800426e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004278:	d035      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800427a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800427e:	d82e      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004280:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004284:	d031      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004286:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800428a:	d828      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x426>
 800428c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004290:	d01a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004296:	d822      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a0:	d007      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80042a2:	e01c      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a4:	4b82      	ldr	r3, [pc, #520]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	4a81      	ldr	r2, [pc, #516]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042b0:	e01c      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b6:	3308      	adds	r3, #8
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f002 f8a2 	bl	8006404 <RCCEx_PLL2_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042c6:	e011      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042cc:	3328      	adds	r3, #40	@ 0x28
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f002 f949 	bl	8006568 <RCCEx_PLL3_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042dc:	e006      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042e4:	e002      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80042e6:	bf00      	nop
 80042e8:	e000      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80042ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042f4:	4b6e      	ldr	r3, [pc, #440]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80042fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004302:	4a6b      	ldr	r2, [pc, #428]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004304:	430b      	orrs	r3, r1
 8004306:	6513      	str	r3, [r2, #80]	@ 0x50
 8004308:	e003      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800430e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800431e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004322:	2300      	movs	r3, #0
 8004324:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004328:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800432c:	460b      	mov	r3, r1
 800432e:	4313      	orrs	r3, r2
 8004330:	d053      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004336:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800433c:	d033      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800433e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004342:	d82c      	bhi.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004344:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004348:	d02f      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800434a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800434e:	d826      	bhi.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004350:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004354:	d02b      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004356:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800435a:	d820      	bhi.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800435c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004360:	d012      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004366:	d81a      	bhi.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d022      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004370:	d115      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004376:	3308      	adds	r3, #8
 8004378:	2101      	movs	r1, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f002 f842 	bl	8006404 <RCCEx_PLL2_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004386:	e015      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004388:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800438c:	3328      	adds	r3, #40	@ 0x28
 800438e:	2101      	movs	r1, #1
 8004390:	4618      	mov	r0, r3
 8004392:	f002 f8e9 	bl	8006568 <RCCEx_PLL3_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800439c:	e00a      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043a4:	e006      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043a6:	bf00      	nop
 80043a8:	e004      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043aa:	bf00      	nop
 80043ac:	e002      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80043bc:	4b3c      	ldr	r3, [pc, #240]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80043c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043ca:	4a39      	ldr	r2, [pc, #228]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80043da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80043e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043ea:	2300      	movs	r3, #0
 80043ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043f0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d060      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80043fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004402:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004406:	d039      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004408:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800440c:	d832      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800440e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004412:	d035      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004414:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004418:	d82c      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441e:	d031      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004424:	d826      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004426:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800442a:	d02d      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800442c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004430:	d820      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004436:	d012      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800443c:	d81a      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d024      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004446:	d115      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800444c:	3308      	adds	r3, #8
 800444e:	2101      	movs	r1, #1
 8004450:	4618      	mov	r0, r3
 8004452:	f001 ffd7 	bl	8006404 <RCCEx_PLL2_Config>
 8004456:	4603      	mov	r3, r0
 8004458:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800445c:	e017      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800445e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004462:	3328      	adds	r3, #40	@ 0x28
 8004464:	2101      	movs	r1, #1
 8004466:	4618      	mov	r0, r3
 8004468:	f002 f87e 	bl	8006568 <RCCEx_PLL3_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004472:	e00c      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800447a:	e008      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800447c:	bf00      	nop
 800447e:	e006      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004480:	bf00      	nop
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004484:	bf00      	nop
 8004486:	e002      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004488:	bf00      	nop
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10e      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800449e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044a6:	4a02      	ldr	r2, [pc, #8]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ac:	e006      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80044ae:	bf00      	nop
 80044b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80044c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80044d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d037      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044e6:	d00e      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80044e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ec:	d816      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80044f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044f6:	d111      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f8:	4bc4      	ldr	r3, [pc, #784]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	4ac3      	ldr	r2, [pc, #780]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004504:	e00f      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800450a:	3308      	adds	r3, #8
 800450c:	2101      	movs	r1, #1
 800450e:	4618      	mov	r0, r3
 8004510:	f001 ff78 	bl	8006404 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800451a:	e004      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004522:	e000      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004526:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800452e:	4bb7      	ldr	r3, [pc, #732]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004532:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800453a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800453c:	4ab3      	ldr	r2, [pc, #716]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6513      	str	r3, [r2, #80]	@ 0x50
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004548:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800454c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004562:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004566:	460b      	mov	r3, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	d039      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800456c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004572:	2b03      	cmp	r3, #3
 8004574:	d81c      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004576:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	080045b9 	.word	0x080045b9
 8004580:	0800458d 	.word	0x0800458d
 8004584:	0800459b 	.word	0x0800459b
 8004588:	080045b9 	.word	0x080045b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458c:	4b9f      	ldr	r3, [pc, #636]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	4a9e      	ldr	r2, [pc, #632]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004598:	e00f      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800459a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800459e:	3308      	adds	r3, #8
 80045a0:	2102      	movs	r1, #2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 ff2e 	bl	8006404 <RCCEx_PLL2_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80045b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80045c2:	4b92      	ldr	r3, [pc, #584]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c6:	f023 0103 	bic.w	r1, r3, #3
 80045ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d0:	4a8e      	ldr	r2, [pc, #568]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d2:	430b      	orrs	r3, r1
 80045d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045d6:	e003      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80045ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045f0:	2300      	movs	r3, #0
 80045f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80045fa:	460b      	mov	r3, r1
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f000 8099 	beq.w	8004734 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004602:	4b83      	ldr	r3, [pc, #524]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a82      	ldr	r2, [pc, #520]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800460e:	f7fc ff71 	bl	80014f4 <HAL_GetTick>
 8004612:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004616:	e00b      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004618:	f7fc ff6c 	bl	80014f4 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b64      	cmp	r3, #100	@ 0x64
 8004626:	d903      	bls.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800462e:	e005      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004630:	4b77      	ldr	r3, [pc, #476]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ed      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800463c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004640:	2b00      	cmp	r3, #0
 8004642:	d173      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004644:	4b71      	ldr	r3, [pc, #452]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004646:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800464c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004650:	4053      	eors	r3, r2
 8004652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004656:	2b00      	cmp	r3, #0
 8004658:	d015      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800465a:	4b6c      	ldr	r3, [pc, #432]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004662:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004666:	4b69      	ldr	r3, [pc, #420]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	4a68      	ldr	r2, [pc, #416]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800466c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004670:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004672:	4b66      	ldr	r3, [pc, #408]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004676:	4a65      	ldr	r2, [pc, #404]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800467e:	4a63      	ldr	r2, [pc, #396]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800468a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800468e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004692:	d118      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fc ff2e 	bl	80014f4 <HAL_GetTick>
 8004698:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800469c:	e00d      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fc ff29 	bl	80014f4 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80046a8:	1ad2      	subs	r2, r2, r3
 80046aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d903      	bls.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80046b8:	e005      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046ba:	4b54      	ldr	r3, [pc, #336]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0eb      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80046c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d129      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046de:	d10e      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x846>
 80046e0:	4b4a      	ldr	r3, [pc, #296]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80046e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046f0:	091a      	lsrs	r2, r3, #4
 80046f2:	4b48      	ldr	r3, [pc, #288]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	4a45      	ldr	r2, [pc, #276]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6113      	str	r3, [r2, #16]
 80046fc:	e005      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x852>
 80046fe:	4b43      	ldr	r3, [pc, #268]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	4a42      	ldr	r2, [pc, #264]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004704:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004708:	6113      	str	r3, [r2, #16]
 800470a:	4b40      	ldr	r3, [pc, #256]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800470c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800470e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004712:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471a:	4a3c      	ldr	r2, [pc, #240]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800471c:	430b      	orrs	r3, r1
 800471e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004720:	e008      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004722:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004726:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800472a:	e003      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004730:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f002 0301 	and.w	r3, r2, #1
 8004740:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800474a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800474e:	460b      	mov	r3, r1
 8004750:	4313      	orrs	r3, r2
 8004752:	f000 8090 	beq.w	8004876 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800475e:	2b28      	cmp	r3, #40	@ 0x28
 8004760:	d870      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004762:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	0800484d 	.word	0x0800484d
 800476c:	08004845 	.word	0x08004845
 8004770:	08004845 	.word	0x08004845
 8004774:	08004845 	.word	0x08004845
 8004778:	08004845 	.word	0x08004845
 800477c:	08004845 	.word	0x08004845
 8004780:	08004845 	.word	0x08004845
 8004784:	08004845 	.word	0x08004845
 8004788:	08004819 	.word	0x08004819
 800478c:	08004845 	.word	0x08004845
 8004790:	08004845 	.word	0x08004845
 8004794:	08004845 	.word	0x08004845
 8004798:	08004845 	.word	0x08004845
 800479c:	08004845 	.word	0x08004845
 80047a0:	08004845 	.word	0x08004845
 80047a4:	08004845 	.word	0x08004845
 80047a8:	0800482f 	.word	0x0800482f
 80047ac:	08004845 	.word	0x08004845
 80047b0:	08004845 	.word	0x08004845
 80047b4:	08004845 	.word	0x08004845
 80047b8:	08004845 	.word	0x08004845
 80047bc:	08004845 	.word	0x08004845
 80047c0:	08004845 	.word	0x08004845
 80047c4:	08004845 	.word	0x08004845
 80047c8:	0800484d 	.word	0x0800484d
 80047cc:	08004845 	.word	0x08004845
 80047d0:	08004845 	.word	0x08004845
 80047d4:	08004845 	.word	0x08004845
 80047d8:	08004845 	.word	0x08004845
 80047dc:	08004845 	.word	0x08004845
 80047e0:	08004845 	.word	0x08004845
 80047e4:	08004845 	.word	0x08004845
 80047e8:	0800484d 	.word	0x0800484d
 80047ec:	08004845 	.word	0x08004845
 80047f0:	08004845 	.word	0x08004845
 80047f4:	08004845 	.word	0x08004845
 80047f8:	08004845 	.word	0x08004845
 80047fc:	08004845 	.word	0x08004845
 8004800:	08004845 	.word	0x08004845
 8004804:	08004845 	.word	0x08004845
 8004808:	0800484d 	.word	0x0800484d
 800480c:	58024400 	.word	0x58024400
 8004810:	58024800 	.word	0x58024800
 8004814:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800481c:	3308      	adds	r3, #8
 800481e:	2101      	movs	r1, #1
 8004820:	4618      	mov	r0, r3
 8004822:	f001 fdef 	bl	8006404 <RCCEx_PLL2_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800482c:	e00f      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800482e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004832:	3328      	adds	r3, #40	@ 0x28
 8004834:	2101      	movs	r1, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f001 fe96 	bl	8006568 <RCCEx_PLL3_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004842:	e004      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800484a:	e000      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800484c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800484e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10b      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004856:	4bc0      	ldr	r3, [pc, #768]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004866:	4abc      	ldr	r2, [pc, #752]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004868:	430b      	orrs	r3, r1
 800486a:	6553      	str	r3, [r2, #84]	@ 0x54
 800486c:	e003      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004872:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f002 0302 	and.w	r3, r2, #2
 8004882:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004886:	2300      	movs	r3, #0
 8004888:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800488c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d043      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800489a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d824      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80048a2:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048f5 	.word	0x080048f5
 80048ac:	080048c1 	.word	0x080048c1
 80048b0:	080048d7 	.word	0x080048d7
 80048b4:	080048f5 	.word	0x080048f5
 80048b8:	080048f5 	.word	0x080048f5
 80048bc:	080048f5 	.word	0x080048f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c4:	3308      	adds	r3, #8
 80048c6:	2101      	movs	r1, #1
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 fd9b 	bl	8006404 <RCCEx_PLL2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80048d4:	e00f      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048da:	3328      	adds	r3, #40	@ 0x28
 80048dc:	2101      	movs	r1, #1
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 fe42 	bl	8006568 <RCCEx_PLL3_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80048ea:	e004      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048f2:	e000      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80048f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10b      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048fe:	4b96      	ldr	r3, [pc, #600]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004902:	f023 0107 	bic.w	r1, r3, #7
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800490a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800490e:	4a92      	ldr	r2, [pc, #584]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004910:	430b      	orrs	r3, r1
 8004912:	6553      	str	r3, [r2, #84]	@ 0x54
 8004914:	e003      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004916:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800491a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800491e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f002 0304 	and.w	r3, r2, #4
 800492a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800492e:	2300      	movs	r3, #0
 8004930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004934:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004938:	460b      	mov	r3, r1
 800493a:	4313      	orrs	r3, r2
 800493c:	d043      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800493e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004946:	2b05      	cmp	r3, #5
 8004948:	d824      	bhi.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800494a:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	0800499d 	.word	0x0800499d
 8004954:	08004969 	.word	0x08004969
 8004958:	0800497f 	.word	0x0800497f
 800495c:	0800499d 	.word	0x0800499d
 8004960:	0800499d 	.word	0x0800499d
 8004964:	0800499d 	.word	0x0800499d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800496c:	3308      	adds	r3, #8
 800496e:	2101      	movs	r1, #1
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fd47 	bl	8006404 <RCCEx_PLL2_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800497c:	e00f      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800497e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004982:	3328      	adds	r3, #40	@ 0x28
 8004984:	2101      	movs	r1, #1
 8004986:	4618      	mov	r0, r3
 8004988:	f001 fdee 	bl	8006568 <RCCEx_PLL3_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004992:	e004      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800499a:	e000      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800499c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049aa:	f023 0107 	bic.w	r1, r3, #7
 80049ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049b6:	4a68      	ldr	r2, [pc, #416]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80049bc:	e003      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	f002 0320 	and.w	r3, r2, #32
 80049d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049d6:	2300      	movs	r3, #0
 80049d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d055      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80049e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049f2:	d033      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80049f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049f8:	d82c      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fe:	d02f      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a04:	d826      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a0a:	d02b      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004a0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a10:	d820      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a16:	d012      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a1c:	d81a      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d022      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a26:	d115      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 fce7 	bl	8006404 <RCCEx_PLL2_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a3c:	e015      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a42:	3328      	adds	r3, #40	@ 0x28
 8004a44:	2102      	movs	r1, #2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 fd8e 	bl	8006568 <RCCEx_PLL3_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a52:	e00a      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a5a:	e006      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a5c:	bf00      	nop
 8004a5e:	e004      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a60:	bf00      	nop
 8004a62:	e002      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a72:	4b39      	ldr	r3, [pc, #228]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a82:	4a35      	ldr	r2, [pc, #212]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a88:	e003      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a8e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004aa8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	d058      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004aba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004abe:	d033      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004ac0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004ac4:	d82c      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aca:	d02f      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad0:	d826      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004ad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ad6:	d02b      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004ad8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004adc:	d820      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae2:	d012      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae8:	d81a      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d022      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af2:	d115      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004af8:	3308      	adds	r3, #8
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 fc81 	bl	8006404 <RCCEx_PLL2_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b08:	e015      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b0e:	3328      	adds	r3, #40	@ 0x28
 8004b10:	2102      	movs	r1, #2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 fd28 	bl	8006568 <RCCEx_PLL3_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b26:	e006      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b28:	bf00      	nop
 8004b2a:	e004      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10e      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b3e:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b4e:	4a02      	ldr	r2, [pc, #8]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b54:	e006      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004b56:	bf00      	nop
 8004b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d055      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004b90:	d033      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004b92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004b96:	d82c      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b9c:	d02f      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004b9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba2:	d826      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ba4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ba8:	d02b      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004baa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004bae:	d820      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004bb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bb4:	d012      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bba:	d81a      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d022      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc4:	d115      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bca:	3308      	adds	r3, #8
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 fc18 	bl	8006404 <RCCEx_PLL2_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004bda:	e015      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004be0:	3328      	adds	r3, #40	@ 0x28
 8004be2:	2102      	movs	r1, #2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 fcbf 	bl	8006568 <RCCEx_PLL3_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004bf0:	e00a      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c10:	4ba1      	ldr	r3, [pc, #644]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c20:	4a9d      	ldr	r2, [pc, #628]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c26:	e003      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f002 0308 	and.w	r3, r2, #8
 8004c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d01e      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c62:	3328      	adds	r3, #40	@ 0x28
 8004c64:	2102      	movs	r1, #2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 fc7e 	bl	8006568 <RCCEx_PLL3_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c78:	4b87      	ldr	r3, [pc, #540]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c88:	4a83      	ldr	r2, [pc, #524]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f002 0310 	and.w	r3, r2, #16
 8004c9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ca4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4313      	orrs	r3, r2
 8004cac:	d01e      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cc0:	3328      	adds	r3, #40	@ 0x28
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 fc4f 	bl	8006568 <RCCEx_PLL3_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cd6:	4b70      	ldr	r3, [pc, #448]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ce6:	4a6c      	ldr	r2, [pc, #432]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004cf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004d06:	460b      	mov	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	d03e      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d18:	d022      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004d1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d1e:	d81b      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d28:	d00b      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004d2a:	e015      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d30:	3308      	adds	r3, #8
 8004d32:	2100      	movs	r1, #0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 fb65 	bl	8006404 <RCCEx_PLL2_Config>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d40:	e00f      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d46:	3328      	adds	r3, #40	@ 0x28
 8004d48:	2102      	movs	r1, #2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 fc0c 	bl	8006568 <RCCEx_PLL3_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d56:	e004      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d5e:	e000      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d7a:	4a47      	ldr	r2, [pc, #284]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d80:	e003      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004d96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d98:	2300      	movs	r3, #0
 8004d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004da0:	460b      	mov	r3, r1
 8004da2:	4313      	orrs	r3, r2
 8004da4:	d03b      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004db2:	d01f      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004db4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004db8:	d818      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dbe:	d003      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004dc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dc4:	d007      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004dc6:	e011      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc8:	4b33      	ldr	r3, [pc, #204]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	4a32      	ldr	r2, [pc, #200]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004dd4:	e00f      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dda:	3328      	adds	r3, #40	@ 0x28
 8004ddc:	2101      	movs	r1, #1
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 fbc2 	bl	8006568 <RCCEx_PLL3_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004dea:	e004      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004df2:	e000      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10b      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dfe:	4b26      	ldr	r3, [pc, #152]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0e:	4a22      	ldr	r2, [pc, #136]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e14:	e003      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004e2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e34:	460b      	mov	r3, r1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	d034      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e48:	d007      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004e4a:	e011      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4c:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	4a11      	ldr	r2, [pc, #68]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e58:	e00e      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e5e:	3308      	adds	r3, #8
 8004e60:	2102      	movs	r1, #2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 face 	bl	8006404 <RCCEx_PLL2_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e6e:	e003      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e8e:	4a02      	ldr	r2, [pc, #8]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e94:	e006      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ea0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004eb6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	d00c      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec4:	3328      	adds	r3, #40	@ 0x28
 8004ec6:	2102      	movs	r1, #2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 fb4d 	bl	8006568 <RCCEx_PLL3_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004ee6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ee8:	2300      	movs	r3, #0
 8004eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	d038      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f02:	d018      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004f04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f08:	d811      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f0e:	d014      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f14:	d80b      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d011      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f20:	4bc3      	ldr	r3, [pc, #780]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f24:	4ac2      	ldr	r2, [pc, #776]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004f2c:	e008      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f34:	e004      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f36:	bf00      	nop
 8004f38:	e002      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f48:	4bb9      	ldr	r3, [pc, #740]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f58:	4ab5      	ldr	r2, [pc, #724]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f5e:	e003      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004f74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f76:	2300      	movs	r3, #0
 8004f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4313      	orrs	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f84:	4baa      	ldr	r3, [pc, #680]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f92:	4aa7      	ldr	r2, [pc, #668]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004fa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004faa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	d009      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fb4:	4b9e      	ldr	r3, [pc, #632]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc2:	4a9b      	ldr	r2, [pc, #620]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004fe4:	4b92      	ldr	r3, [pc, #584]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe8:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff2:	4a8f      	ldr	r2, [pc, #572]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005004:	643b      	str	r3, [r7, #64]	@ 0x40
 8005006:	2300      	movs	r3, #0
 8005008:	647b      	str	r3, [r7, #68]	@ 0x44
 800500a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	d00e      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005014:	4b86      	ldr	r3, [pc, #536]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	4a85      	ldr	r2, [pc, #532]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800501a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800501e:	6113      	str	r3, [r2, #16]
 8005020:	4b83      	ldr	r3, [pc, #524]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005022:	6919      	ldr	r1, [r3, #16]
 8005024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005028:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800502c:	4a80      	ldr	r2, [pc, #512]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800502e:	430b      	orrs	r3, r1
 8005030:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800503e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005040:	2300      	movs	r3, #0
 8005042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005044:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005048:	460b      	mov	r3, r1
 800504a:	4313      	orrs	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800504e:	4b78      	ldr	r3, [pc, #480]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005052:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800505a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505c:	4a74      	ldr	r2, [pc, #464]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800505e:	430b      	orrs	r3, r1
 8005060:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800506e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005070:	2300      	movs	r3, #0
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
 8005074:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005078:	460b      	mov	r3, r1
 800507a:	4313      	orrs	r3, r2
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800507e:	4b6c      	ldr	r3, [pc, #432]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005082:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800508a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800508e:	4a68      	ldr	r2, [pc, #416]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005090:	430b      	orrs	r3, r1
 8005092:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	2100      	movs	r1, #0
 800509e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	d011      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b4:	3308      	adds	r3, #8
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 f9a3 	bl	8006404 <RCCEx_PLL2_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80050c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	2100      	movs	r1, #0
 80050de:	6239      	str	r1, [r7, #32]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80050ea:	460b      	mov	r3, r1
 80050ec:	4313      	orrs	r3, r2
 80050ee:	d011      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050f4:	3308      	adds	r3, #8
 80050f6:	2101      	movs	r1, #1
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 f983 	bl	8006404 <RCCEx_PLL2_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005104:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005110:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	2100      	movs	r1, #0
 800511e:	61b9      	str	r1, [r7, #24]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d011      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005134:	3308      	adds	r3, #8
 8005136:	2102      	movs	r1, #2
 8005138:	4618      	mov	r0, r3
 800513a:	f001 f963 	bl	8006404 <RCCEx_PLL2_Config>
 800513e:	4603      	mov	r3, r0
 8005140:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005144:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005150:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	2100      	movs	r1, #0
 800515e:	6139      	str	r1, [r7, #16]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800516a:	460b      	mov	r3, r1
 800516c:	4313      	orrs	r3, r2
 800516e:	d011      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005174:	3328      	adds	r3, #40	@ 0x28
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f001 f9f5 	bl	8006568 <RCCEx_PLL3_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005184:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005190:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	2100      	movs	r1, #0
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80051aa:	460b      	mov	r3, r1
 80051ac:	4313      	orrs	r3, r2
 80051ae:	d011      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b4:	3328      	adds	r3, #40	@ 0x28
 80051b6:	2101      	movs	r1, #1
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 f9d5 	bl	8006568 <RCCEx_PLL3_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80051c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80051d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	2100      	movs	r1, #0
 80051de:	6039      	str	r1, [r7, #0]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d011      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051f4:	3328      	adds	r3, #40	@ 0x28
 80051f6:	2102      	movs	r1, #2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f001 f9b5 	bl	8006568 <RCCEx_PLL3_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005204:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005210:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005214:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	e000      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
}
 8005222:	4618      	mov	r0, r3
 8005224:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400

08005234 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b090      	sub	sp, #64	@ 0x40
 8005238:	af00      	add	r7, sp, #0
 800523a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800523e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005242:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005246:	430b      	orrs	r3, r1
 8005248:	f040 8094 	bne.w	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800524c:	4b97      	ldr	r3, [pc, #604]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800524e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005258:	2b04      	cmp	r3, #4
 800525a:	f200 8087 	bhi.w	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800525e:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005279 	.word	0x08005279
 8005268:	080052a1 	.word	0x080052a1
 800526c:	080052c9 	.word	0x080052c9
 8005270:	08005365 	.word	0x08005365
 8005274:	080052f1 	.word	0x080052f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005278:	4b8c      	ldr	r3, [pc, #560]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005280:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005284:	d108      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800528a:	4618      	mov	r0, r3
 800528c:	f000 ff68 	bl	8006160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005294:	f000 bc97 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800529c:	f000 bc93 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052a0:	4b82      	ldr	r3, [pc, #520]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ac:	d108      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ae:	f107 0318 	add.w	r3, r7, #24
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fcac 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052bc:	f000 bc83 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052c4:	f000 bc7f 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052c8:	4b78      	ldr	r3, [pc, #480]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052d4:	d108      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052d6:	f107 030c 	add.w	r3, r7, #12
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fdec 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052e4:	f000 bc6f 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052ec:	f000 bc6b 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052f0:	4b6e      	ldr	r3, [pc, #440]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052fa:	4b6c      	ldr	r3, [pc, #432]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b04      	cmp	r3, #4
 8005304:	d10c      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800530c:	4b67      	ldr	r3, [pc, #412]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	08db      	lsrs	r3, r3, #3
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	4a66      	ldr	r2, [pc, #408]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
 800531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800531e:	e01f      	b.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005320:	4b62      	ldr	r3, [pc, #392]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800532c:	d106      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800532e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005334:	d102      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005336:	4b5f      	ldr	r3, [pc, #380]	@ (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800533a:	e011      	b.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800533c:	4b5b      	ldr	r3, [pc, #364]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005348:	d106      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800534a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800534c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005350:	d102      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005352:	4b59      	ldr	r3, [pc, #356]	@ (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005356:	e003      	b.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800535c:	f000 bc33 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005360:	f000 bc31 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005364:	4b55      	ldr	r3, [pc, #340]	@ (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005368:	f000 bc2d 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005370:	f000 bc29 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005378:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800537c:	430b      	orrs	r3, r1
 800537e:	f040 809f 	bne.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005382:	4b4a      	ldr	r3, [pc, #296]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005386:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800538a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005392:	d04d      	beq.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800539a:	f200 8084 	bhi.w	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80053a2:	d07d      	beq.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053a8:	d87d      	bhi.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	2b80      	cmp	r3, #128	@ 0x80
 80053ae:	d02d      	beq.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	2b80      	cmp	r3, #128	@ 0x80
 80053b4:	d877      	bhi.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	2b40      	cmp	r3, #64	@ 0x40
 80053c0:	d012      	beq.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80053c2:	e070      	b.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053c4:	4b39      	ldr	r3, [pc, #228]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053d0:	d107      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fec2 	bl	8006160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053e0:	e3f1      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053e6:	e3ee      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053e8:	4b30      	ldr	r3, [pc, #192]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053f4:	d107      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053f6:	f107 0318 	add.w	r3, r7, #24
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fc08 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005404:	e3df      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800540a:	e3dc      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800540c:	4b27      	ldr	r3, [pc, #156]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005418:	d107      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800541a:	f107 030c 	add.w	r3, r7, #12
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fd4a 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005428:	e3cd      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800542e:	e3ca      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005430:	4b1e      	ldr	r3, [pc, #120]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005434:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800543a:	4b1c      	ldr	r3, [pc, #112]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d10c      	bne.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800544c:	4b17      	ldr	r3, [pc, #92]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	08db      	lsrs	r3, r3, #3
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	4a16      	ldr	r2, [pc, #88]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800545e:	e01e      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005460:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800546c:	d106      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800546e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005474:	d102      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005476:	4b0f      	ldr	r3, [pc, #60]	@ (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800547a:	e010      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800547c:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005488:	d106      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800548a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005490:	d102      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005492:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005496:	e002      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800549c:	e393      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800549e:	e392      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80054a0:	4b06      	ldr	r3, [pc, #24]	@ (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80054a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a4:	e38f      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054aa:	e38c      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80054ac:	58024400 	.word	0x58024400
 80054b0:	03d09000 	.word	0x03d09000
 80054b4:	003d0900 	.word	0x003d0900
 80054b8:	007a1200 	.word	0x007a1200
 80054bc:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80054c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80054c8:	430b      	orrs	r3, r1
 80054ca:	f040 809c 	bne.w	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80054ce:	4b9e      	ldr	r3, [pc, #632]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80054d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80054d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054de:	d054      	beq.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054e6:	f200 808b 	bhi.w	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054f0:	f000 8083 	beq.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054fa:	f200 8081 	bhi.w	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005504:	d02f      	beq.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800550c:	d878      	bhi.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800551a:	d012      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800551c:	e070      	b.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800551e:	4b8a      	ldr	r3, [pc, #552]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800552a:	d107      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800552c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fe15 	bl	8006160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800553a:	e344      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005540:	e341      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005542:	4b81      	ldr	r3, [pc, #516]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800554a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800554e:	d107      	bne.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005550:	f107 0318 	add.w	r3, r7, #24
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fb5b 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800555e:	e332      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005564:	e32f      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005566:	4b78      	ldr	r3, [pc, #480]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800556e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005572:	d107      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fc9d 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005582:	e320      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005588:	e31d      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800558a:	4b6f      	ldr	r3, [pc, #444]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800558c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005592:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005594:	4b6c      	ldr	r3, [pc, #432]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d10c      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80055a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a6:	4b68      	ldr	r3, [pc, #416]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	08db      	lsrs	r3, r3, #3
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	4a66      	ldr	r2, [pc, #408]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80055b2:	fa22 f303 	lsr.w	r3, r2, r3
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b8:	e01e      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055ba:	4b63      	ldr	r3, [pc, #396]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c6:	d106      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80055c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ce:	d102      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80055d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80055d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d4:	e010      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055e2:	d106      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055ea:	d102      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055ec:	4b59      	ldr	r3, [pc, #356]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f0:	e002      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80055f6:	e2e6      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80055f8:	e2e5      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055fa:	4b57      	ldr	r3, [pc, #348]	@ (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80055fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055fe:	e2e2      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005604:	e2df      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800560a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800560e:	430b      	orrs	r3, r1
 8005610:	f040 80a7 	bne.w	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005614:	4b4c      	ldr	r3, [pc, #304]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005618:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800561c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005624:	d055      	beq.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800562c:	f200 8096 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005632:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005636:	f000 8084 	beq.w	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005640:	f200 808c 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800564a:	d030      	beq.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800564c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005652:	f200 8083 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005662:	d012      	beq.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005664:	e07a      	b.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005666:	4b38      	ldr	r3, [pc, #224]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005672:	d107      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fd71 	bl	8006160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005682:	e2a0      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005688:	e29d      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800568a:	4b2f      	ldr	r3, [pc, #188]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005692:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005696:	d107      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005698:	f107 0318 	add.w	r3, r7, #24
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fab7 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056a6:	e28e      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ac:	e28b      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056ae:	4b26      	ldr	r3, [pc, #152]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ba:	d107      	bne.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fbf9 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ca:	e27c      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d0:	e279      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d10c      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80056e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056ee:	4b16      	ldr	r3, [pc, #88]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	08db      	lsrs	r3, r3, #3
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	4a14      	ldr	r2, [pc, #80]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005700:	e01e      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005702:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570e:	d106      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005716:	d102      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005718:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800571a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800571c:	e010      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800571e:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800572a:	d106      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005732:	d102      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005734:	4b07      	ldr	r3, [pc, #28]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005738:	e002      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800573e:	e242      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005740:	e241      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005742:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005746:	e23e      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005748:	58024400 	.word	0x58024400
 800574c:	03d09000 	.word	0x03d09000
 8005750:	003d0900 	.word	0x003d0900
 8005754:	007a1200 	.word	0x007a1200
 8005758:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005760:	e231      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005766:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800576a:	430b      	orrs	r3, r1
 800576c:	f040 8085 	bne.w	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005770:	4b9c      	ldr	r3, [pc, #624]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005778:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005780:	d06b      	beq.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005788:	d874      	bhi.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800578a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005790:	d056      	beq.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005798:	d86c      	bhi.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800579a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057a0:	d03b      	beq.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057a8:	d864      	bhi.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057b0:	d021      	beq.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057b8:	d85c      	bhi.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c6:	d004      	beq.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80057c8:	e054      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80057ca:	f7fe fb07 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80057ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057d0:	e1f9      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057d2:	4b84      	ldr	r3, [pc, #528]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057de:	d107      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057e0:	f107 0318 	add.w	r3, r7, #24
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fa13 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ee:	e1ea      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f4:	e1e7      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057f6:	4b7b      	ldr	r3, [pc, #492]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005802:	d107      	bne.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005804:	f107 030c 	add.w	r3, r7, #12
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fb55 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005812:	e1d8      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005818:	e1d5      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800581a:	4b72      	ldr	r3, [pc, #456]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b04      	cmp	r3, #4
 8005824:	d109      	bne.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005826:	4b6f      	ldr	r3, [pc, #444]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	08db      	lsrs	r3, r3, #3
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	4a6d      	ldr	r2, [pc, #436]	@ (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005832:	fa22 f303 	lsr.w	r3, r2, r3
 8005836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005838:	e1c5      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800583e:	e1c2      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005840:	4b68      	ldr	r3, [pc, #416]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800584c:	d102      	bne.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800584e:	4b67      	ldr	r3, [pc, #412]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005852:	e1b8      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005858:	e1b5      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800585a:	4b62      	ldr	r3, [pc, #392]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005866:	d102      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005868:	4b61      	ldr	r3, [pc, #388]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800586c:	e1ab      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005872:	e1a8      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005878:	e1a5      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800587a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800587e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005882:	430b      	orrs	r3, r1
 8005884:	d173      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005886:	4b57      	ldr	r3, [pc, #348]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800588e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005896:	d02f      	beq.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800589e:	d863      	bhi.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80058a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ac:	d012      	beq.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80058ae:	e05b      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058b0:	4b4c      	ldr	r3, [pc, #304]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058bc:	d107      	bne.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058be:	f107 0318 	add.w	r3, r7, #24
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f9a4 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058cc:	e17b      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d2:	e178      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058d4:	4b43      	ldr	r3, [pc, #268]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058e0:	d107      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058e2:	f107 030c 	add.w	r3, r7, #12
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fae6 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058f0:	e169      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f6:	e166      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058f8:	4b3a      	ldr	r3, [pc, #232]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005900:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005902:	4b38      	ldr	r3, [pc, #224]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b04      	cmp	r3, #4
 800590c:	d10c      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800590e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005914:	4b33      	ldr	r3, [pc, #204]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	08db      	lsrs	r3, r3, #3
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	4a32      	ldr	r2, [pc, #200]	@ (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005926:	e01e      	b.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005928:	4b2e      	ldr	r3, [pc, #184]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005934:	d106      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8005936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800593c:	d102      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800593e:	4b2b      	ldr	r3, [pc, #172]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005942:	e010      	b.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005944:	4b27      	ldr	r3, [pc, #156]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005950:	d106      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005958:	d102      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800595a:	4b25      	ldr	r3, [pc, #148]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800595c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800595e:	e002      	b.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005964:	e12f      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005966:	e12e      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800596c:	e12b      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800596e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005972:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005976:	430b      	orrs	r3, r1
 8005978:	d13c      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800597a:	4b1a      	ldr	r3, [pc, #104]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800597c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800597e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005982:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005990:	d012      	beq.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005992:	e023      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005994:	4b13      	ldr	r3, [pc, #76]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059a0:	d107      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fbda 	bl	8006160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059b0:	e109      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b6:	e106      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059b8:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c4:	d107      	bne.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c6:	f107 0318 	add.w	r3, r7, #24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f920 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059d4:	e0f7      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059da:	e0f4      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e0:	e0f1      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80059e2:	bf00      	nop
 80059e4:	58024400 	.word	0x58024400
 80059e8:	03d09000 	.word	0x03d09000
 80059ec:	003d0900 	.word	0x003d0900
 80059f0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80059f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80059fc:	430b      	orrs	r3, r1
 80059fe:	f040 8091 	bne.w	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005a02:	4b73      	ldr	r3, [pc, #460]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a06:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005a0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005a12:	f000 8081 	beq.w	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a18:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005a1c:	d87f      	bhi.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a24:	d06b      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a2c:	d877      	bhi.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a34:	d056      	beq.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a3c:	d86f      	bhi.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a44:	d03b      	beq.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a4c:	d867      	bhi.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a54:	d021      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a5c:	d85f      	bhi.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a6a:	d004      	beq.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005a6c:	e057      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005a6e:	f000 f8b9 	bl	8005be4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a74:	e0a7      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a76:	4b56      	ldr	r3, [pc, #344]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a82:	d107      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a84:	f107 0318 	add.w	r3, r7, #24
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 f8c1 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a92:	e098      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a98:	e095      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aa8:	f107 030c 	add.w	r3, r7, #12
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fa03 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ab6:	e086      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005abc:	e083      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005abe:	4b44      	ldr	r3, [pc, #272]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d109      	bne.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aca:	4b41      	ldr	r3, [pc, #260]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	08db      	lsrs	r3, r3, #3
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	4a3f      	ldr	r2, [pc, #252]	@ (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005adc:	e073      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae2:	e070      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005af0:	d102      	bne.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005af2:	4b39      	ldr	r3, [pc, #228]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005af6:	e066      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005afc:	e063      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005afe:	4b34      	ldr	r3, [pc, #208]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b0a:	d102      	bne.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005b0c:	4b33      	ldr	r3, [pc, #204]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b10:	e059      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b16:	e056      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b18:	4b31      	ldr	r3, [pc, #196]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b1c:	e053      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b22:	e050      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b28:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	d148      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005b30:	4b27      	ldr	r3, [pc, #156]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b40:	d02a      	beq.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b48:	d838      	bhi.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b56:	d00d      	beq.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005b58:	e030      	b.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b66:	d102      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005b68:	4b1c      	ldr	r3, [pc, #112]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b6c:	e02b      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b72:	e028      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b74:	4b16      	ldr	r3, [pc, #88]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b80:	d107      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 faea 	bl	8006160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b90:	e019      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b96:	e016      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b98:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ba4:	d107      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ba6:	f107 0318 	add.w	r3, r7, #24
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 f830 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bb4:	e007      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bba:	e004      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc0:	e001      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3740      	adds	r7, #64	@ 0x40
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	03d09000 	.word	0x03d09000
 8005bd8:	003d0900 	.word	0x003d0900
 8005bdc:	007a1200 	.word	0x007a1200
 8005be0:	00bb8000 	.word	0x00bb8000

08005be4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005be8:	f7fe f8c8 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8005bec:	4602      	mov	r2, r0
 8005bee:	4b06      	ldr	r3, [pc, #24]	@ (8005c08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	4904      	ldr	r1, [pc, #16]	@ (8005c0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bfa:	5ccb      	ldrb	r3, [r1, r3]
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	0800e6e4 	.word	0x0800e6e4

08005c10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	@ 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c18:	4ba1      	ldr	r3, [pc, #644]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c22:	4b9f      	ldr	r3, [pc, #636]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	0b1b      	lsrs	r3, r3, #12
 8005c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c2e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	091b      	lsrs	r3, r3, #4
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c3a:	4b99      	ldr	r3, [pc, #612]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3e:	08db      	lsrs	r3, r3, #3
 8005c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8111 	beq.w	8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	f000 8083 	beq.w	8005d6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	f200 80a1 	bhi.w	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d056      	beq.n	8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c7a:	e099      	b.n	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c7c:	4b88      	ldr	r3, [pc, #544]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d02d      	beq.n	8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c88:	4b85      	ldr	r3, [pc, #532]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	08db      	lsrs	r3, r3, #3
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	4a84      	ldr	r2, [pc, #528]	@ (8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
 8005c98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ce2:	e087      	b.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d26:	e065      	b.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3a:	4b59      	ldr	r3, [pc, #356]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d6a:	e043      	b.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7e:	4b48      	ldr	r3, [pc, #288]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dae:	e021      	b.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc2:	4b37      	ldr	r3, [pc, #220]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005df2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005df4:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	0a5b      	lsrs	r3, r3, #9
 8005dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1a:	ee17 2a90 	vmov	r2, s15
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e22:	4b1f      	ldr	r3, [pc, #124]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e48:	ee17 2a90 	vmov	r2, s15
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e50:	4b13      	ldr	r3, [pc, #76]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e54:	0e1b      	lsrs	r3, r3, #24
 8005e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e76:	ee17 2a90 	vmov	r2, s15
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e7e:	e008      	b.n	8005e92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	609a      	str	r2, [r3, #8]
}
 8005e92:	bf00      	nop
 8005e94:	3724      	adds	r7, #36	@ 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	03d09000 	.word	0x03d09000
 8005ea8:	46000000 	.word	0x46000000
 8005eac:	4c742400 	.word	0x4c742400
 8005eb0:	4a742400 	.word	0x4a742400
 8005eb4:	4af42400 	.word	0x4af42400

08005eb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b089      	sub	sp, #36	@ 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005eca:	4b9f      	ldr	r3, [pc, #636]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	0d1b      	lsrs	r3, r3, #20
 8005ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005ee2:	4b99      	ldr	r3, [pc, #612]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8111 	beq.w	8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	f000 8083 	beq.w	8006014 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	f200 80a1 	bhi.w	8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d056      	beq.n	8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f22:	e099      	b.n	8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f24:	4b88      	ldr	r3, [pc, #544]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d02d      	beq.n	8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f30:	4b85      	ldr	r3, [pc, #532]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	08db      	lsrs	r3, r3, #3
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	4a84      	ldr	r2, [pc, #528]	@ (800614c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f8a:	e087      	b.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fce:	e065      	b.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006158 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b59      	ldr	r3, [pc, #356]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006012:	e043      	b.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800615c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b48      	ldr	r3, [pc, #288]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a03 	vldr	s12, [r7, #12]
 800603a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006056:	e021      	b.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006158 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b37      	ldr	r3, [pc, #220]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a03 	vldr	s12, [r7, #12]
 800607e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800609c:	4b2a      	ldr	r3, [pc, #168]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a0:	0a5b      	lsrs	r3, r3, #9
 80060a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c2:	ee17 2a90 	vmov	r2, s15
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80060ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ce:	0c1b      	lsrs	r3, r3, #16
 80060d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f0:	ee17 2a90 	vmov	r2, s15
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80060f8:	4b13      	ldr	r3, [pc, #76]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fc:	0e1b      	lsrs	r3, r3, #24
 80060fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800610e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006112:	edd7 6a07 	vldr	s13, [r7, #28]
 8006116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800611a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611e:	ee17 2a90 	vmov	r2, s15
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006126:	e008      	b.n	800613a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	609a      	str	r2, [r3, #8]
}
 800613a:	bf00      	nop
 800613c:	3724      	adds	r7, #36	@ 0x24
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	58024400 	.word	0x58024400
 800614c:	03d09000 	.word	0x03d09000
 8006150:	46000000 	.word	0x46000000
 8006154:	4c742400 	.word	0x4c742400
 8006158:	4a742400 	.word	0x4a742400
 800615c:	4af42400 	.word	0x4af42400

08006160 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	@ 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006168:	4ba0      	ldr	r3, [pc, #640]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006172:	4b9e      	ldr	r3, [pc, #632]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800617c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800617e:	4b9b      	ldr	r3, [pc, #620]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006188:	4b98      	ldr	r3, [pc, #608]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800618a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618c:	08db      	lsrs	r3, r3, #3
 800618e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	fb02 f303 	mul.w	r3, r2, r3
 8006198:	ee07 3a90 	vmov	s15, r3
 800619c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8111 	beq.w	80063ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	f000 8083 	beq.w	80062ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	f200 80a1 	bhi.w	80062fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d056      	beq.n	8006276 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80061c8:	e099      	b.n	80062fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ca:	4b88      	ldr	r3, [pc, #544]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d02d      	beq.n	8006232 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061d6:	4b85      	ldr	r3, [pc, #532]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	08db      	lsrs	r3, r3, #3
 80061dc:	f003 0303 	and.w	r3, r3, #3
 80061e0:	4a83      	ldr	r2, [pc, #524]	@ (80063f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80061e2:	fa22 f303 	lsr.w	r3, r2, r3
 80061e6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006200:	4b7a      	ldr	r3, [pc, #488]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006208:	ee07 3a90 	vmov	s15, r3
 800620c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006210:	ed97 6a03 	vldr	s12, [r7, #12]
 8006214:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80063f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006230:	e087      	b.n	8006342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006244:	4b69      	ldr	r3, [pc, #420]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006254:	ed97 6a03 	vldr	s12, [r7, #12]
 8006258:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80063f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800625c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006264:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006270:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006274:	e065      	b.n	8006342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	ee07 3a90 	vmov	s15, r3
 800627c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006280:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80063fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006288:	4b58      	ldr	r3, [pc, #352]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800628a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006298:	ed97 6a03 	vldr	s12, [r7, #12]
 800629c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80063f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062b8:	e043      	b.n	8006342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006400 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80062c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062cc:	4b47      	ldr	r3, [pc, #284]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80063f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062fc:	e021      	b.n	8006342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006308:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800630c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006310:	4b36      	ldr	r3, [pc, #216]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006320:	ed97 6a03 	vldr	s12, [r7, #12]
 8006324:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80063f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006330:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006340:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006342:	4b2a      	ldr	r3, [pc, #168]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006346:	0a5b      	lsrs	r3, r3, #9
 8006348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800635c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006368:	ee17 2a90 	vmov	r2, s15
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006370:	4b1e      	ldr	r3, [pc, #120]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800638a:	edd7 6a07 	vldr	s13, [r7, #28]
 800638e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006396:	ee17 2a90 	vmov	r2, s15
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800639e:	4b13      	ldr	r3, [pc, #76]	@ (80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	0e1b      	lsrs	r3, r3, #24
 80063a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80063bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c4:	ee17 2a90 	vmov	r2, s15
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80063cc:	e008      	b.n	80063e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	609a      	str	r2, [r3, #8]
}
 80063e0:	bf00      	nop
 80063e2:	3724      	adds	r7, #36	@ 0x24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	58024400 	.word	0x58024400
 80063f0:	03d09000 	.word	0x03d09000
 80063f4:	46000000 	.word	0x46000000
 80063f8:	4c742400 	.word	0x4c742400
 80063fc:	4a742400 	.word	0x4a742400
 8006400:	4af42400 	.word	0x4af42400

08006404 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006412:	4b53      	ldr	r3, [pc, #332]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b03      	cmp	r3, #3
 800641c:	d101      	bne.n	8006422 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e099      	b.n	8006556 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006422:	4b4f      	ldr	r3, [pc, #316]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a4e      	ldr	r2, [pc, #312]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 8006428:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800642c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800642e:	f7fb f861 	bl	80014f4 <HAL_GetTick>
 8006432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006434:	e008      	b.n	8006448 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006436:	f7fb f85d 	bl	80014f4 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e086      	b.n	8006556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006448:	4b45      	ldr	r3, [pc, #276]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f0      	bne.n	8006436 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006454:	4b42      	ldr	r3, [pc, #264]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	031b      	lsls	r3, r3, #12
 8006462:	493f      	ldr	r1, [pc, #252]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 8006464:	4313      	orrs	r3, r2
 8006466:	628b      	str	r3, [r1, #40]	@ 0x28
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	3b01      	subs	r3, #1
 800646e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	3b01      	subs	r3, #1
 8006478:	025b      	lsls	r3, r3, #9
 800647a:	b29b      	uxth	r3, r3
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	3b01      	subs	r3, #1
 8006484:	041b      	lsls	r3, r3, #16
 8006486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	3b01      	subs	r3, #1
 8006492:	061b      	lsls	r3, r3, #24
 8006494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006498:	4931      	ldr	r1, [pc, #196]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 800649a:	4313      	orrs	r3, r2
 800649c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800649e:	4b30      	ldr	r3, [pc, #192]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	492d      	ldr	r1, [pc, #180]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80064b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	f023 0220 	bic.w	r2, r3, #32
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	4928      	ldr	r1, [pc, #160]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80064c2:	4b27      	ldr	r3, [pc, #156]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	4a26      	ldr	r2, [pc, #152]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064c8:	f023 0310 	bic.w	r3, r3, #16
 80064cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80064ce:	4b24      	ldr	r3, [pc, #144]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064d2:	4b24      	ldr	r3, [pc, #144]	@ (8006564 <RCCEx_PLL2_Config+0x160>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	69d2      	ldr	r2, [r2, #28]
 80064da:	00d2      	lsls	r2, r2, #3
 80064dc:	4920      	ldr	r1, [pc, #128]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80064e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064e8:	f043 0310 	orr.w	r3, r3, #16
 80064ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d106      	bne.n	8006502 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80064f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	4a19      	ldr	r2, [pc, #100]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 80064fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006500:	e00f      	b.n	8006522 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d106      	bne.n	8006516 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006508:	4b15      	ldr	r3, [pc, #84]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 800650a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650c:	4a14      	ldr	r2, [pc, #80]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 800650e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006514:	e005      	b.n	8006522 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006516:	4b12      	ldr	r3, [pc, #72]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	4a11      	ldr	r2, [pc, #68]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 800651c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006520:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006522:	4b0f      	ldr	r3, [pc, #60]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a0e      	ldr	r2, [pc, #56]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 8006528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800652c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800652e:	f7fa ffe1 	bl	80014f4 <HAL_GetTick>
 8006532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006534:	e008      	b.n	8006548 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006536:	f7fa ffdd 	bl	80014f4 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e006      	b.n	8006556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006548:	4b05      	ldr	r3, [pc, #20]	@ (8006560 <RCCEx_PLL2_Config+0x15c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0f0      	beq.n	8006536 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006554:	7bfb      	ldrb	r3, [r7, #15]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	58024400 	.word	0x58024400
 8006564:	ffff0007 	.word	0xffff0007

08006568 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006576:	4b53      	ldr	r3, [pc, #332]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b03      	cmp	r3, #3
 8006580:	d101      	bne.n	8006586 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e099      	b.n	80066ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006586:	4b4f      	ldr	r3, [pc, #316]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a4e      	ldr	r2, [pc, #312]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 800658c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006592:	f7fa ffaf 	bl	80014f4 <HAL_GetTick>
 8006596:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006598:	e008      	b.n	80065ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800659a:	f7fa ffab 	bl	80014f4 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e086      	b.n	80066ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065ac:	4b45      	ldr	r3, [pc, #276]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f0      	bne.n	800659a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80065b8:	4b42      	ldr	r3, [pc, #264]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	051b      	lsls	r3, r3, #20
 80065c6:	493f      	ldr	r1, [pc, #252]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	3b01      	subs	r3, #1
 80065dc:	025b      	lsls	r3, r3, #9
 80065de:	b29b      	uxth	r3, r3
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	041b      	lsls	r3, r3, #16
 80065ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	061b      	lsls	r3, r3, #24
 80065f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065fc:	4931      	ldr	r1, [pc, #196]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006602:	4b30      	ldr	r3, [pc, #192]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	492d      	ldr	r1, [pc, #180]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006610:	4313      	orrs	r3, r2
 8006612:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006614:	4b2b      	ldr	r3, [pc, #172]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006618:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	4928      	ldr	r1, [pc, #160]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006622:	4313      	orrs	r3, r2
 8006624:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006626:	4b27      	ldr	r3, [pc, #156]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662a:	4a26      	ldr	r2, [pc, #152]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 800662c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006630:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006632:	4b24      	ldr	r3, [pc, #144]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006636:	4b24      	ldr	r3, [pc, #144]	@ (80066c8 <RCCEx_PLL3_Config+0x160>)
 8006638:	4013      	ands	r3, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	69d2      	ldr	r2, [r2, #28]
 800663e:	00d2      	lsls	r2, r2, #3
 8006640:	4920      	ldr	r1, [pc, #128]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006642:	4313      	orrs	r3, r2
 8006644:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006646:	4b1f      	ldr	r3, [pc, #124]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664a:	4a1e      	ldr	r2, [pc, #120]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 800664c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006658:	4b1a      	ldr	r3, [pc, #104]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 800665a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665c:	4a19      	ldr	r2, [pc, #100]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 800665e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006662:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006664:	e00f      	b.n	8006686 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d106      	bne.n	800667a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800666c:	4b15      	ldr	r3, [pc, #84]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 800666e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006670:	4a14      	ldr	r2, [pc, #80]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006672:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006676:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006678:	e005      	b.n	8006686 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800667a:	4b12      	ldr	r3, [pc, #72]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 800667c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667e:	4a11      	ldr	r2, [pc, #68]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006680:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006684:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006686:	4b0f      	ldr	r3, [pc, #60]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a0e      	ldr	r2, [pc, #56]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 800668c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006692:	f7fa ff2f 	bl	80014f4 <HAL_GetTick>
 8006696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006698:	e008      	b.n	80066ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800669a:	f7fa ff2b 	bl	80014f4 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e006      	b.n	80066ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066ac:	4b05      	ldr	r3, [pc, #20]	@ (80066c4 <RCCEx_PLL3_Config+0x15c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0f0      	beq.n	800669a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	58024400 	.word	0x58024400
 80066c8:	ffff0007 	.word	0xffff0007

080066cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e049      	b.n	8006772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f841 	bl	800677a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f000 f9e8 	bl	8006ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d001      	beq.n	80067a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e054      	b.n	8006852 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a26      	ldr	r2, [pc, #152]	@ (8006860 <HAL_TIM_Base_Start_IT+0xd0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d022      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d2:	d01d      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a22      	ldr	r2, [pc, #136]	@ (8006864 <HAL_TIM_Base_Start_IT+0xd4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d018      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a21      	ldr	r2, [pc, #132]	@ (8006868 <HAL_TIM_Base_Start_IT+0xd8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d013      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1f      	ldr	r2, [pc, #124]	@ (800686c <HAL_TIM_Base_Start_IT+0xdc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00e      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006870 <HAL_TIM_Base_Start_IT+0xe0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d009      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1c      	ldr	r2, [pc, #112]	@ (8006874 <HAL_TIM_Base_Start_IT+0xe4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d004      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0x80>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1b      	ldr	r2, [pc, #108]	@ (8006878 <HAL_TIM_Base_Start_IT+0xe8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d115      	bne.n	800683c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	4b19      	ldr	r3, [pc, #100]	@ (800687c <HAL_TIM_Base_Start_IT+0xec>)
 8006818:	4013      	ands	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b06      	cmp	r3, #6
 8006820:	d015      	beq.n	800684e <HAL_TIM_Base_Start_IT+0xbe>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006828:	d011      	beq.n	800684e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683a:	e008      	b.n	800684e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	e000      	b.n	8006850 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40010000 	.word	0x40010000
 8006864:	40000400 	.word	0x40000400
 8006868:	40000800 	.word	0x40000800
 800686c:	40000c00 	.word	0x40000c00
 8006870:	40010400 	.word	0x40010400
 8006874:	40001800 	.word	0x40001800
 8006878:	40014000 	.word	0x40014000
 800687c:	00010007 	.word	0x00010007

08006880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d020      	beq.n	80068e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0202 	mvn.w	r2, #2
 80068b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f8e9 	bl	8006aa2 <HAL_TIM_IC_CaptureCallback>
 80068d0:	e005      	b.n	80068de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f8db 	bl	8006a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f8ec 	bl	8006ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d020      	beq.n	8006930 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01b      	beq.n	8006930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0204 	mvn.w	r2, #4
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2202      	movs	r2, #2
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8c3 	bl	8006aa2 <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f8b5 	bl	8006a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f8c6 	bl	8006ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d020      	beq.n	800697c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01b      	beq.n	800697c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0208 	mvn.w	r2, #8
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2204      	movs	r2, #4
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f89d 	bl	8006aa2 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f88f 	bl	8006a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f8a0 	bl	8006ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b00      	cmp	r3, #0
 8006984:	d020      	beq.n	80069c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01b      	beq.n	80069c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0210 	mvn.w	r2, #16
 8006998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2208      	movs	r2, #8
 800699e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f877 	bl	8006aa2 <HAL_TIM_IC_CaptureCallback>
 80069b4:	e005      	b.n	80069c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f869 	bl	8006a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f87a 	bl	8006ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00c      	beq.n	80069ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0201 	mvn.w	r2, #1
 80069e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fa fa34 	bl	8000e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d104      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00c      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f913 	bl	8006c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00c      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f90b 	bl	8006c54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00c      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f834 	bl	8006aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00c      	beq.n	8006a86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f06f 0220 	mvn.w	r2, #32
 8006a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f8d3 	bl	8006c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a46      	ldr	r2, [pc, #280]	@ (8006c0c <TIM_Base_SetConfig+0x12c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d013      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006afe:	d00f      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a43      	ldr	r2, [pc, #268]	@ (8006c10 <TIM_Base_SetConfig+0x130>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00b      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a42      	ldr	r2, [pc, #264]	@ (8006c14 <TIM_Base_SetConfig+0x134>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d007      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a41      	ldr	r2, [pc, #260]	@ (8006c18 <TIM_Base_SetConfig+0x138>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a40      	ldr	r2, [pc, #256]	@ (8006c1c <TIM_Base_SetConfig+0x13c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d108      	bne.n	8006b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a35      	ldr	r2, [pc, #212]	@ (8006c0c <TIM_Base_SetConfig+0x12c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01f      	beq.n	8006b7a <TIM_Base_SetConfig+0x9a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b40:	d01b      	beq.n	8006b7a <TIM_Base_SetConfig+0x9a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a32      	ldr	r2, [pc, #200]	@ (8006c10 <TIM_Base_SetConfig+0x130>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d017      	beq.n	8006b7a <TIM_Base_SetConfig+0x9a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a31      	ldr	r2, [pc, #196]	@ (8006c14 <TIM_Base_SetConfig+0x134>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <TIM_Base_SetConfig+0x9a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a30      	ldr	r2, [pc, #192]	@ (8006c18 <TIM_Base_SetConfig+0x138>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00f      	beq.n	8006b7a <TIM_Base_SetConfig+0x9a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8006c1c <TIM_Base_SetConfig+0x13c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00b      	beq.n	8006b7a <TIM_Base_SetConfig+0x9a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a2e      	ldr	r2, [pc, #184]	@ (8006c20 <TIM_Base_SetConfig+0x140>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d007      	beq.n	8006b7a <TIM_Base_SetConfig+0x9a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006c24 <TIM_Base_SetConfig+0x144>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d003      	beq.n	8006b7a <TIM_Base_SetConfig+0x9a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a2c      	ldr	r2, [pc, #176]	@ (8006c28 <TIM_Base_SetConfig+0x148>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d108      	bne.n	8006b8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a16      	ldr	r2, [pc, #88]	@ (8006c0c <TIM_Base_SetConfig+0x12c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00f      	beq.n	8006bd8 <TIM_Base_SetConfig+0xf8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a18      	ldr	r2, [pc, #96]	@ (8006c1c <TIM_Base_SetConfig+0x13c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00b      	beq.n	8006bd8 <TIM_Base_SetConfig+0xf8>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a17      	ldr	r2, [pc, #92]	@ (8006c20 <TIM_Base_SetConfig+0x140>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d007      	beq.n	8006bd8 <TIM_Base_SetConfig+0xf8>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a16      	ldr	r2, [pc, #88]	@ (8006c24 <TIM_Base_SetConfig+0x144>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d003      	beq.n	8006bd8 <TIM_Base_SetConfig+0xf8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a15      	ldr	r2, [pc, #84]	@ (8006c28 <TIM_Base_SetConfig+0x148>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d103      	bne.n	8006be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d105      	bne.n	8006bfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f023 0201 	bic.w	r2, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	611a      	str	r2, [r3, #16]
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40010400 	.word	0x40010400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800

08006c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e042      	b.n	8006d00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fa fb33 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2224      	movs	r2, #36	@ 0x24
 8006c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 ff22 	bl	8007afc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8b3 	bl	8006e24 <UART_SetConfig>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e01b      	b.n	8006d00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 ffa1 	bl	8007c40 <UART_CheckIdleState>
 8006cfe:	4603      	mov	r3, r0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	@ 0x28
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	4613      	mov	r3, r2
 8006d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d17b      	bne.n	8006e1a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <HAL_UART_Transmit+0x26>
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e074      	b.n	8006e1c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2221      	movs	r2, #33	@ 0x21
 8006d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d42:	f7fa fbd7 	bl	80014f4 <HAL_GetTick>
 8006d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	88fa      	ldrh	r2, [r7, #6]
 8006d4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d60:	d108      	bne.n	8006d74 <HAL_UART_Transmit+0x6c>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	e003      	b.n	8006d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d7c:	e030      	b.n	8006de0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	2180      	movs	r1, #128	@ 0x80
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f001 f803 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e03d      	b.n	8006e1c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	3302      	adds	r3, #2
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e007      	b.n	8006dce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1c8      	bne.n	8006d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2200      	movs	r2, #0
 8006df4:	2140      	movs	r1, #64	@ 0x40
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 ffcc 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d005      	beq.n	8006e0e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e006      	b.n	8006e1c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e000      	b.n	8006e1c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006e1a:	2302      	movs	r3, #2
  }
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3720      	adds	r7, #32
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e28:	b092      	sub	sp, #72	@ 0x48
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4bbe      	ldr	r3, [pc, #760]	@ (800714c <UART_SetConfig+0x328>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4ab3      	ldr	r2, [pc, #716]	@ (8007150 <UART_SetConfig+0x32c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	4baf      	ldr	r3, [pc, #700]	@ (8007154 <UART_SetConfig+0x330>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	6812      	ldr	r2, [r2, #0]
 8006e9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	f023 010f 	bic.w	r1, r3, #15
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4aa6      	ldr	r2, [pc, #664]	@ (8007158 <UART_SetConfig+0x334>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d177      	bne.n	8006fb4 <UART_SetConfig+0x190>
 8006ec4:	4ba5      	ldr	r3, [pc, #660]	@ (800715c <UART_SetConfig+0x338>)
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ecc:	2b28      	cmp	r3, #40	@ 0x28
 8006ece:	d86d      	bhi.n	8006fac <UART_SetConfig+0x188>
 8006ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed8 <UART_SetConfig+0xb4>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006f7d 	.word	0x08006f7d
 8006edc:	08006fad 	.word	0x08006fad
 8006ee0:	08006fad 	.word	0x08006fad
 8006ee4:	08006fad 	.word	0x08006fad
 8006ee8:	08006fad 	.word	0x08006fad
 8006eec:	08006fad 	.word	0x08006fad
 8006ef0:	08006fad 	.word	0x08006fad
 8006ef4:	08006fad 	.word	0x08006fad
 8006ef8:	08006f85 	.word	0x08006f85
 8006efc:	08006fad 	.word	0x08006fad
 8006f00:	08006fad 	.word	0x08006fad
 8006f04:	08006fad 	.word	0x08006fad
 8006f08:	08006fad 	.word	0x08006fad
 8006f0c:	08006fad 	.word	0x08006fad
 8006f10:	08006fad 	.word	0x08006fad
 8006f14:	08006fad 	.word	0x08006fad
 8006f18:	08006f8d 	.word	0x08006f8d
 8006f1c:	08006fad 	.word	0x08006fad
 8006f20:	08006fad 	.word	0x08006fad
 8006f24:	08006fad 	.word	0x08006fad
 8006f28:	08006fad 	.word	0x08006fad
 8006f2c:	08006fad 	.word	0x08006fad
 8006f30:	08006fad 	.word	0x08006fad
 8006f34:	08006fad 	.word	0x08006fad
 8006f38:	08006f95 	.word	0x08006f95
 8006f3c:	08006fad 	.word	0x08006fad
 8006f40:	08006fad 	.word	0x08006fad
 8006f44:	08006fad 	.word	0x08006fad
 8006f48:	08006fad 	.word	0x08006fad
 8006f4c:	08006fad 	.word	0x08006fad
 8006f50:	08006fad 	.word	0x08006fad
 8006f54:	08006fad 	.word	0x08006fad
 8006f58:	08006f9d 	.word	0x08006f9d
 8006f5c:	08006fad 	.word	0x08006fad
 8006f60:	08006fad 	.word	0x08006fad
 8006f64:	08006fad 	.word	0x08006fad
 8006f68:	08006fad 	.word	0x08006fad
 8006f6c:	08006fad 	.word	0x08006fad
 8006f70:	08006fad 	.word	0x08006fad
 8006f74:	08006fad 	.word	0x08006fad
 8006f78:	08006fa5 	.word	0x08006fa5
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f82:	e326      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8006f84:	2304      	movs	r3, #4
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8a:	e322      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e31e      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8006f94:	2310      	movs	r3, #16
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9a:	e31a      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8006f9c:	2320      	movs	r3, #32
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa2:	e316      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8006fa4:	2340      	movs	r3, #64	@ 0x40
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006faa:	e312      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8006fac:	2380      	movs	r3, #128	@ 0x80
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb2:	e30e      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a69      	ldr	r2, [pc, #420]	@ (8007160 <UART_SetConfig+0x33c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d130      	bne.n	8007020 <UART_SetConfig+0x1fc>
 8006fbe:	4b67      	ldr	r3, [pc, #412]	@ (800715c <UART_SetConfig+0x338>)
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	d826      	bhi.n	8007018 <UART_SetConfig+0x1f4>
 8006fca:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <UART_SetConfig+0x1ac>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006fe9 	.word	0x08006fe9
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	08006ff9 	.word	0x08006ff9
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	08007009 	.word	0x08007009
 8006fe4:	08007011 	.word	0x08007011
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fee:	e2f0      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff6:	e2ec      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffe:	e2e8      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007000:	2310      	movs	r3, #16
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007006:	e2e4      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007008:	2320      	movs	r3, #32
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700e:	e2e0      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007010:	2340      	movs	r3, #64	@ 0x40
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007016:	e2dc      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007018:	2380      	movs	r3, #128	@ 0x80
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701e:	e2d8      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a4f      	ldr	r2, [pc, #316]	@ (8007164 <UART_SetConfig+0x340>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d130      	bne.n	800708c <UART_SetConfig+0x268>
 800702a:	4b4c      	ldr	r3, [pc, #304]	@ (800715c <UART_SetConfig+0x338>)
 800702c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	2b05      	cmp	r3, #5
 8007034:	d826      	bhi.n	8007084 <UART_SetConfig+0x260>
 8007036:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <UART_SetConfig+0x218>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	08007055 	.word	0x08007055
 8007040:	0800705d 	.word	0x0800705d
 8007044:	08007065 	.word	0x08007065
 8007048:	0800706d 	.word	0x0800706d
 800704c:	08007075 	.word	0x08007075
 8007050:	0800707d 	.word	0x0800707d
 8007054:	2300      	movs	r3, #0
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705a:	e2ba      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800705c:	2304      	movs	r3, #4
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007062:	e2b6      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007064:	2308      	movs	r3, #8
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706a:	e2b2      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800706c:	2310      	movs	r3, #16
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007072:	e2ae      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007074:	2320      	movs	r3, #32
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707a:	e2aa      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800707c:	2340      	movs	r3, #64	@ 0x40
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007082:	e2a6      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e2a2      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a35      	ldr	r2, [pc, #212]	@ (8007168 <UART_SetConfig+0x344>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d130      	bne.n	80070f8 <UART_SetConfig+0x2d4>
 8007096:	4b31      	ldr	r3, [pc, #196]	@ (800715c <UART_SetConfig+0x338>)
 8007098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	2b05      	cmp	r3, #5
 80070a0:	d826      	bhi.n	80070f0 <UART_SetConfig+0x2cc>
 80070a2:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <UART_SetConfig+0x284>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070c1 	.word	0x080070c1
 80070ac:	080070c9 	.word	0x080070c9
 80070b0:	080070d1 	.word	0x080070d1
 80070b4:	080070d9 	.word	0x080070d9
 80070b8:	080070e1 	.word	0x080070e1
 80070bc:	080070e9 	.word	0x080070e9
 80070c0:	2300      	movs	r3, #0
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c6:	e284      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80070c8:	2304      	movs	r3, #4
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ce:	e280      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80070d0:	2308      	movs	r3, #8
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d6:	e27c      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80070d8:	2310      	movs	r3, #16
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070de:	e278      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80070e0:	2320      	movs	r3, #32
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e6:	e274      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80070e8:	2340      	movs	r3, #64	@ 0x40
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ee:	e270      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80070f0:	2380      	movs	r3, #128	@ 0x80
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f6:	e26c      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1b      	ldr	r2, [pc, #108]	@ (800716c <UART_SetConfig+0x348>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d142      	bne.n	8007188 <UART_SetConfig+0x364>
 8007102:	4b16      	ldr	r3, [pc, #88]	@ (800715c <UART_SetConfig+0x338>)
 8007104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	2b05      	cmp	r3, #5
 800710c:	d838      	bhi.n	8007180 <UART_SetConfig+0x35c>
 800710e:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <UART_SetConfig+0x2f0>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	0800712d 	.word	0x0800712d
 8007118:	08007135 	.word	0x08007135
 800711c:	0800713d 	.word	0x0800713d
 8007120:	08007145 	.word	0x08007145
 8007124:	08007171 	.word	0x08007171
 8007128:	08007179 	.word	0x08007179
 800712c:	2300      	movs	r3, #0
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007132:	e24e      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007134:	2304      	movs	r3, #4
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713a:	e24a      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800713c:	2308      	movs	r3, #8
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007142:	e246      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007144:	2310      	movs	r3, #16
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714a:	e242      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800714c:	cfff69f3 	.word	0xcfff69f3
 8007150:	58000c00 	.word	0x58000c00
 8007154:	11fff4ff 	.word	0x11fff4ff
 8007158:	40011000 	.word	0x40011000
 800715c:	58024400 	.word	0x58024400
 8007160:	40004400 	.word	0x40004400
 8007164:	40004800 	.word	0x40004800
 8007168:	40004c00 	.word	0x40004c00
 800716c:	40005000 	.word	0x40005000
 8007170:	2320      	movs	r3, #32
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007176:	e22c      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007178:	2340      	movs	r3, #64	@ 0x40
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717e:	e228      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007180:	2380      	movs	r3, #128	@ 0x80
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007186:	e224      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4ab1      	ldr	r2, [pc, #708]	@ (8007454 <UART_SetConfig+0x630>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d176      	bne.n	8007280 <UART_SetConfig+0x45c>
 8007192:	4bb1      	ldr	r3, [pc, #708]	@ (8007458 <UART_SetConfig+0x634>)
 8007194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800719a:	2b28      	cmp	r3, #40	@ 0x28
 800719c:	d86c      	bhi.n	8007278 <UART_SetConfig+0x454>
 800719e:	a201      	add	r2, pc, #4	@ (adr r2, 80071a4 <UART_SetConfig+0x380>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	08007249 	.word	0x08007249
 80071a8:	08007279 	.word	0x08007279
 80071ac:	08007279 	.word	0x08007279
 80071b0:	08007279 	.word	0x08007279
 80071b4:	08007279 	.word	0x08007279
 80071b8:	08007279 	.word	0x08007279
 80071bc:	08007279 	.word	0x08007279
 80071c0:	08007279 	.word	0x08007279
 80071c4:	08007251 	.word	0x08007251
 80071c8:	08007279 	.word	0x08007279
 80071cc:	08007279 	.word	0x08007279
 80071d0:	08007279 	.word	0x08007279
 80071d4:	08007279 	.word	0x08007279
 80071d8:	08007279 	.word	0x08007279
 80071dc:	08007279 	.word	0x08007279
 80071e0:	08007279 	.word	0x08007279
 80071e4:	08007259 	.word	0x08007259
 80071e8:	08007279 	.word	0x08007279
 80071ec:	08007279 	.word	0x08007279
 80071f0:	08007279 	.word	0x08007279
 80071f4:	08007279 	.word	0x08007279
 80071f8:	08007279 	.word	0x08007279
 80071fc:	08007279 	.word	0x08007279
 8007200:	08007279 	.word	0x08007279
 8007204:	08007261 	.word	0x08007261
 8007208:	08007279 	.word	0x08007279
 800720c:	08007279 	.word	0x08007279
 8007210:	08007279 	.word	0x08007279
 8007214:	08007279 	.word	0x08007279
 8007218:	08007279 	.word	0x08007279
 800721c:	08007279 	.word	0x08007279
 8007220:	08007279 	.word	0x08007279
 8007224:	08007269 	.word	0x08007269
 8007228:	08007279 	.word	0x08007279
 800722c:	08007279 	.word	0x08007279
 8007230:	08007279 	.word	0x08007279
 8007234:	08007279 	.word	0x08007279
 8007238:	08007279 	.word	0x08007279
 800723c:	08007279 	.word	0x08007279
 8007240:	08007279 	.word	0x08007279
 8007244:	08007271 	.word	0x08007271
 8007248:	2301      	movs	r3, #1
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724e:	e1c0      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007250:	2304      	movs	r3, #4
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007256:	e1bc      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007258:	2308      	movs	r3, #8
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725e:	e1b8      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007260:	2310      	movs	r3, #16
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007266:	e1b4      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007268:	2320      	movs	r3, #32
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e1b0      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007270:	2340      	movs	r3, #64	@ 0x40
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e1ac      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007278:	2380      	movs	r3, #128	@ 0x80
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e1a8      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a75      	ldr	r2, [pc, #468]	@ (800745c <UART_SetConfig+0x638>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d130      	bne.n	80072ec <UART_SetConfig+0x4c8>
 800728a:	4b73      	ldr	r3, [pc, #460]	@ (8007458 <UART_SetConfig+0x634>)
 800728c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	2b05      	cmp	r3, #5
 8007294:	d826      	bhi.n	80072e4 <UART_SetConfig+0x4c0>
 8007296:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <UART_SetConfig+0x478>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072b5 	.word	0x080072b5
 80072a0:	080072bd 	.word	0x080072bd
 80072a4:	080072c5 	.word	0x080072c5
 80072a8:	080072cd 	.word	0x080072cd
 80072ac:	080072d5 	.word	0x080072d5
 80072b0:	080072dd 	.word	0x080072dd
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ba:	e18a      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80072bc:	2304      	movs	r3, #4
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c2:	e186      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80072c4:	2308      	movs	r3, #8
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ca:	e182      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80072cc:	2310      	movs	r3, #16
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d2:	e17e      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80072d4:	2320      	movs	r3, #32
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072da:	e17a      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80072dc:	2340      	movs	r3, #64	@ 0x40
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e176      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80072e4:	2380      	movs	r3, #128	@ 0x80
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ea:	e172      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a5b      	ldr	r2, [pc, #364]	@ (8007460 <UART_SetConfig+0x63c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d130      	bne.n	8007358 <UART_SetConfig+0x534>
 80072f6:	4b58      	ldr	r3, [pc, #352]	@ (8007458 <UART_SetConfig+0x634>)
 80072f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	2b05      	cmp	r3, #5
 8007300:	d826      	bhi.n	8007350 <UART_SetConfig+0x52c>
 8007302:	a201      	add	r2, pc, #4	@ (adr r2, 8007308 <UART_SetConfig+0x4e4>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	08007321 	.word	0x08007321
 800730c:	08007329 	.word	0x08007329
 8007310:	08007331 	.word	0x08007331
 8007314:	08007339 	.word	0x08007339
 8007318:	08007341 	.word	0x08007341
 800731c:	08007349 	.word	0x08007349
 8007320:	2300      	movs	r3, #0
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007326:	e154      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007328:	2304      	movs	r3, #4
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732e:	e150      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007330:	2308      	movs	r3, #8
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007336:	e14c      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007338:	2310      	movs	r3, #16
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733e:	e148      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007340:	2320      	movs	r3, #32
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e144      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007348:	2340      	movs	r3, #64	@ 0x40
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e140      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007350:	2380      	movs	r3, #128	@ 0x80
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e13c      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a41      	ldr	r2, [pc, #260]	@ (8007464 <UART_SetConfig+0x640>)
 800735e:	4293      	cmp	r3, r2
 8007360:	f040 8082 	bne.w	8007468 <UART_SetConfig+0x644>
 8007364:	4b3c      	ldr	r3, [pc, #240]	@ (8007458 <UART_SetConfig+0x634>)
 8007366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007368:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800736c:	2b28      	cmp	r3, #40	@ 0x28
 800736e:	d86d      	bhi.n	800744c <UART_SetConfig+0x628>
 8007370:	a201      	add	r2, pc, #4	@ (adr r2, 8007378 <UART_SetConfig+0x554>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	0800741d 	.word	0x0800741d
 800737c:	0800744d 	.word	0x0800744d
 8007380:	0800744d 	.word	0x0800744d
 8007384:	0800744d 	.word	0x0800744d
 8007388:	0800744d 	.word	0x0800744d
 800738c:	0800744d 	.word	0x0800744d
 8007390:	0800744d 	.word	0x0800744d
 8007394:	0800744d 	.word	0x0800744d
 8007398:	08007425 	.word	0x08007425
 800739c:	0800744d 	.word	0x0800744d
 80073a0:	0800744d 	.word	0x0800744d
 80073a4:	0800744d 	.word	0x0800744d
 80073a8:	0800744d 	.word	0x0800744d
 80073ac:	0800744d 	.word	0x0800744d
 80073b0:	0800744d 	.word	0x0800744d
 80073b4:	0800744d 	.word	0x0800744d
 80073b8:	0800742d 	.word	0x0800742d
 80073bc:	0800744d 	.word	0x0800744d
 80073c0:	0800744d 	.word	0x0800744d
 80073c4:	0800744d 	.word	0x0800744d
 80073c8:	0800744d 	.word	0x0800744d
 80073cc:	0800744d 	.word	0x0800744d
 80073d0:	0800744d 	.word	0x0800744d
 80073d4:	0800744d 	.word	0x0800744d
 80073d8:	08007435 	.word	0x08007435
 80073dc:	0800744d 	.word	0x0800744d
 80073e0:	0800744d 	.word	0x0800744d
 80073e4:	0800744d 	.word	0x0800744d
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	0800744d 	.word	0x0800744d
 80073f0:	0800744d 	.word	0x0800744d
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	0800743d 	.word	0x0800743d
 80073fc:	0800744d 	.word	0x0800744d
 8007400:	0800744d 	.word	0x0800744d
 8007404:	0800744d 	.word	0x0800744d
 8007408:	0800744d 	.word	0x0800744d
 800740c:	0800744d 	.word	0x0800744d
 8007410:	0800744d 	.word	0x0800744d
 8007414:	0800744d 	.word	0x0800744d
 8007418:	08007445 	.word	0x08007445
 800741c:	2301      	movs	r3, #1
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007422:	e0d6      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007424:	2304      	movs	r3, #4
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742a:	e0d2      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800742c:	2308      	movs	r3, #8
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007432:	e0ce      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007434:	2310      	movs	r3, #16
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743a:	e0ca      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800743c:	2320      	movs	r3, #32
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007442:	e0c6      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007444:	2340      	movs	r3, #64	@ 0x40
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744a:	e0c2      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800744c:	2380      	movs	r3, #128	@ 0x80
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007452:	e0be      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007454:	40011400 	.word	0x40011400
 8007458:	58024400 	.word	0x58024400
 800745c:	40007800 	.word	0x40007800
 8007460:	40007c00 	.word	0x40007c00
 8007464:	40011800 	.word	0x40011800
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4aad      	ldr	r2, [pc, #692]	@ (8007724 <UART_SetConfig+0x900>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d176      	bne.n	8007560 <UART_SetConfig+0x73c>
 8007472:	4bad      	ldr	r3, [pc, #692]	@ (8007728 <UART_SetConfig+0x904>)
 8007474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007476:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800747a:	2b28      	cmp	r3, #40	@ 0x28
 800747c:	d86c      	bhi.n	8007558 <UART_SetConfig+0x734>
 800747e:	a201      	add	r2, pc, #4	@ (adr r2, 8007484 <UART_SetConfig+0x660>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	08007529 	.word	0x08007529
 8007488:	08007559 	.word	0x08007559
 800748c:	08007559 	.word	0x08007559
 8007490:	08007559 	.word	0x08007559
 8007494:	08007559 	.word	0x08007559
 8007498:	08007559 	.word	0x08007559
 800749c:	08007559 	.word	0x08007559
 80074a0:	08007559 	.word	0x08007559
 80074a4:	08007531 	.word	0x08007531
 80074a8:	08007559 	.word	0x08007559
 80074ac:	08007559 	.word	0x08007559
 80074b0:	08007559 	.word	0x08007559
 80074b4:	08007559 	.word	0x08007559
 80074b8:	08007559 	.word	0x08007559
 80074bc:	08007559 	.word	0x08007559
 80074c0:	08007559 	.word	0x08007559
 80074c4:	08007539 	.word	0x08007539
 80074c8:	08007559 	.word	0x08007559
 80074cc:	08007559 	.word	0x08007559
 80074d0:	08007559 	.word	0x08007559
 80074d4:	08007559 	.word	0x08007559
 80074d8:	08007559 	.word	0x08007559
 80074dc:	08007559 	.word	0x08007559
 80074e0:	08007559 	.word	0x08007559
 80074e4:	08007541 	.word	0x08007541
 80074e8:	08007559 	.word	0x08007559
 80074ec:	08007559 	.word	0x08007559
 80074f0:	08007559 	.word	0x08007559
 80074f4:	08007559 	.word	0x08007559
 80074f8:	08007559 	.word	0x08007559
 80074fc:	08007559 	.word	0x08007559
 8007500:	08007559 	.word	0x08007559
 8007504:	08007549 	.word	0x08007549
 8007508:	08007559 	.word	0x08007559
 800750c:	08007559 	.word	0x08007559
 8007510:	08007559 	.word	0x08007559
 8007514:	08007559 	.word	0x08007559
 8007518:	08007559 	.word	0x08007559
 800751c:	08007559 	.word	0x08007559
 8007520:	08007559 	.word	0x08007559
 8007524:	08007551 	.word	0x08007551
 8007528:	2301      	movs	r3, #1
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752e:	e050      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007530:	2304      	movs	r3, #4
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007536:	e04c      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007538:	2308      	movs	r3, #8
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753e:	e048      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007540:	2310      	movs	r3, #16
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007546:	e044      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007548:	2320      	movs	r3, #32
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754e:	e040      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007550:	2340      	movs	r3, #64	@ 0x40
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007556:	e03c      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007558:	2380      	movs	r3, #128	@ 0x80
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755e:	e038      	b.n	80075d2 <UART_SetConfig+0x7ae>
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a71      	ldr	r2, [pc, #452]	@ (800772c <UART_SetConfig+0x908>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d130      	bne.n	80075cc <UART_SetConfig+0x7a8>
 800756a:	4b6f      	ldr	r3, [pc, #444]	@ (8007728 <UART_SetConfig+0x904>)
 800756c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	2b05      	cmp	r3, #5
 8007574:	d826      	bhi.n	80075c4 <UART_SetConfig+0x7a0>
 8007576:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <UART_SetConfig+0x758>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	08007595 	.word	0x08007595
 8007580:	0800759d 	.word	0x0800759d
 8007584:	080075a5 	.word	0x080075a5
 8007588:	080075ad 	.word	0x080075ad
 800758c:	080075b5 	.word	0x080075b5
 8007590:	080075bd 	.word	0x080075bd
 8007594:	2302      	movs	r3, #2
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e01a      	b.n	80075d2 <UART_SetConfig+0x7ae>
 800759c:	2304      	movs	r3, #4
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a2:	e016      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80075a4:	2308      	movs	r3, #8
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075aa:	e012      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80075ac:	2310      	movs	r3, #16
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b2:	e00e      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80075b4:	2320      	movs	r3, #32
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ba:	e00a      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80075bc:	2340      	movs	r3, #64	@ 0x40
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c2:	e006      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80075c4:	2380      	movs	r3, #128	@ 0x80
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ca:	e002      	b.n	80075d2 <UART_SetConfig+0x7ae>
 80075cc:	2380      	movs	r3, #128	@ 0x80
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a55      	ldr	r2, [pc, #340]	@ (800772c <UART_SetConfig+0x908>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	f040 80f8 	bne.w	80077ce <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	dc46      	bgt.n	8007674 <UART_SetConfig+0x850>
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	db75      	blt.n	80076d6 <UART_SetConfig+0x8b2>
 80075ea:	3b02      	subs	r3, #2
 80075ec:	2b1e      	cmp	r3, #30
 80075ee:	d872      	bhi.n	80076d6 <UART_SetConfig+0x8b2>
 80075f0:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <UART_SetConfig+0x7d4>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	0800767b 	.word	0x0800767b
 80075fc:	080076d7 	.word	0x080076d7
 8007600:	08007683 	.word	0x08007683
 8007604:	080076d7 	.word	0x080076d7
 8007608:	080076d7 	.word	0x080076d7
 800760c:	080076d7 	.word	0x080076d7
 8007610:	08007693 	.word	0x08007693
 8007614:	080076d7 	.word	0x080076d7
 8007618:	080076d7 	.word	0x080076d7
 800761c:	080076d7 	.word	0x080076d7
 8007620:	080076d7 	.word	0x080076d7
 8007624:	080076d7 	.word	0x080076d7
 8007628:	080076d7 	.word	0x080076d7
 800762c:	080076d7 	.word	0x080076d7
 8007630:	080076a3 	.word	0x080076a3
 8007634:	080076d7 	.word	0x080076d7
 8007638:	080076d7 	.word	0x080076d7
 800763c:	080076d7 	.word	0x080076d7
 8007640:	080076d7 	.word	0x080076d7
 8007644:	080076d7 	.word	0x080076d7
 8007648:	080076d7 	.word	0x080076d7
 800764c:	080076d7 	.word	0x080076d7
 8007650:	080076d7 	.word	0x080076d7
 8007654:	080076d7 	.word	0x080076d7
 8007658:	080076d7 	.word	0x080076d7
 800765c:	080076d7 	.word	0x080076d7
 8007660:	080076d7 	.word	0x080076d7
 8007664:	080076d7 	.word	0x080076d7
 8007668:	080076d7 	.word	0x080076d7
 800766c:	080076d7 	.word	0x080076d7
 8007670:	080076c9 	.word	0x080076c9
 8007674:	2b40      	cmp	r3, #64	@ 0x40
 8007676:	d02a      	beq.n	80076ce <UART_SetConfig+0x8aa>
 8007678:	e02d      	b.n	80076d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800767a:	f7fe fab3 	bl	8005be4 <HAL_RCCEx_GetD3PCLK1Freq>
 800767e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007680:	e02f      	b.n	80076e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fac2 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007690:	e027      	b.n	80076e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007692:	f107 0318 	add.w	r3, r7, #24
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fc0e 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a0:	e01f      	b.n	80076e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a2:	4b21      	ldr	r3, [pc, #132]	@ (8007728 <UART_SetConfig+0x904>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007728 <UART_SetConfig+0x904>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	08db      	lsrs	r3, r3, #3
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007730 <UART_SetConfig+0x90c>)
 80076ba:	fa22 f303 	lsr.w	r3, r2, r3
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076c0:	e00f      	b.n	80076e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80076c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007730 <UART_SetConfig+0x90c>)
 80076c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c6:	e00c      	b.n	80076e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007734 <UART_SetConfig+0x910>)
 80076ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076cc:	e009      	b.n	80076e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d4:	e005      	b.n	80076e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80076e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 81ee 	beq.w	8007ac6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ee:	4a12      	ldr	r2, [pc, #72]	@ (8007738 <UART_SetConfig+0x914>)
 80076f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076fc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4413      	add	r3, r2
 8007708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800770a:	429a      	cmp	r2, r3
 800770c:	d305      	bcc.n	800771a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007716:	429a      	cmp	r2, r3
 8007718:	d910      	bls.n	800773c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007720:	e1d1      	b.n	8007ac6 <UART_SetConfig+0xca2>
 8007722:	bf00      	nop
 8007724:	40011c00 	.word	0x40011c00
 8007728:	58024400 	.word	0x58024400
 800772c:	58000c00 	.word	0x58000c00
 8007730:	03d09000 	.word	0x03d09000
 8007734:	003d0900 	.word	0x003d0900
 8007738:	0800e6f4 	.word	0x0800e6f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800773c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800773e:	2200      	movs	r2, #0
 8007740:	60bb      	str	r3, [r7, #8]
 8007742:	60fa      	str	r2, [r7, #12]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007748:	4ac0      	ldr	r2, [pc, #768]	@ (8007a4c <UART_SetConfig+0xc28>)
 800774a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800774e:	b29b      	uxth	r3, r3
 8007750:	2200      	movs	r2, #0
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	607a      	str	r2, [r7, #4]
 8007756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800775a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800775e:	f7f8 fe1f 	bl	80003a0 <__aeabi_uldivmod>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4610      	mov	r0, r2
 8007768:	4619      	mov	r1, r3
 800776a:	f04f 0200 	mov.w	r2, #0
 800776e:	f04f 0300 	mov.w	r3, #0
 8007772:	020b      	lsls	r3, r1, #8
 8007774:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007778:	0202      	lsls	r2, r0, #8
 800777a:	6979      	ldr	r1, [r7, #20]
 800777c:	6849      	ldr	r1, [r1, #4]
 800777e:	0849      	lsrs	r1, r1, #1
 8007780:	2000      	movs	r0, #0
 8007782:	460c      	mov	r4, r1
 8007784:	4605      	mov	r5, r0
 8007786:	eb12 0804 	adds.w	r8, r2, r4
 800778a:	eb43 0905 	adc.w	r9, r3, r5
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	469a      	mov	sl, r3
 8007796:	4693      	mov	fp, r2
 8007798:	4652      	mov	r2, sl
 800779a:	465b      	mov	r3, fp
 800779c:	4640      	mov	r0, r8
 800779e:	4649      	mov	r1, r9
 80077a0:	f7f8 fdfe 	bl	80003a0 <__aeabi_uldivmod>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4613      	mov	r3, r2
 80077aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b2:	d308      	bcc.n	80077c6 <UART_SetConfig+0x9a2>
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ba:	d204      	bcs.n	80077c6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077c2:	60da      	str	r2, [r3, #12]
 80077c4:	e17f      	b.n	8007ac6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077cc:	e17b      	b.n	8007ac6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d6:	f040 80bd 	bne.w	8007954 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80077da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077de:	2b20      	cmp	r3, #32
 80077e0:	dc48      	bgt.n	8007874 <UART_SetConfig+0xa50>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	db7b      	blt.n	80078de <UART_SetConfig+0xaba>
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d879      	bhi.n	80078de <UART_SetConfig+0xaba>
 80077ea:	a201      	add	r2, pc, #4	@ (adr r2, 80077f0 <UART_SetConfig+0x9cc>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	0800787b 	.word	0x0800787b
 80077f4:	08007883 	.word	0x08007883
 80077f8:	080078df 	.word	0x080078df
 80077fc:	080078df 	.word	0x080078df
 8007800:	0800788b 	.word	0x0800788b
 8007804:	080078df 	.word	0x080078df
 8007808:	080078df 	.word	0x080078df
 800780c:	080078df 	.word	0x080078df
 8007810:	0800789b 	.word	0x0800789b
 8007814:	080078df 	.word	0x080078df
 8007818:	080078df 	.word	0x080078df
 800781c:	080078df 	.word	0x080078df
 8007820:	080078df 	.word	0x080078df
 8007824:	080078df 	.word	0x080078df
 8007828:	080078df 	.word	0x080078df
 800782c:	080078df 	.word	0x080078df
 8007830:	080078ab 	.word	0x080078ab
 8007834:	080078df 	.word	0x080078df
 8007838:	080078df 	.word	0x080078df
 800783c:	080078df 	.word	0x080078df
 8007840:	080078df 	.word	0x080078df
 8007844:	080078df 	.word	0x080078df
 8007848:	080078df 	.word	0x080078df
 800784c:	080078df 	.word	0x080078df
 8007850:	080078df 	.word	0x080078df
 8007854:	080078df 	.word	0x080078df
 8007858:	080078df 	.word	0x080078df
 800785c:	080078df 	.word	0x080078df
 8007860:	080078df 	.word	0x080078df
 8007864:	080078df 	.word	0x080078df
 8007868:	080078df 	.word	0x080078df
 800786c:	080078df 	.word	0x080078df
 8007870:	080078d1 	.word	0x080078d1
 8007874:	2b40      	cmp	r3, #64	@ 0x40
 8007876:	d02e      	beq.n	80078d6 <UART_SetConfig+0xab2>
 8007878:	e031      	b.n	80078de <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800787a:	f7fc faaf 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 800787e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007880:	e033      	b.n	80078ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007882:	f7fc fac1 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 8007886:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007888:	e02f      	b.n	80078ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe f9be 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007898:	e027      	b.n	80078ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800789a:	f107 0318 	add.w	r3, r7, #24
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fb0a 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a8:	e01f      	b.n	80078ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078aa:	4b69      	ldr	r3, [pc, #420]	@ (8007a50 <UART_SetConfig+0xc2c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078b6:	4b66      	ldr	r3, [pc, #408]	@ (8007a50 <UART_SetConfig+0xc2c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	08db      	lsrs	r3, r3, #3
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	4a64      	ldr	r2, [pc, #400]	@ (8007a54 <UART_SetConfig+0xc30>)
 80078c2:	fa22 f303 	lsr.w	r3, r2, r3
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078c8:	e00f      	b.n	80078ea <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80078ca:	4b62      	ldr	r3, [pc, #392]	@ (8007a54 <UART_SetConfig+0xc30>)
 80078cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ce:	e00c      	b.n	80078ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078d0:	4b61      	ldr	r3, [pc, #388]	@ (8007a58 <UART_SetConfig+0xc34>)
 80078d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d4:	e009      	b.n	80078ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078dc:	e005      	b.n	80078ea <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 80ea 	beq.w	8007ac6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f6:	4a55      	ldr	r2, [pc, #340]	@ (8007a4c <UART_SetConfig+0xc28>)
 80078f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007900:	fbb3 f3f2 	udiv	r3, r3, r2
 8007904:	005a      	lsls	r2, r3, #1
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	085b      	lsrs	r3, r3, #1
 800790c:	441a      	add	r2, r3
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	fbb2 f3f3 	udiv	r3, r2, r3
 8007916:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791a:	2b0f      	cmp	r3, #15
 800791c:	d916      	bls.n	800794c <UART_SetConfig+0xb28>
 800791e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007924:	d212      	bcs.n	800794c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	b29b      	uxth	r3, r3
 800792a:	f023 030f 	bic.w	r3, r3, #15
 800792e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	b29b      	uxth	r3, r3
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	b29a      	uxth	r2, r3
 800793c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800793e:	4313      	orrs	r3, r2
 8007940:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007948:	60da      	str	r2, [r3, #12]
 800794a:	e0bc      	b.n	8007ac6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007952:	e0b8      	b.n	8007ac6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007954:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007958:	2b20      	cmp	r3, #32
 800795a:	dc4b      	bgt.n	80079f4 <UART_SetConfig+0xbd0>
 800795c:	2b00      	cmp	r3, #0
 800795e:	f2c0 8087 	blt.w	8007a70 <UART_SetConfig+0xc4c>
 8007962:	2b20      	cmp	r3, #32
 8007964:	f200 8084 	bhi.w	8007a70 <UART_SetConfig+0xc4c>
 8007968:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <UART_SetConfig+0xb4c>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	080079fb 	.word	0x080079fb
 8007974:	08007a03 	.word	0x08007a03
 8007978:	08007a71 	.word	0x08007a71
 800797c:	08007a71 	.word	0x08007a71
 8007980:	08007a0b 	.word	0x08007a0b
 8007984:	08007a71 	.word	0x08007a71
 8007988:	08007a71 	.word	0x08007a71
 800798c:	08007a71 	.word	0x08007a71
 8007990:	08007a1b 	.word	0x08007a1b
 8007994:	08007a71 	.word	0x08007a71
 8007998:	08007a71 	.word	0x08007a71
 800799c:	08007a71 	.word	0x08007a71
 80079a0:	08007a71 	.word	0x08007a71
 80079a4:	08007a71 	.word	0x08007a71
 80079a8:	08007a71 	.word	0x08007a71
 80079ac:	08007a71 	.word	0x08007a71
 80079b0:	08007a2b 	.word	0x08007a2b
 80079b4:	08007a71 	.word	0x08007a71
 80079b8:	08007a71 	.word	0x08007a71
 80079bc:	08007a71 	.word	0x08007a71
 80079c0:	08007a71 	.word	0x08007a71
 80079c4:	08007a71 	.word	0x08007a71
 80079c8:	08007a71 	.word	0x08007a71
 80079cc:	08007a71 	.word	0x08007a71
 80079d0:	08007a71 	.word	0x08007a71
 80079d4:	08007a71 	.word	0x08007a71
 80079d8:	08007a71 	.word	0x08007a71
 80079dc:	08007a71 	.word	0x08007a71
 80079e0:	08007a71 	.word	0x08007a71
 80079e4:	08007a71 	.word	0x08007a71
 80079e8:	08007a71 	.word	0x08007a71
 80079ec:	08007a71 	.word	0x08007a71
 80079f0:	08007a63 	.word	0x08007a63
 80079f4:	2b40      	cmp	r3, #64	@ 0x40
 80079f6:	d037      	beq.n	8007a68 <UART_SetConfig+0xc44>
 80079f8:	e03a      	b.n	8007a70 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079fa:	f7fc f9ef 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80079fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a00:	e03c      	b.n	8007a7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a02:	f7fc fa01 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 8007a06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a08:	e038      	b.n	8007a7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe f8fe 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a18:	e030      	b.n	8007a7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a1a:	f107 0318 	add.w	r3, r7, #24
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe fa4a 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a28:	e028      	b.n	8007a7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a2a:	4b09      	ldr	r3, [pc, #36]	@ (8007a50 <UART_SetConfig+0xc2c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d012      	beq.n	8007a5c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a36:	4b06      	ldr	r3, [pc, #24]	@ (8007a50 <UART_SetConfig+0xc2c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	08db      	lsrs	r3, r3, #3
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <UART_SetConfig+0xc30>)
 8007a42:	fa22 f303 	lsr.w	r3, r2, r3
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a48:	e018      	b.n	8007a7c <UART_SetConfig+0xc58>
 8007a4a:	bf00      	nop
 8007a4c:	0800e6f4 	.word	0x0800e6f4
 8007a50:	58024400 	.word	0x58024400
 8007a54:	03d09000 	.word	0x03d09000
 8007a58:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007a5c:	4b24      	ldr	r3, [pc, #144]	@ (8007af0 <UART_SetConfig+0xccc>)
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a60:	e00c      	b.n	8007a7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a62:	4b24      	ldr	r3, [pc, #144]	@ (8007af4 <UART_SetConfig+0xcd0>)
 8007a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a66:	e009      	b.n	8007a7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6e:	e005      	b.n	8007a7c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a7a:	bf00      	nop
    }

    if (pclk != 0U)
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d021      	beq.n	8007ac6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a86:	4a1c      	ldr	r2, [pc, #112]	@ (8007af8 <UART_SetConfig+0xcd4>)
 8007a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a90:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	441a      	add	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa8:	2b0f      	cmp	r3, #15
 8007aaa:	d909      	bls.n	8007ac0 <UART_SetConfig+0xc9c>
 8007aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ab2:	d205      	bcs.n	8007ac0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60da      	str	r2, [r3, #12]
 8007abe:	e002      	b.n	8007ac6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ae2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3748      	adds	r7, #72	@ 0x48
 8007aea:	46bd      	mov	sp, r7
 8007aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007af0:	03d09000 	.word	0x03d09000
 8007af4:	003d0900 	.word	0x003d0900
 8007af8:	0800e6f4 	.word	0x0800e6f4

08007afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00a      	beq.n	8007b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01a      	beq.n	8007c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bfa:	d10a      	bne.n	8007c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	605a      	str	r2, [r3, #4]
  }
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b098      	sub	sp, #96	@ 0x60
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c50:	f7f9 fc50 	bl	80014f4 <HAL_GetTick>
 8007c54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d12f      	bne.n	8007cc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f88e 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d022      	beq.n	8007cc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e6      	bne.n	8007c7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e063      	b.n	8007d8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d149      	bne.n	8007d66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f857 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d03c      	beq.n	8007d66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e6      	bne.n	8007cec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3308      	adds	r3, #8
 8007d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f023 0301 	bic.w	r3, r3, #1
 8007d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d3e:	61fa      	str	r2, [r7, #28]
 8007d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	69b9      	ldr	r1, [r7, #24]
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e5      	bne.n	8007d1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e012      	b.n	8007d8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3758      	adds	r7, #88	@ 0x58
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	4613      	mov	r3, r2
 8007da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da4:	e04f      	b.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d04b      	beq.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dae:	f7f9 fba1 	bl	80014f4 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e04e      	b.n	8007e66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d037      	beq.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b80      	cmp	r3, #128	@ 0x80
 8007dda:	d034      	beq.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b40      	cmp	r3, #64	@ 0x40
 8007de0:	d031      	beq.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d110      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2208      	movs	r2, #8
 8007df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f839 	bl	8007e70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2208      	movs	r2, #8
 8007e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e029      	b.n	8007e66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e20:	d111      	bne.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 f81f 	bl	8007e70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e00f      	b.n	8007e66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69da      	ldr	r2, [r3, #28]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	bf0c      	ite	eq
 8007e56:	2301      	moveq	r3, #1
 8007e58:	2300      	movne	r3, #0
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d0a0      	beq.n	8007da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b095      	sub	sp, #84	@ 0x54
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e96:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e6      	bne.n	8007e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8007f38 <UART_EndRxTransfer+0xc8>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e5      	bne.n	8007eaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d118      	bne.n	8007f18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f023 0310 	bic.w	r3, r3, #16
 8007efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6979      	ldr	r1, [r7, #20]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	613b      	str	r3, [r7, #16]
   return(result);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e6      	bne.n	8007ee6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f2c:	bf00      	nop
 8007f2e:	3754      	adds	r7, #84	@ 0x54
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	effffffe 	.word	0xeffffffe

08007f3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d101      	bne.n	8007f52 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e027      	b.n	8007fa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2224      	movs	r2, #36	@ 0x24
 8007f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0201 	bic.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e02d      	b.n	8008022 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2224      	movs	r2, #36	@ 0x24
 8007fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0201 	bic.w	r2, r2, #1
 8007fec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f850 	bl	80080a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2220      	movs	r2, #32
 8008014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800803e:	2302      	movs	r3, #2
 8008040:	e02d      	b.n	800809e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2224      	movs	r2, #36	@ 0x24
 800804e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0201 	bic.w	r2, r2, #1
 8008068:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f812 	bl	80080a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d108      	bne.n	80080ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080c8:	e031      	b.n	800812e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080ca:	2310      	movs	r3, #16
 80080cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080ce:	2310      	movs	r3, #16
 80080d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	0e5b      	lsrs	r3, r3, #25
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	0f5b      	lsrs	r3, r3, #29
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	7b3a      	ldrb	r2, [r7, #12]
 80080f6:	4911      	ldr	r1, [pc, #68]	@ (800813c <UARTEx_SetNbDataToProcess+0x94>)
 80080f8:	5c8a      	ldrb	r2, [r1, r2]
 80080fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080fe:	7b3a      	ldrb	r2, [r7, #12]
 8008100:	490f      	ldr	r1, [pc, #60]	@ (8008140 <UARTEx_SetNbDataToProcess+0x98>)
 8008102:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008104:	fb93 f3f2 	sdiv	r3, r3, r2
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	7b7a      	ldrb	r2, [r7, #13]
 8008114:	4909      	ldr	r1, [pc, #36]	@ (800813c <UARTEx_SetNbDataToProcess+0x94>)
 8008116:	5c8a      	ldrb	r2, [r1, r2]
 8008118:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800811c:	7b7a      	ldrb	r2, [r7, #13]
 800811e:	4908      	ldr	r1, [pc, #32]	@ (8008140 <UARTEx_SetNbDataToProcess+0x98>)
 8008120:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008122:	fb93 f3f2 	sdiv	r3, r3, r2
 8008126:	b29a      	uxth	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800812e:	bf00      	nop
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	0800e70c 	.word	0x0800e70c
 8008140:	0800e714 	.word	0x0800e714

08008144 <__NVIC_SetPriority>:
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	6039      	str	r1, [r7, #0]
 800814e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008154:	2b00      	cmp	r3, #0
 8008156:	db0a      	blt.n	800816e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	b2da      	uxtb	r2, r3
 800815c:	490c      	ldr	r1, [pc, #48]	@ (8008190 <__NVIC_SetPriority+0x4c>)
 800815e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008162:	0112      	lsls	r2, r2, #4
 8008164:	b2d2      	uxtb	r2, r2
 8008166:	440b      	add	r3, r1
 8008168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800816c:	e00a      	b.n	8008184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	b2da      	uxtb	r2, r3
 8008172:	4908      	ldr	r1, [pc, #32]	@ (8008194 <__NVIC_SetPriority+0x50>)
 8008174:	88fb      	ldrh	r3, [r7, #6]
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	3b04      	subs	r3, #4
 800817c:	0112      	lsls	r2, r2, #4
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	440b      	add	r3, r1
 8008182:	761a      	strb	r2, [r3, #24]
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	e000e100 	.word	0xe000e100
 8008194:	e000ed00 	.word	0xe000ed00

08008198 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800819c:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <SysTick_Handler+0x1c>)
 800819e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081a0:	f002 fb88 	bl	800a8b4 <xTaskGetSchedulerState>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d001      	beq.n	80081ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081aa:	f003 fb3d 	bl	800b828 <xPortSysTickHandler>
  }
}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	e000e010 	.word	0xe000e010

080081b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081bc:	2100      	movs	r1, #0
 80081be:	f06f 0004 	mvn.w	r0, #4
 80081c2:	f7ff ffbf 	bl	8008144 <__NVIC_SetPriority>
#endif
}
 80081c6:	bf00      	nop
 80081c8:	bd80      	pop	{r7, pc}
	...

080081cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d2:	f3ef 8305 	mrs	r3, IPSR
 80081d6:	603b      	str	r3, [r7, #0]
  return(result);
 80081d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081de:	f06f 0305 	mvn.w	r3, #5
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	e00c      	b.n	8008200 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008210 <osKernelInitialize+0x44>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081ee:	4b08      	ldr	r3, [pc, #32]	@ (8008210 <osKernelInitialize+0x44>)
 80081f0:	2201      	movs	r2, #1
 80081f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	e002      	b.n	8008200 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081fa:	f04f 33ff 	mov.w	r3, #4294967295
 80081fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008200:	687b      	ldr	r3, [r7, #4]
}
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	240012fc 	.word	0x240012fc

08008214 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800821a:	f3ef 8305 	mrs	r3, IPSR
 800821e:	603b      	str	r3, [r7, #0]
  return(result);
 8008220:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008226:	f06f 0305 	mvn.w	r3, #5
 800822a:	607b      	str	r3, [r7, #4]
 800822c:	e010      	b.n	8008250 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800822e:	4b0b      	ldr	r3, [pc, #44]	@ (800825c <osKernelStart+0x48>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d109      	bne.n	800824a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008236:	f7ff ffbf 	bl	80081b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800823a:	4b08      	ldr	r3, [pc, #32]	@ (800825c <osKernelStart+0x48>)
 800823c:	2202      	movs	r2, #2
 800823e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008240:	f001 fed4 	bl	8009fec <vTaskStartScheduler>
      stat = osOK;
 8008244:	2300      	movs	r3, #0
 8008246:	607b      	str	r3, [r7, #4]
 8008248:	e002      	b.n	8008250 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008250:	687b      	ldr	r3, [r7, #4]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	240012fc 	.word	0x240012fc

08008260 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008260:	b580      	push	{r7, lr}
 8008262:	b08e      	sub	sp, #56	@ 0x38
 8008264:	af04      	add	r7, sp, #16
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800826c:	2300      	movs	r3, #0
 800826e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008270:	f3ef 8305 	mrs	r3, IPSR
 8008274:	617b      	str	r3, [r7, #20]
  return(result);
 8008276:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008278:	2b00      	cmp	r3, #0
 800827a:	d17e      	bne.n	800837a <osThreadNew+0x11a>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d07b      	beq.n	800837a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008282:	2380      	movs	r3, #128	@ 0x80
 8008284:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008286:	2318      	movs	r3, #24
 8008288:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800828e:	f04f 33ff 	mov.w	r3, #4294967295
 8008292:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d045      	beq.n	8008326 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <osThreadNew+0x48>
        name = attr->name;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d008      	beq.n	80082ce <osThreadNew+0x6e>
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2b38      	cmp	r3, #56	@ 0x38
 80082c0:	d805      	bhi.n	80082ce <osThreadNew+0x6e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <osThreadNew+0x72>
        return (NULL);
 80082ce:	2300      	movs	r3, #0
 80082d0:	e054      	b.n	800837c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	089b      	lsrs	r3, r3, #2
 80082e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00e      	beq.n	8008308 <osThreadNew+0xa8>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	2ba7      	cmp	r3, #167	@ 0xa7
 80082f0:	d90a      	bls.n	8008308 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d006      	beq.n	8008308 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <osThreadNew+0xa8>
        mem = 1;
 8008302:	2301      	movs	r3, #1
 8008304:	61bb      	str	r3, [r7, #24]
 8008306:	e010      	b.n	800832a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10c      	bne.n	800832a <osThreadNew+0xca>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d108      	bne.n	800832a <osThreadNew+0xca>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d104      	bne.n	800832a <osThreadNew+0xca>
          mem = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	61bb      	str	r3, [r7, #24]
 8008324:	e001      	b.n	800832a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d110      	bne.n	8008352 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008338:	9202      	str	r2, [sp, #8]
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6a3a      	ldr	r2, [r7, #32]
 8008344:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f001 fc5c 	bl	8009c04 <xTaskCreateStatic>
 800834c:	4603      	mov	r3, r0
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	e013      	b.n	800837a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d110      	bne.n	800837a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	b29a      	uxth	r2, r3
 800835c:	f107 0310 	add.w	r3, r7, #16
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f001 fcaa 	bl	8009cc4 <xTaskCreate>
 8008370:	4603      	mov	r3, r0
 8008372:	2b01      	cmp	r3, #1
 8008374:	d001      	beq.n	800837a <osThreadNew+0x11a>
            hTask = NULL;
 8008376:	2300      	movs	r3, #0
 8008378:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800837a:	693b      	ldr	r3, [r7, #16]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3728      	adds	r7, #40	@ 0x28
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800838c:	f3ef 8305 	mrs	r3, IPSR
 8008390:	60bb      	str	r3, [r7, #8]
  return(result);
 8008392:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <osDelay+0x1c>
    stat = osErrorISR;
 8008398:	f06f 0305 	mvn.w	r3, #5
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e007      	b.n	80083b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 fde8 	bl	8009f80 <vTaskDelay>
    }
  }

  return (stat);
 80083b0:	68fb      	ldr	r3, [r7, #12]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f003 f850 	bl	800b468 <pvTimerGetTimerID>
 80083c8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <TimerCallback+0x22>
    callb->func (callb->arg);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	6852      	ldr	r2, [r2, #4]
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
  }
}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08c      	sub	sp, #48	@ 0x30
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	460b      	mov	r3, r1
 80083f2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80083f4:	2300      	movs	r3, #0
 80083f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083f8:	f3ef 8305 	mrs	r3, IPSR
 80083fc:	613b      	str	r3, [r7, #16]
  return(result);
 80083fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008400:	2b00      	cmp	r3, #0
 8008402:	d163      	bne.n	80084cc <osTimerNew+0xe8>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d060      	beq.n	80084cc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800840a:	2008      	movs	r0, #8
 800840c:	f003 fa9e 	bl	800b94c <pvPortMalloc>
 8008410:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d059      	beq.n	80084cc <osTimerNew+0xe8>
      callb->func = func;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <osTimerNew+0x4c>
        reload = pdFALSE;
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	e001      	b.n	8008434 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008430:	2301      	movs	r3, #1
 8008432:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008434:	f04f 33ff 	mov.w	r3, #4294967295
 8008438:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01c      	beq.n	800847e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <osTimerNew+0x6e>
          name = attr->name;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d006      	beq.n	8008468 <osTimerNew+0x84>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008460:	d902      	bls.n	8008468 <osTimerNew+0x84>
          mem = 1;
 8008462:	2301      	movs	r3, #1
 8008464:	61bb      	str	r3, [r7, #24]
 8008466:	e00c      	b.n	8008482 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d108      	bne.n	8008482 <osTimerNew+0x9e>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <osTimerNew+0x9e>
            mem = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	61bb      	str	r3, [r7, #24]
 800847c:	e001      	b.n	8008482 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d10c      	bne.n	80084a2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	4b12      	ldr	r3, [pc, #72]	@ (80084d8 <osTimerNew+0xf4>)
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	69fa      	ldr	r2, [r7, #28]
 8008496:	2101      	movs	r1, #1
 8008498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800849a:	f002 fc58 	bl	800ad4e <xTimerCreateStatic>
 800849e:	6238      	str	r0, [r7, #32]
 80084a0:	e00b      	b.n	80084ba <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d108      	bne.n	80084ba <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80084a8:	4b0b      	ldr	r3, [pc, #44]	@ (80084d8 <osTimerNew+0xf4>)
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	69fa      	ldr	r2, [r7, #28]
 80084b0:	2101      	movs	r1, #1
 80084b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084b4:	f002 fc2a 	bl	800ad0c <xTimerCreate>
 80084b8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d105      	bne.n	80084cc <osTimerNew+0xe8>
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <osTimerNew+0xe8>
        vPortFree (callb);
 80084c6:	6978      	ldr	r0, [r7, #20]
 80084c8:	f003 fb0e 	bl	800bae8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80084cc:	6a3b      	ldr	r3, [r7, #32]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3728      	adds	r7, #40	@ 0x28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	080083bb 	.word	0x080083bb

080084dc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ea:	f3ef 8305 	mrs	r3, IPSR
 80084ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80084f0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <osTimerStart+0x22>
    stat = osErrorISR;
 80084f6:	f06f 0305 	mvn.w	r3, #5
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	e017      	b.n	800852e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <osTimerStart+0x30>
    stat = osErrorParameter;
 8008504:	f06f 0303 	mvn.w	r3, #3
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	e010      	b.n	800852e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800850c:	2300      	movs	r3, #0
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	2300      	movs	r3, #0
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	2104      	movs	r1, #4
 8008516:	6938      	ldr	r0, [r7, #16]
 8008518:	f002 fc96 	bl	800ae48 <xTimerGenericCommand>
 800851c:	4603      	mov	r3, r0
 800851e:	2b01      	cmp	r3, #1
 8008520:	d102      	bne.n	8008528 <osTimerStart+0x4c>
      stat = osOK;
 8008522:	2300      	movs	r3, #0
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	e002      	b.n	800852e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8008528:	f06f 0302 	mvn.w	r3, #2
 800852c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800852e:	697b      	ldr	r3, [r7, #20]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008538:	b580      	push	{r7, lr}
 800853a:	b08a      	sub	sp, #40	@ 0x28
 800853c:	af02      	add	r7, sp, #8
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008544:	2300      	movs	r3, #0
 8008546:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008548:	f3ef 8305 	mrs	r3, IPSR
 800854c:	613b      	str	r3, [r7, #16]
  return(result);
 800854e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008550:	2b00      	cmp	r3, #0
 8008552:	d175      	bne.n	8008640 <osSemaphoreNew+0x108>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d072      	beq.n	8008640 <osSemaphoreNew+0x108>
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	429a      	cmp	r2, r3
 8008560:	d86e      	bhi.n	8008640 <osSemaphoreNew+0x108>
    mem = -1;
 8008562:	f04f 33ff 	mov.w	r3, #4294967295
 8008566:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d015      	beq.n	800859a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d006      	beq.n	8008584 <osSemaphoreNew+0x4c>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	2b4f      	cmp	r3, #79	@ 0x4f
 800857c:	d902      	bls.n	8008584 <osSemaphoreNew+0x4c>
        mem = 1;
 800857e:	2301      	movs	r3, #1
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	e00c      	b.n	800859e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d108      	bne.n	800859e <osSemaphoreNew+0x66>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d104      	bne.n	800859e <osSemaphoreNew+0x66>
          mem = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	61bb      	str	r3, [r7, #24]
 8008598:	e001      	b.n	800859e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d04c      	beq.n	8008640 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d128      	bne.n	80085fe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d10a      	bne.n	80085c8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2203      	movs	r2, #3
 80085b8:	9200      	str	r2, [sp, #0]
 80085ba:	2200      	movs	r2, #0
 80085bc:	2100      	movs	r1, #0
 80085be:	2001      	movs	r0, #1
 80085c0:	f000 fb5e 	bl	8008c80 <xQueueGenericCreateStatic>
 80085c4:	61f8      	str	r0, [r7, #28]
 80085c6:	e005      	b.n	80085d4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80085c8:	2203      	movs	r2, #3
 80085ca:	2100      	movs	r1, #0
 80085cc:	2001      	movs	r0, #1
 80085ce:	f000 fbd4 	bl	8008d7a <xQueueGenericCreate>
 80085d2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d022      	beq.n	8008620 <osSemaphoreNew+0xe8>
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01f      	beq.n	8008620 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80085e0:	2300      	movs	r3, #0
 80085e2:	2200      	movs	r2, #0
 80085e4:	2100      	movs	r1, #0
 80085e6:	69f8      	ldr	r0, [r7, #28]
 80085e8:	f000 fc94 	bl	8008f14 <xQueueGenericSend>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d016      	beq.n	8008620 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80085f2:	69f8      	ldr	r0, [r7, #28]
 80085f4:	f001 f932 	bl	800985c <vQueueDelete>
            hSemaphore = NULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	e010      	b.n	8008620 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d108      	bne.n	8008616 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	461a      	mov	r2, r3
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 fc12 	bl	8008e36 <xQueueCreateCountingSemaphoreStatic>
 8008612:	61f8      	str	r0, [r7, #28]
 8008614:	e004      	b.n	8008620 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 fc45 	bl	8008ea8 <xQueueCreateCountingSemaphore>
 800861e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00c      	beq.n	8008640 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d003      	beq.n	8008634 <osSemaphoreNew+0xfc>
          name = attr->name;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e001      	b.n	8008638 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008638:	6979      	ldr	r1, [r7, #20]
 800863a:	69f8      	ldr	r0, [r7, #28]
 800863c:	f001 fa5a 	bl	8009af4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008640:	69fb      	ldr	r3, [r7, #28]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3720      	adds	r7, #32
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800865a:	2300      	movs	r3, #0
 800865c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d103      	bne.n	800866c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008664:	f06f 0303 	mvn.w	r3, #3
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	e039      	b.n	80086e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800866c:	f3ef 8305 	mrs	r3, IPSR
 8008670:	60fb      	str	r3, [r7, #12]
  return(result);
 8008672:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008674:	2b00      	cmp	r3, #0
 8008676:	d022      	beq.n	80086be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800867e:	f06f 0303 	mvn.w	r3, #3
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e02c      	b.n	80086e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008686:	2300      	movs	r3, #0
 8008688:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800868a:	f107 0308 	add.w	r3, r7, #8
 800868e:	461a      	mov	r2, r3
 8008690:	2100      	movs	r1, #0
 8008692:	6938      	ldr	r0, [r7, #16]
 8008694:	f001 f860 	bl	8009758 <xQueueReceiveFromISR>
 8008698:	4603      	mov	r3, r0
 800869a:	2b01      	cmp	r3, #1
 800869c:	d003      	beq.n	80086a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800869e:	f06f 0302 	mvn.w	r3, #2
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e01c      	b.n	80086e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d019      	beq.n	80086e0 <osSemaphoreAcquire+0x94>
 80086ac:	4b0f      	ldr	r3, [pc, #60]	@ (80086ec <osSemaphoreAcquire+0xa0>)
 80086ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	e010      	b.n	80086e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6938      	ldr	r0, [r7, #16]
 80086c2:	f000 ff39 	bl	8009538 <xQueueSemaphoreTake>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d009      	beq.n	80086e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80086d2:	f06f 0301 	mvn.w	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	e002      	b.n	80086e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80086da:	f06f 0302 	mvn.w	r3, #2
 80086de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80086e0:	697b      	ldr	r3, [r7, #20]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d103      	bne.n	800870e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008706:	f06f 0303 	mvn.w	r3, #3
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	e02c      	b.n	8008768 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800870e:	f3ef 8305 	mrs	r3, IPSR
 8008712:	60fb      	str	r3, [r7, #12]
  return(result);
 8008714:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008716:	2b00      	cmp	r3, #0
 8008718:	d01a      	beq.n	8008750 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800871a:	2300      	movs	r3, #0
 800871c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800871e:	f107 0308 	add.w	r3, r7, #8
 8008722:	4619      	mov	r1, r3
 8008724:	6938      	ldr	r0, [r7, #16]
 8008726:	f000 fd95 	bl	8009254 <xQueueGiveFromISR>
 800872a:	4603      	mov	r3, r0
 800872c:	2b01      	cmp	r3, #1
 800872e:	d003      	beq.n	8008738 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008730:	f06f 0302 	mvn.w	r3, #2
 8008734:	617b      	str	r3, [r7, #20]
 8008736:	e017      	b.n	8008768 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d014      	beq.n	8008768 <osSemaphoreRelease+0x78>
 800873e:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <osSemaphoreRelease+0x84>)
 8008740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	e00b      	b.n	8008768 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008750:	2300      	movs	r3, #0
 8008752:	2200      	movs	r2, #0
 8008754:	2100      	movs	r1, #0
 8008756:	6938      	ldr	r0, [r7, #16]
 8008758:	f000 fbdc 	bl	8008f14 <xQueueGenericSend>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d002      	beq.n	8008768 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008762:	f06f 0302 	mvn.w	r3, #2
 8008766:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008768:	697b      	ldr	r3, [r7, #20]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	e000ed04 	.word	0xe000ed04

08008778 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	@ 0x28
 800877c:	af02      	add	r7, sp, #8
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008784:	2300      	movs	r3, #0
 8008786:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008788:	f3ef 8305 	mrs	r3, IPSR
 800878c:	613b      	str	r3, [r7, #16]
  return(result);
 800878e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008790:	2b00      	cmp	r3, #0
 8008792:	d15f      	bne.n	8008854 <osMessageQueueNew+0xdc>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d05c      	beq.n	8008854 <osMessageQueueNew+0xdc>
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d059      	beq.n	8008854 <osMessageQueueNew+0xdc>
    mem = -1;
 80087a0:	f04f 33ff 	mov.w	r3, #4294967295
 80087a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d029      	beq.n	8008800 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d012      	beq.n	80087da <osMessageQueueNew+0x62>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80087ba:	d90e      	bls.n	80087da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00a      	beq.n	80087da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	695a      	ldr	r2, [r3, #20]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d302      	bcc.n	80087da <osMessageQueueNew+0x62>
        mem = 1;
 80087d4:	2301      	movs	r3, #1
 80087d6:	61bb      	str	r3, [r7, #24]
 80087d8:	e014      	b.n	8008804 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d110      	bne.n	8008804 <osMessageQueueNew+0x8c>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10c      	bne.n	8008804 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d108      	bne.n	8008804 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d104      	bne.n	8008804 <osMessageQueueNew+0x8c>
          mem = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	e001      	b.n	8008804 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d10b      	bne.n	8008822 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2100      	movs	r1, #0
 8008814:	9100      	str	r1, [sp, #0]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fa31 	bl	8008c80 <xQueueGenericCreateStatic>
 800881e:	61f8      	str	r0, [r7, #28]
 8008820:	e008      	b.n	8008834 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d105      	bne.n	8008834 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008828:	2200      	movs	r2, #0
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 faa4 	bl	8008d7a <xQueueGenericCreate>
 8008832:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00c      	beq.n	8008854 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	617b      	str	r3, [r7, #20]
 8008846:	e001      	b.n	800884c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008848:	2300      	movs	r3, #0
 800884a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800884c:	6979      	ldr	r1, [r7, #20]
 800884e:	69f8      	ldr	r0, [r7, #28]
 8008850:	f001 f950 	bl	8009af4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008854:	69fb      	ldr	r3, [r7, #28]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3720      	adds	r7, #32
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	4613      	mov	r3, r2
 800886e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008874:	2300      	movs	r3, #0
 8008876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008878:	f3ef 8305 	mrs	r3, IPSR
 800887c:	617b      	str	r3, [r7, #20]
  return(result);
 800887e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008880:	2b00      	cmp	r3, #0
 8008882:	d028      	beq.n	80088d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <osMessageQueuePut+0x36>
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <osMessageQueuePut+0x36>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008896:	f06f 0303 	mvn.w	r3, #3
 800889a:	61fb      	str	r3, [r7, #28]
 800889c:	e038      	b.n	8008910 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800889e:	2300      	movs	r3, #0
 80088a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80088a2:	f107 0210 	add.w	r2, r7, #16
 80088a6:	2300      	movs	r3, #0
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	69b8      	ldr	r0, [r7, #24]
 80088ac:	f000 fc34 	bl	8009118 <xQueueGenericSendFromISR>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d003      	beq.n	80088be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80088b6:	f06f 0302 	mvn.w	r3, #2
 80088ba:	61fb      	str	r3, [r7, #28]
 80088bc:	e028      	b.n	8008910 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d025      	beq.n	8008910 <osMessageQueuePut+0xb0>
 80088c4:	4b15      	ldr	r3, [pc, #84]	@ (800891c <osMessageQueuePut+0xbc>)
 80088c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	e01c      	b.n	8008910 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <osMessageQueuePut+0x82>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d103      	bne.n	80088ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80088e2:	f06f 0303 	mvn.w	r3, #3
 80088e6:	61fb      	str	r3, [r7, #28]
 80088e8:	e012      	b.n	8008910 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088ea:	2300      	movs	r3, #0
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	69b8      	ldr	r0, [r7, #24]
 80088f2:	f000 fb0f 	bl	8008f14 <xQueueGenericSend>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d009      	beq.n	8008910 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008902:	f06f 0301 	mvn.w	r3, #1
 8008906:	61fb      	str	r3, [r7, #28]
 8008908:	e002      	b.n	8008910 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800890a:	f06f 0302 	mvn.w	r3, #2
 800890e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008910:	69fb      	ldr	r3, [r7, #28]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	e000ed04 	.word	0xe000ed04

08008920 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008932:	2300      	movs	r3, #0
 8008934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008936:	f3ef 8305 	mrs	r3, IPSR
 800893a:	617b      	str	r3, [r7, #20]
  return(result);
 800893c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800893e:	2b00      	cmp	r3, #0
 8008940:	d028      	beq.n	8008994 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <osMessageQueueGet+0x34>
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <osMessageQueueGet+0x34>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008954:	f06f 0303 	mvn.w	r3, #3
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	e037      	b.n	80089cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800895c:	2300      	movs	r3, #0
 800895e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008960:	f107 0310 	add.w	r3, r7, #16
 8008964:	461a      	mov	r2, r3
 8008966:	68b9      	ldr	r1, [r7, #8]
 8008968:	69b8      	ldr	r0, [r7, #24]
 800896a:	f000 fef5 	bl	8009758 <xQueueReceiveFromISR>
 800896e:	4603      	mov	r3, r0
 8008970:	2b01      	cmp	r3, #1
 8008972:	d003      	beq.n	800897c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008974:	f06f 0302 	mvn.w	r3, #2
 8008978:	61fb      	str	r3, [r7, #28]
 800897a:	e027      	b.n	80089cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d024      	beq.n	80089cc <osMessageQueueGet+0xac>
 8008982:	4b15      	ldr	r3, [pc, #84]	@ (80089d8 <osMessageQueueGet+0xb8>)
 8008984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	e01b      	b.n	80089cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <osMessageQueueGet+0x80>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d103      	bne.n	80089a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80089a0:	f06f 0303 	mvn.w	r3, #3
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	e011      	b.n	80089cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	69b8      	ldr	r0, [r7, #24]
 80089ae:	f000 fce1 	bl	8009374 <xQueueReceive>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d009      	beq.n	80089cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80089be:	f06f 0301 	mvn.w	r3, #1
 80089c2:	61fb      	str	r3, [r7, #28]
 80089c4:	e002      	b.n	80089cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80089c6:	f06f 0302 	mvn.w	r3, #2
 80089ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80089cc:	69fb      	ldr	r3, [r7, #28]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3720      	adds	r7, #32
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4a07      	ldr	r2, [pc, #28]	@ (8008a08 <vApplicationGetIdleTaskMemory+0x2c>)
 80089ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4a06      	ldr	r2, [pc, #24]	@ (8008a0c <vApplicationGetIdleTaskMemory+0x30>)
 80089f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2280      	movs	r2, #128	@ 0x80
 80089f8:	601a      	str	r2, [r3, #0]
}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	24001300 	.word	0x24001300
 8008a0c:	240013a8 	.word	0x240013a8

08008a10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4a07      	ldr	r2, [pc, #28]	@ (8008a3c <vApplicationGetTimerTaskMemory+0x2c>)
 8008a20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	4a06      	ldr	r2, [pc, #24]	@ (8008a40 <vApplicationGetTimerTaskMemory+0x30>)
 8008a26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a2e:	601a      	str	r2, [r3, #0]
}
 8008a30:	bf00      	nop
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	240015a8 	.word	0x240015a8
 8008a40:	24001650 	.word	0x24001650

08008a44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f103 0208 	add.w	r2, r3, #8
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f103 0208 	add.w	r2, r3, #8
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f103 0208 	add.w	r2, r3, #8
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a92:	bf00      	nop
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	601a      	str	r2, [r3, #0]
}
 8008ada:	bf00      	nop
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b085      	sub	sp, #20
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afc:	d103      	bne.n	8008b06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	e00c      	b.n	8008b20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	e002      	b.n	8008b14 <vListInsert+0x2e>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d2f6      	bcs.n	8008b0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	601a      	str	r2, [r3, #0]
}
 8008b4c:	bf00      	nop
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	6892      	ldr	r2, [r2, #8]
 8008b6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6852      	ldr	r2, [r2, #4]
 8008b78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d103      	bne.n	8008b8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	1e5a      	subs	r2, r3, #1
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008bd8:	f002 fd96 	bl	800b708 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be4:	68f9      	ldr	r1, [r7, #12]
 8008be6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	68f9      	ldr	r1, [r7, #12]
 8008c0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008c0e:	fb01 f303 	mul.w	r3, r1, r3
 8008c12:	441a      	add	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	22ff      	movs	r2, #255	@ 0xff
 8008c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	22ff      	movs	r2, #255	@ 0xff
 8008c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d114      	bne.n	8008c58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d01a      	beq.n	8008c6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3310      	adds	r3, #16
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f001 fc74 	bl	800a528 <xTaskRemoveFromEventList>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d012      	beq.n	8008c6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c46:	4b0d      	ldr	r3, [pc, #52]	@ (8008c7c <xQueueGenericReset+0xd0>)
 8008c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	e009      	b.n	8008c6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3310      	adds	r3, #16
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff fef1 	bl	8008a44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3324      	adds	r3, #36	@ 0x24
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff feec 	bl	8008a44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c6c:	f002 fd7e 	bl	800b76c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c70:	2301      	movs	r3, #1
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	e000ed04 	.word	0xe000ed04

08008c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08e      	sub	sp, #56	@ 0x38
 8008c84:	af02      	add	r7, sp, #8
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10b      	bne.n	8008cac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	e7fd      	b.n	8008ca8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10b      	bne.n	8008cca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	e7fd      	b.n	8008cc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <xQueueGenericCreateStatic+0x56>
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <xQueueGenericCreateStatic+0x5a>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e000      	b.n	8008cdc <xQueueGenericCreateStatic+0x5c>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10b      	bne.n	8008cf8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	623b      	str	r3, [r7, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	bf00      	nop
 8008cf6:	e7fd      	b.n	8008cf4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d102      	bne.n	8008d04 <xQueueGenericCreateStatic+0x84>
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <xQueueGenericCreateStatic+0x88>
 8008d04:	2301      	movs	r3, #1
 8008d06:	e000      	b.n	8008d0a <xQueueGenericCreateStatic+0x8a>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10b      	bne.n	8008d26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	61fb      	str	r3, [r7, #28]
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	e7fd      	b.n	8008d22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d26:	2350      	movs	r3, #80	@ 0x50
 8008d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b50      	cmp	r3, #80	@ 0x50
 8008d2e:	d00b      	beq.n	8008d48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	61bb      	str	r3, [r7, #24]
}
 8008d42:	bf00      	nop
 8008d44:	bf00      	nop
 8008d46:	e7fd      	b.n	8008d44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00d      	beq.n	8008d70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	4613      	mov	r3, r2
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f840 	bl	8008df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3730      	adds	r7, #48	@ 0x30
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b08a      	sub	sp, #40	@ 0x28
 8008d7e:	af02      	add	r7, sp, #8
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	4613      	mov	r3, r2
 8008d86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10b      	bne.n	8008da6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	613b      	str	r3, [r7, #16]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	fb02 f303 	mul.w	r3, r2, r3
 8008dae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	3350      	adds	r3, #80	@ 0x50
 8008db4:	4618      	mov	r0, r3
 8008db6:	f002 fdc9 	bl	800b94c <pvPortMalloc>
 8008dba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d011      	beq.n	8008de6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	3350      	adds	r3, #80	@ 0x50
 8008dca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008dd4:	79fa      	ldrb	r2, [r7, #7]
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	68b9      	ldr	r1, [r7, #8]
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 f805 	bl	8008df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008de6:	69bb      	ldr	r3, [r7, #24]
	}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d103      	bne.n	8008e0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	e002      	b.n	8008e12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e1e:	2101      	movs	r1, #1
 8008e20:	69b8      	ldr	r0, [r7, #24]
 8008e22:	f7ff fec3 	bl	8008bac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	78fa      	ldrb	r2, [r7, #3]
 8008e2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b08a      	sub	sp, #40	@ 0x28
 8008e3a:	af02      	add	r7, sp, #8
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	60b9      	str	r1, [r7, #8]
 8008e40:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10b      	bne.n	8008e60 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	61bb      	str	r3, [r7, #24]
}
 8008e5a:	bf00      	nop
 8008e5c:	bf00      	nop
 8008e5e:	e7fd      	b.n	8008e5c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d90b      	bls.n	8008e80 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	617b      	str	r3, [r7, #20]
}
 8008e7a:	bf00      	nop
 8008e7c:	bf00      	nop
 8008e7e:	e7fd      	b.n	8008e7c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e80:	2302      	movs	r3, #2
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	2100      	movs	r1, #0
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f7ff fef8 	bl	8008c80 <xQueueGenericCreateStatic>
 8008e90:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
	}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	613b      	str	r3, [r7, #16]
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d90b      	bls.n	8008ef0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	60fb      	str	r3, [r7, #12]
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	e7fd      	b.n	8008eec <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff ff40 	bl	8008d7a <xQueueGenericCreate>
 8008efa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f08:	697b      	ldr	r3, [r7, #20]
	}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08e      	sub	sp, #56	@ 0x38
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f22:	2300      	movs	r3, #0
 8008f24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10b      	bne.n	8008f48 <xQueueGenericSend+0x34>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	e7fd      	b.n	8008f44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d103      	bne.n	8008f56 <xQueueGenericSend+0x42>
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <xQueueGenericSend+0x46>
 8008f56:	2301      	movs	r3, #1
 8008f58:	e000      	b.n	8008f5c <xQueueGenericSend+0x48>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10b      	bne.n	8008f78 <xQueueGenericSend+0x64>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	e7fd      	b.n	8008f74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d103      	bne.n	8008f86 <xQueueGenericSend+0x72>
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <xQueueGenericSend+0x76>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <xQueueGenericSend+0x78>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10b      	bne.n	8008fa8 <xQueueGenericSend+0x94>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	623b      	str	r3, [r7, #32]
}
 8008fa2:	bf00      	nop
 8008fa4:	bf00      	nop
 8008fa6:	e7fd      	b.n	8008fa4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fa8:	f001 fc84 	bl	800a8b4 <xTaskGetSchedulerState>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d102      	bne.n	8008fb8 <xQueueGenericSend+0xa4>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <xQueueGenericSend+0xa8>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e000      	b.n	8008fbe <xQueueGenericSend+0xaa>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10b      	bne.n	8008fda <xQueueGenericSend+0xc6>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	61fb      	str	r3, [r7, #28]
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	e7fd      	b.n	8008fd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fda:	f002 fb95 	bl	800b708 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d302      	bcc.n	8008ff0 <xQueueGenericSend+0xdc>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d129      	bne.n	8009044 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	68b9      	ldr	r1, [r7, #8]
 8008ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ff6:	f000 fc6d 	bl	80098d4 <prvCopyDataToQueue>
 8008ffa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	d010      	beq.n	8009026 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009006:	3324      	adds	r3, #36	@ 0x24
 8009008:	4618      	mov	r0, r3
 800900a:	f001 fa8d 	bl	800a528 <xTaskRemoveFromEventList>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d013      	beq.n	800903c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009014:	4b3f      	ldr	r3, [pc, #252]	@ (8009114 <xQueueGenericSend+0x200>)
 8009016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	e00a      	b.n	800903c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800902c:	4b39      	ldr	r3, [pc, #228]	@ (8009114 <xQueueGenericSend+0x200>)
 800902e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800903c:	f002 fb96 	bl	800b76c <vPortExitCritical>
				return pdPASS;
 8009040:	2301      	movs	r3, #1
 8009042:	e063      	b.n	800910c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800904a:	f002 fb8f 	bl	800b76c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800904e:	2300      	movs	r3, #0
 8009050:	e05c      	b.n	800910c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009054:	2b00      	cmp	r3, #0
 8009056:	d106      	bne.n	8009066 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009058:	f107 0314 	add.w	r3, r7, #20
 800905c:	4618      	mov	r0, r3
 800905e:	f001 fac7 	bl	800a5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009062:	2301      	movs	r3, #1
 8009064:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009066:	f002 fb81 	bl	800b76c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800906a:	f001 f82f 	bl	800a0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800906e:	f002 fb4b 	bl	800b708 <vPortEnterCritical>
 8009072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009078:	b25b      	sxtb	r3, r3
 800907a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907e:	d103      	bne.n	8009088 <xQueueGenericSend+0x174>
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800908e:	b25b      	sxtb	r3, r3
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d103      	bne.n	800909e <xQueueGenericSend+0x18a>
 8009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800909e:	f002 fb65 	bl	800b76c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090a2:	1d3a      	adds	r2, r7, #4
 80090a4:	f107 0314 	add.w	r3, r7, #20
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 fab6 	bl	800a61c <xTaskCheckForTimeOut>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d124      	bne.n	8009100 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090b8:	f000 fd04 	bl	8009ac4 <prvIsQueueFull>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d018      	beq.n	80090f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	3310      	adds	r3, #16
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f001 f9da 	bl	800a484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090d2:	f000 fc8f 	bl	80099f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090d6:	f001 f807 	bl	800a0e8 <xTaskResumeAll>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f47f af7c 	bne.w	8008fda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80090e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009114 <xQueueGenericSend+0x200>)
 80090e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	e772      	b.n	8008fda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090f6:	f000 fc7d 	bl	80099f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090fa:	f000 fff5 	bl	800a0e8 <xTaskResumeAll>
 80090fe:	e76c      	b.n	8008fda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009100:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009102:	f000 fc77 	bl	80099f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009106:	f000 ffef 	bl	800a0e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800910a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800910c:	4618      	mov	r0, r3
 800910e:	3738      	adds	r7, #56	@ 0x38
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	e000ed04 	.word	0xe000ed04

08009118 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b090      	sub	sp, #64	@ 0x40
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800912a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10b      	bne.n	8009148 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	e7fd      	b.n	8009144 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d103      	bne.n	8009156 <xQueueGenericSendFromISR+0x3e>
 800914e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <xQueueGenericSendFromISR+0x42>
 8009156:	2301      	movs	r3, #1
 8009158:	e000      	b.n	800915c <xQueueGenericSendFromISR+0x44>
 800915a:	2300      	movs	r3, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10b      	bne.n	8009178 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009172:	bf00      	nop
 8009174:	bf00      	nop
 8009176:	e7fd      	b.n	8009174 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d103      	bne.n	8009186 <xQueueGenericSendFromISR+0x6e>
 800917e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009182:	2b01      	cmp	r3, #1
 8009184:	d101      	bne.n	800918a <xQueueGenericSendFromISR+0x72>
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <xQueueGenericSendFromISR+0x74>
 800918a:	2300      	movs	r3, #0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10b      	bne.n	80091a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	623b      	str	r3, [r7, #32]
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	e7fd      	b.n	80091a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091a8:	f002 fb8e 	bl	800b8c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091ac:	f3ef 8211 	mrs	r2, BASEPRI
 80091b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	61fa      	str	r2, [r7, #28]
 80091c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d302      	bcc.n	80091da <xQueueGenericSendFromISR+0xc2>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d12f      	bne.n	800923a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091f0:	f000 fb70 	bl	80098d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fc:	d112      	bne.n	8009224 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009202:	2b00      	cmp	r3, #0
 8009204:	d016      	beq.n	8009234 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	3324      	adds	r3, #36	@ 0x24
 800920a:	4618      	mov	r0, r3
 800920c:	f001 f98c 	bl	800a528 <xTaskRemoveFromEventList>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00e      	beq.n	8009234 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00b      	beq.n	8009234 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	e007      	b.n	8009234 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009224:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009228:	3301      	adds	r3, #1
 800922a:	b2db      	uxtb	r3, r3
 800922c:	b25a      	sxtb	r2, r3
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009234:	2301      	movs	r3, #1
 8009236:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009238:	e001      	b.n	800923e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800923a:	2300      	movs	r3, #0
 800923c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800923e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009240:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009248:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800924a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800924c:	4618      	mov	r0, r3
 800924e:	3740      	adds	r7, #64	@ 0x40
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08e      	sub	sp, #56	@ 0x38
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10b      	bne.n	8009280 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	623b      	str	r3, [r7, #32]
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	61fb      	str	r3, [r7, #28]
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	e7fd      	b.n	800929c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d103      	bne.n	80092b0 <xQueueGiveFromISR+0x5c>
 80092a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <xQueueGiveFromISR+0x60>
 80092b0:	2301      	movs	r3, #1
 80092b2:	e000      	b.n	80092b6 <xQueueGiveFromISR+0x62>
 80092b4:	2300      	movs	r3, #0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10b      	bne.n	80092d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	61bb      	str	r3, [r7, #24]
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	e7fd      	b.n	80092ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092d2:	f002 faf9 	bl	800b8c8 <vPortValidateInterruptPriority>
	__asm volatile
 80092d6:	f3ef 8211 	mrs	r2, BASEPRI
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	617a      	str	r2, [r7, #20]
 80092ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80092ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092fe:	429a      	cmp	r2, r3
 8009300:	d22b      	bcs.n	800935a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800930c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009314:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931c:	d112      	bne.n	8009344 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009322:	2b00      	cmp	r3, #0
 8009324:	d016      	beq.n	8009354 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	3324      	adds	r3, #36	@ 0x24
 800932a:	4618      	mov	r0, r3
 800932c:	f001 f8fc 	bl	800a528 <xTaskRemoveFromEventList>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00e      	beq.n	8009354 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2201      	movs	r2, #1
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	e007      	b.n	8009354 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009348:	3301      	adds	r3, #1
 800934a:	b2db      	uxtb	r3, r3
 800934c:	b25a      	sxtb	r2, r3
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009354:	2301      	movs	r3, #1
 8009356:	637b      	str	r3, [r7, #52]	@ 0x34
 8009358:	e001      	b.n	800935e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800935a:	2300      	movs	r3, #0
 800935c:	637b      	str	r3, [r7, #52]	@ 0x34
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f383 8811 	msr	BASEPRI, r3
}
 8009368:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800936a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800936c:	4618      	mov	r0, r3
 800936e:	3738      	adds	r7, #56	@ 0x38
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08c      	sub	sp, #48	@ 0x30
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009380:	2300      	movs	r3, #0
 8009382:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10b      	bne.n	80093a6 <xQueueReceive+0x32>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	623b      	str	r3, [r7, #32]
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	e7fd      	b.n	80093a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d103      	bne.n	80093b4 <xQueueReceive+0x40>
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <xQueueReceive+0x44>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e000      	b.n	80093ba <xQueueReceive+0x46>
 80093b8:	2300      	movs	r3, #0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10b      	bne.n	80093d6 <xQueueReceive+0x62>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	61fb      	str	r3, [r7, #28]
}
 80093d0:	bf00      	nop
 80093d2:	bf00      	nop
 80093d4:	e7fd      	b.n	80093d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093d6:	f001 fa6d 	bl	800a8b4 <xTaskGetSchedulerState>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <xQueueReceive+0x72>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <xQueueReceive+0x76>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <xQueueReceive+0x78>
 80093ea:	2300      	movs	r3, #0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10b      	bne.n	8009408 <xQueueReceive+0x94>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	61bb      	str	r3, [r7, #24]
}
 8009402:	bf00      	nop
 8009404:	bf00      	nop
 8009406:	e7fd      	b.n	8009404 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009408:	f002 f97e 	bl	800b708 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800940c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009410:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	2b00      	cmp	r3, #0
 8009416:	d01f      	beq.n	8009458 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800941c:	f000 fac4 	bl	80099a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009422:	1e5a      	subs	r2, r3, #1
 8009424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009426:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00f      	beq.n	8009450 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009432:	3310      	adds	r3, #16
 8009434:	4618      	mov	r0, r3
 8009436:	f001 f877 	bl	800a528 <xTaskRemoveFromEventList>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d007      	beq.n	8009450 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009440:	4b3c      	ldr	r3, [pc, #240]	@ (8009534 <xQueueReceive+0x1c0>)
 8009442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009450:	f002 f98c 	bl	800b76c <vPortExitCritical>
				return pdPASS;
 8009454:	2301      	movs	r3, #1
 8009456:	e069      	b.n	800952c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d103      	bne.n	8009466 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800945e:	f002 f985 	bl	800b76c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009462:	2300      	movs	r3, #0
 8009464:	e062      	b.n	800952c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d106      	bne.n	800947a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800946c:	f107 0310 	add.w	r3, r7, #16
 8009470:	4618      	mov	r0, r3
 8009472:	f001 f8bd 	bl	800a5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009476:	2301      	movs	r3, #1
 8009478:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800947a:	f002 f977 	bl	800b76c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800947e:	f000 fe25 	bl	800a0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009482:	f002 f941 	bl	800b708 <vPortEnterCritical>
 8009486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800948c:	b25b      	sxtb	r3, r3
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009492:	d103      	bne.n	800949c <xQueueReceive+0x128>
 8009494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009496:	2200      	movs	r2, #0
 8009498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094a2:	b25b      	sxtb	r3, r3
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a8:	d103      	bne.n	80094b2 <xQueueReceive+0x13e>
 80094aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094b2:	f002 f95b 	bl	800b76c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094b6:	1d3a      	adds	r2, r7, #4
 80094b8:	f107 0310 	add.w	r3, r7, #16
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f001 f8ac 	bl	800a61c <xTaskCheckForTimeOut>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d123      	bne.n	8009512 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094cc:	f000 fae4 	bl	8009a98 <prvIsQueueEmpty>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d017      	beq.n	8009506 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d8:	3324      	adds	r3, #36	@ 0x24
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 ffd0 	bl	800a484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094e6:	f000 fa85 	bl	80099f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094ea:	f000 fdfd 	bl	800a0e8 <xTaskResumeAll>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d189      	bne.n	8009408 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80094f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009534 <xQueueReceive+0x1c0>)
 80094f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	e780      	b.n	8009408 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009508:	f000 fa74 	bl	80099f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800950c:	f000 fdec 	bl	800a0e8 <xTaskResumeAll>
 8009510:	e77a      	b.n	8009408 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009514:	f000 fa6e 	bl	80099f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009518:	f000 fde6 	bl	800a0e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800951c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800951e:	f000 fabb 	bl	8009a98 <prvIsQueueEmpty>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	f43f af6f 	beq.w	8009408 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800952a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800952c:	4618      	mov	r0, r3
 800952e:	3730      	adds	r7, #48	@ 0x30
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	e000ed04 	.word	0xe000ed04

08009538 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08e      	sub	sp, #56	@ 0x38
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009542:	2300      	movs	r3, #0
 8009544:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800954a:	2300      	movs	r3, #0
 800954c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800954e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10b      	bne.n	800956c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	623b      	str	r3, [r7, #32]
}
 8009566:	bf00      	nop
 8009568:	bf00      	nop
 800956a:	e7fd      	b.n	8009568 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800956c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	61fb      	str	r3, [r7, #28]
}
 8009586:	bf00      	nop
 8009588:	bf00      	nop
 800958a:	e7fd      	b.n	8009588 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800958c:	f001 f992 	bl	800a8b4 <xTaskGetSchedulerState>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d102      	bne.n	800959c <xQueueSemaphoreTake+0x64>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <xQueueSemaphoreTake+0x68>
 800959c:	2301      	movs	r3, #1
 800959e:	e000      	b.n	80095a2 <xQueueSemaphoreTake+0x6a>
 80095a0:	2300      	movs	r3, #0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10b      	bne.n	80095be <xQueueSemaphoreTake+0x86>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	61bb      	str	r3, [r7, #24]
}
 80095b8:	bf00      	nop
 80095ba:	bf00      	nop
 80095bc:	e7fd      	b.n	80095ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095be:	f002 f8a3 	bl	800b708 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80095c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80095c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d024      	beq.n	8009618 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	1e5a      	subs	r2, r3, #1
 80095d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d104      	bne.n	80095e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80095de:	f001 fae3 	bl	800aba8 <pvTaskIncrementMutexHeldCount>
 80095e2:	4602      	mov	r2, r0
 80095e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00f      	beq.n	8009610 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f2:	3310      	adds	r3, #16
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 ff97 	bl	800a528 <xTaskRemoveFromEventList>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d007      	beq.n	8009610 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009600:	4b54      	ldr	r3, [pc, #336]	@ (8009754 <xQueueSemaphoreTake+0x21c>)
 8009602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009610:	f002 f8ac 	bl	800b76c <vPortExitCritical>
				return pdPASS;
 8009614:	2301      	movs	r3, #1
 8009616:	e098      	b.n	800974a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d112      	bne.n	8009644 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00b      	beq.n	800963c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	617b      	str	r3, [r7, #20]
}
 8009636:	bf00      	nop
 8009638:	bf00      	nop
 800963a:	e7fd      	b.n	8009638 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800963c:	f002 f896 	bl	800b76c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009640:	2300      	movs	r3, #0
 8009642:	e082      	b.n	800974a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800964a:	f107 030c 	add.w	r3, r7, #12
 800964e:	4618      	mov	r0, r3
 8009650:	f000 ffce 	bl	800a5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009654:	2301      	movs	r3, #1
 8009656:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009658:	f002 f888 	bl	800b76c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800965c:	f000 fd36 	bl	800a0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009660:	f002 f852 	bl	800b708 <vPortEnterCritical>
 8009664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009666:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800966a:	b25b      	sxtb	r3, r3
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d103      	bne.n	800967a <xQueueSemaphoreTake+0x142>
 8009672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800967a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009680:	b25b      	sxtb	r3, r3
 8009682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009686:	d103      	bne.n	8009690 <xQueueSemaphoreTake+0x158>
 8009688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009690:	f002 f86c 	bl	800b76c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009694:	463a      	mov	r2, r7
 8009696:	f107 030c 	add.w	r3, r7, #12
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f000 ffbd 	bl	800a61c <xTaskCheckForTimeOut>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d132      	bne.n	800970e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096aa:	f000 f9f5 	bl	8009a98 <prvIsQueueEmpty>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d026      	beq.n	8009702 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d109      	bne.n	80096d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80096bc:	f002 f824 	bl	800b708 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 f913 	bl	800a8f0 <xTaskPriorityInherit>
 80096ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80096cc:	f002 f84e 	bl	800b76c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	3324      	adds	r3, #36	@ 0x24
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fed3 	bl	800a484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096e0:	f000 f988 	bl	80099f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096e4:	f000 fd00 	bl	800a0e8 <xTaskResumeAll>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f47f af67 	bne.w	80095be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80096f0:	4b18      	ldr	r3, [pc, #96]	@ (8009754 <xQueueSemaphoreTake+0x21c>)
 80096f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	e75d      	b.n	80095be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009702:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009704:	f000 f976 	bl	80099f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009708:	f000 fcee 	bl	800a0e8 <xTaskResumeAll>
 800970c:	e757      	b.n	80095be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800970e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009710:	f000 f970 	bl	80099f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009714:	f000 fce8 	bl	800a0e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009718:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800971a:	f000 f9bd 	bl	8009a98 <prvIsQueueEmpty>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	f43f af4c 	beq.w	80095be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00d      	beq.n	8009748 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800972c:	f001 ffec 	bl	800b708 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009730:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009732:	f000 f8b7 	bl	80098a4 <prvGetDisinheritPriorityAfterTimeout>
 8009736:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800973e:	4618      	mov	r0, r3
 8009740:	f001 f9ae 	bl	800aaa0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009744:	f002 f812 	bl	800b76c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800974a:	4618      	mov	r0, r3
 800974c:	3738      	adds	r7, #56	@ 0x38
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	e000ed04 	.word	0xe000ed04

08009758 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b08e      	sub	sp, #56	@ 0x38
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10b      	bne.n	8009786 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	623b      	str	r3, [r7, #32]
}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	e7fd      	b.n	8009782 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d103      	bne.n	8009794 <xQueueReceiveFromISR+0x3c>
 800978c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <xQueueReceiveFromISR+0x40>
 8009794:	2301      	movs	r3, #1
 8009796:	e000      	b.n	800979a <xQueueReceiveFromISR+0x42>
 8009798:	2300      	movs	r3, #0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10b      	bne.n	80097b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	61fb      	str	r3, [r7, #28]
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	e7fd      	b.n	80097b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097b6:	f002 f887 	bl	800b8c8 <vPortValidateInterruptPriority>
	__asm volatile
 80097ba:	f3ef 8211 	mrs	r2, BASEPRI
 80097be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	61ba      	str	r2, [r7, #24]
 80097d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80097d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d02f      	beq.n	8009842 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097ec:	68b9      	ldr	r1, [r7, #8]
 80097ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097f0:	f000 f8da 	bl	80099a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f6:	1e5a      	subs	r2, r3, #1
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d112      	bne.n	800982c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d016      	beq.n	800983c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800980e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009810:	3310      	adds	r3, #16
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fe88 	bl	800a528 <xTaskRemoveFromEventList>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00e      	beq.n	800983c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e007      	b.n	800983c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800982c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009830:	3301      	adds	r3, #1
 8009832:	b2db      	uxtb	r3, r3
 8009834:	b25a      	sxtb	r2, r3
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800983c:	2301      	movs	r3, #1
 800983e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009840:	e001      	b.n	8009846 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009842:	2300      	movs	r3, #0
 8009844:	637b      	str	r3, [r7, #52]	@ 0x34
 8009846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009848:	613b      	str	r3, [r7, #16]
	__asm volatile
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f383 8811 	msr	BASEPRI, r3
}
 8009850:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009854:	4618      	mov	r0, r3
 8009856:	3738      	adds	r7, #56	@ 0x38
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10b      	bne.n	8009886 <vQueueDelete+0x2a>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	60bb      	str	r3, [r7, #8]
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	e7fd      	b.n	8009882 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f95e 	bl	8009b48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f002 f926 	bl	800bae8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800989c:	bf00      	nop
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d006      	beq.n	80098c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	e001      	b.n	80098c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80098c2:	2300      	movs	r3, #0
 80098c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80098c6:	68fb      	ldr	r3, [r7, #12]
	}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10d      	bne.n	800990e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d14d      	bne.n	8009996 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	4618      	mov	r0, r3
 8009900:	f001 f85e 	bl	800a9c0 <xTaskPriorityDisinherit>
 8009904:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	609a      	str	r2, [r3, #8]
 800990c:	e043      	b.n	8009996 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d119      	bne.n	8009948 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6858      	ldr	r0, [r3, #4]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800991c:	461a      	mov	r2, r3
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	f003 f827 	bl	800c972 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992c:	441a      	add	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	429a      	cmp	r2, r3
 800993c:	d32b      	bcc.n	8009996 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	605a      	str	r2, [r3, #4]
 8009946:	e026      	b.n	8009996 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	68d8      	ldr	r0, [r3, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009950:	461a      	mov	r2, r3
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	f003 f80d 	bl	800c972 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68da      	ldr	r2, [r3, #12]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009960:	425b      	negs	r3, r3
 8009962:	441a      	add	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	68da      	ldr	r2, [r3, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d207      	bcs.n	8009984 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	689a      	ldr	r2, [r3, #8]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997c:	425b      	negs	r3, r3
 800997e:	441a      	add	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d105      	bne.n	8009996 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	3b01      	subs	r3, #1
 8009994:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800999e:	697b      	ldr	r3, [r7, #20]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d018      	beq.n	80099ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68da      	ldr	r2, [r3, #12]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c2:	441a      	add	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68da      	ldr	r2, [r3, #12]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d303      	bcc.n	80099dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	68d9      	ldr	r1, [r3, #12]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e4:	461a      	mov	r2, r3
 80099e6:	6838      	ldr	r0, [r7, #0]
 80099e8:	f002 ffc3 	bl	800c972 <memcpy>
	}
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099fc:	f001 fe84 	bl	800b708 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a08:	e011      	b.n	8009a2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d012      	beq.n	8009a38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	3324      	adds	r3, #36	@ 0x24
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 fd86 	bl	800a528 <xTaskRemoveFromEventList>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a22:	f000 fe5f 	bl	800a6e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	dce9      	bgt.n	8009a0a <prvUnlockQueue+0x16>
 8009a36:	e000      	b.n	8009a3a <prvUnlockQueue+0x46>
					break;
 8009a38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	22ff      	movs	r2, #255	@ 0xff
 8009a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009a42:	f001 fe93 	bl	800b76c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a46:	f001 fe5f 	bl	800b708 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a52:	e011      	b.n	8009a78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d012      	beq.n	8009a82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3310      	adds	r3, #16
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fd61 	bl	800a528 <xTaskRemoveFromEventList>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a6c:	f000 fe3a 	bl	800a6e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a70:	7bbb      	ldrb	r3, [r7, #14]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dce9      	bgt.n	8009a54 <prvUnlockQueue+0x60>
 8009a80:	e000      	b.n	8009a84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	22ff      	movs	r2, #255	@ 0xff
 8009a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009a8c:	f001 fe6e 	bl	800b76c <vPortExitCritical>
}
 8009a90:	bf00      	nop
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009aa0:	f001 fe32 	bl	800b708 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009aac:	2301      	movs	r3, #1
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e001      	b.n	8009ab6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ab6:	f001 fe59 	bl	800b76c <vPortExitCritical>

	return xReturn;
 8009aba:	68fb      	ldr	r3, [r7, #12]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009acc:	f001 fe1c 	bl	800b708 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d102      	bne.n	8009ae2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009adc:	2301      	movs	r3, #1
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	e001      	b.n	8009ae6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ae6:	f001 fe41 	bl	800b76c <vPortExitCritical>

	return xReturn;
 8009aea:	68fb      	ldr	r3, [r7, #12]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009afe:	2300      	movs	r3, #0
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	e014      	b.n	8009b2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b04:	4a0f      	ldr	r2, [pc, #60]	@ (8009b44 <vQueueAddToRegistry+0x50>)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10b      	bne.n	8009b28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b10:	490c      	ldr	r1, [pc, #48]	@ (8009b44 <vQueueAddToRegistry+0x50>)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8009b44 <vQueueAddToRegistry+0x50>)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	4413      	add	r3, r2
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b26:	e006      	b.n	8009b36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	60fb      	str	r3, [r7, #12]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b07      	cmp	r3, #7
 8009b32:	d9e7      	bls.n	8009b04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	24001a50 	.word	0x24001a50

08009b48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b50:	2300      	movs	r3, #0
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e016      	b.n	8009b84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009b56:	4a10      	ldr	r2, [pc, #64]	@ (8009b98 <vQueueUnregisterQueue+0x50>)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	4413      	add	r3, r2
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d10b      	bne.n	8009b7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009b66:	4a0c      	ldr	r2, [pc, #48]	@ (8009b98 <vQueueUnregisterQueue+0x50>)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009b70:	4a09      	ldr	r2, [pc, #36]	@ (8009b98 <vQueueUnregisterQueue+0x50>)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	00db      	lsls	r3, r3, #3
 8009b76:	4413      	add	r3, r2
 8009b78:	2200      	movs	r2, #0
 8009b7a:	605a      	str	r2, [r3, #4]
				break;
 8009b7c:	e006      	b.n	8009b8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3301      	adds	r3, #1
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b07      	cmp	r3, #7
 8009b88:	d9e5      	bls.n	8009b56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	24001a50 	.word	0x24001a50

08009b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009bac:	f001 fdac 	bl	800b708 <vPortEnterCritical>
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bb6:	b25b      	sxtb	r3, r3
 8009bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbc:	d103      	bne.n	8009bc6 <vQueueWaitForMessageRestricted+0x2a>
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bcc:	b25b      	sxtb	r3, r3
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd2:	d103      	bne.n	8009bdc <vQueueWaitForMessageRestricted+0x40>
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bdc:	f001 fdc6 	bl	800b76c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d106      	bne.n	8009bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	3324      	adds	r3, #36	@ 0x24
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fc6d 	bl	800a4d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bf6:	6978      	ldr	r0, [r7, #20]
 8009bf8:	f7ff fefc 	bl	80099f4 <prvUnlockQueue>
	}
 8009bfc:	bf00      	nop
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08e      	sub	sp, #56	@ 0x38
 8009c08:	af04      	add	r7, sp, #16
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10b      	bne.n	8009c30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	623b      	str	r3, [r7, #32]
}
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	e7fd      	b.n	8009c2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10b      	bne.n	8009c4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	61fb      	str	r3, [r7, #28]
}
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	e7fd      	b.n	8009c4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c4e:	23a8      	movs	r3, #168	@ 0xa8
 8009c50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	2ba8      	cmp	r3, #168	@ 0xa8
 8009c56:	d00b      	beq.n	8009c70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	61bb      	str	r3, [r7, #24]
}
 8009c6a:	bf00      	nop
 8009c6c:	bf00      	nop
 8009c6e:	e7fd      	b.n	8009c6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01e      	beq.n	8009cb6 <xTaskCreateStatic+0xb2>
 8009c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d01b      	beq.n	8009cb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c90:	2300      	movs	r3, #0
 8009c92:	9303      	str	r3, [sp, #12]
 8009c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c96:	9302      	str	r3, [sp, #8]
 8009c98:	f107 0314 	add.w	r3, r7, #20
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f851 	bl	8009d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009cb0:	f000 f8f6 	bl	8009ea0 <prvAddNewTaskToReadyList>
 8009cb4:	e001      	b.n	8009cba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cba:	697b      	ldr	r3, [r7, #20]
	}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3728      	adds	r7, #40	@ 0x28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08c      	sub	sp, #48	@ 0x30
 8009cc8:	af04      	add	r7, sp, #16
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cd4:	88fb      	ldrh	r3, [r7, #6]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 fe37 	bl	800b94c <pvPortMalloc>
 8009cde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00e      	beq.n	8009d04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ce6:	20a8      	movs	r0, #168	@ 0xa8
 8009ce8:	f001 fe30 	bl	800b94c <pvPortMalloc>
 8009cec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cfa:	e005      	b.n	8009d08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cfc:	6978      	ldr	r0, [r7, #20]
 8009cfe:	f001 fef3 	bl	800bae8 <vPortFree>
 8009d02:	e001      	b.n	8009d08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d04:	2300      	movs	r3, #0
 8009d06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d017      	beq.n	8009d3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d16:	88fa      	ldrh	r2, [r7, #6]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9303      	str	r3, [sp, #12]
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	9302      	str	r3, [sp, #8]
 8009d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d22:	9301      	str	r3, [sp, #4]
 8009d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	68b9      	ldr	r1, [r7, #8]
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 f80f 	bl	8009d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d32:	69f8      	ldr	r0, [r7, #28]
 8009d34:	f000 f8b4 	bl	8009ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	61bb      	str	r3, [r7, #24]
 8009d3c:	e002      	b.n	8009d44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d44:	69bb      	ldr	r3, [r7, #24]
	}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	461a      	mov	r2, r3
 8009d68:	21a5      	movs	r1, #165	@ 0xa5
 8009d6a:	f002 fd2c 	bl	800c7c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009d78:	440b      	add	r3, r1
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	f023 0307 	bic.w	r3, r3, #7
 8009d86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00b      	beq.n	8009daa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	617b      	str	r3, [r7, #20]
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop
 8009da8:	e7fd      	b.n	8009da6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01f      	beq.n	8009df0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009db0:	2300      	movs	r3, #0
 8009db2:	61fb      	str	r3, [r7, #28]
 8009db4:	e012      	b.n	8009ddc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	4413      	add	r3, r2
 8009dbc:	7819      	ldrb	r1, [r3, #0]
 8009dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	3334      	adds	r3, #52	@ 0x34
 8009dc6:	460a      	mov	r2, r1
 8009dc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	4413      	add	r3, r2
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d006      	beq.n	8009de4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	61fb      	str	r3, [r7, #28]
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	2b0f      	cmp	r3, #15
 8009de0:	d9e9      	bls.n	8009db6 <prvInitialiseNewTask+0x66>
 8009de2:	e000      	b.n	8009de6 <prvInitialiseNewTask+0x96>
			{
				break;
 8009de4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009dee:	e003      	b.n	8009df8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfa:	2b37      	cmp	r3, #55	@ 0x37
 8009dfc:	d901      	bls.n	8009e02 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009dfe:	2337      	movs	r3, #55	@ 0x37
 8009e00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e0c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	2200      	movs	r2, #0
 8009e12:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e16:	3304      	adds	r3, #4
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe fe33 	bl	8008a84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e20:	3318      	adds	r3, #24
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe fe2e 	bl	8008a84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e50:	3354      	adds	r3, #84	@ 0x54
 8009e52:	224c      	movs	r2, #76	@ 0x4c
 8009e54:	2100      	movs	r1, #0
 8009e56:	4618      	mov	r0, r3
 8009e58:	f002 fcb5 	bl	800c7c6 <memset>
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8009e94 <prvInitialiseNewTask+0x144>)
 8009e60:	659a      	str	r2, [r3, #88]	@ 0x58
 8009e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e64:	4a0c      	ldr	r2, [pc, #48]	@ (8009e98 <prvInitialiseNewTask+0x148>)
 8009e66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8009e9c <prvInitialiseNewTask+0x14c>)
 8009e6c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	68f9      	ldr	r1, [r7, #12]
 8009e72:	69b8      	ldr	r0, [r7, #24]
 8009e74:	f001 fb1a 	bl	800b4ac <pxPortInitialiseStack>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e8a:	bf00      	nop
 8009e8c:	3720      	adds	r7, #32
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	24005ce4 	.word	0x24005ce4
 8009e98:	24005d4c 	.word	0x24005d4c
 8009e9c:	24005db4 	.word	0x24005db4

08009ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ea8:	f001 fc2e 	bl	800b708 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009eac:	4b2d      	ldr	r3, [pc, #180]	@ (8009f64 <prvAddNewTaskToReadyList+0xc4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8009f64 <prvAddNewTaskToReadyList+0xc4>)
 8009eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ec4:	4b27      	ldr	r3, [pc, #156]	@ (8009f64 <prvAddNewTaskToReadyList+0xc4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d110      	bne.n	8009eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ecc:	f000 fc2e 	bl	800a72c <prvInitialiseTaskLists>
 8009ed0:	e00d      	b.n	8009eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ed2:	4b26      	ldr	r3, [pc, #152]	@ (8009f6c <prvAddNewTaskToReadyList+0xcc>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d109      	bne.n	8009eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009eda:	4b23      	ldr	r3, [pc, #140]	@ (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d802      	bhi.n	8009eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009eee:	4b20      	ldr	r3, [pc, #128]	@ (8009f70 <prvAddNewTaskToReadyList+0xd0>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8009f70 <prvAddNewTaskToReadyList+0xd0>)
 8009ef6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8009f70 <prvAddNewTaskToReadyList+0xd0>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f04:	4b1b      	ldr	r3, [pc, #108]	@ (8009f74 <prvAddNewTaskToReadyList+0xd4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d903      	bls.n	8009f14 <prvAddNewTaskToReadyList+0x74>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f10:	4a18      	ldr	r2, [pc, #96]	@ (8009f74 <prvAddNewTaskToReadyList+0xd4>)
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f18:	4613      	mov	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4a15      	ldr	r2, [pc, #84]	@ (8009f78 <prvAddNewTaskToReadyList+0xd8>)
 8009f22:	441a      	add	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	f7fe fdb7 	bl	8008a9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f30:	f001 fc1c 	bl	800b76c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f34:	4b0d      	ldr	r3, [pc, #52]	@ (8009f6c <prvAddNewTaskToReadyList+0xcc>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00e      	beq.n	8009f5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d207      	bcs.n	8009f5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f7c <prvAddNewTaskToReadyList+0xdc>)
 8009f4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	24001f64 	.word	0x24001f64
 8009f68:	24001a90 	.word	0x24001a90
 8009f6c:	24001f70 	.word	0x24001f70
 8009f70:	24001f80 	.word	0x24001f80
 8009f74:	24001f6c 	.word	0x24001f6c
 8009f78:	24001a94 	.word	0x24001a94
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d018      	beq.n	8009fc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f92:	4b14      	ldr	r3, [pc, #80]	@ (8009fe4 <vTaskDelay+0x64>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00b      	beq.n	8009fb2 <vTaskDelay+0x32>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	60bb      	str	r3, [r7, #8]
}
 8009fac:	bf00      	nop
 8009fae:	bf00      	nop
 8009fb0:	e7fd      	b.n	8009fae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009fb2:	f000 f88b 	bl	800a0cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fe09 	bl	800abd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fbe:	f000 f893 	bl	800a0e8 <xTaskResumeAll>
 8009fc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d107      	bne.n	8009fda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009fca:	4b07      	ldr	r3, [pc, #28]	@ (8009fe8 <vTaskDelay+0x68>)
 8009fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fda:	bf00      	nop
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	24001f8c 	.word	0x24001f8c
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08a      	sub	sp, #40	@ 0x28
 8009ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ffa:	463a      	mov	r2, r7
 8009ffc:	1d39      	adds	r1, r7, #4
 8009ffe:	f107 0308 	add.w	r3, r7, #8
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fcea 	bl	80089dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	9202      	str	r2, [sp, #8]
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	2300      	movs	r3, #0
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	2300      	movs	r3, #0
 800a018:	460a      	mov	r2, r1
 800a01a:	4924      	ldr	r1, [pc, #144]	@ (800a0ac <vTaskStartScheduler+0xc0>)
 800a01c:	4824      	ldr	r0, [pc, #144]	@ (800a0b0 <vTaskStartScheduler+0xc4>)
 800a01e:	f7ff fdf1 	bl	8009c04 <xTaskCreateStatic>
 800a022:	4603      	mov	r3, r0
 800a024:	4a23      	ldr	r2, [pc, #140]	@ (800a0b4 <vTaskStartScheduler+0xc8>)
 800a026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a028:	4b22      	ldr	r3, [pc, #136]	@ (800a0b4 <vTaskStartScheduler+0xc8>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a030:	2301      	movs	r3, #1
 800a032:	617b      	str	r3, [r7, #20]
 800a034:	e001      	b.n	800a03a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d102      	bne.n	800a046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a040:	f000 fe1a 	bl	800ac78 <xTimerCreateTimerTask>
 800a044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d11b      	bne.n	800a084 <vTaskStartScheduler+0x98>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	613b      	str	r3, [r7, #16]
}
 800a05e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a060:	4b15      	ldr	r3, [pc, #84]	@ (800a0b8 <vTaskStartScheduler+0xcc>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3354      	adds	r3, #84	@ 0x54
 800a066:	4a15      	ldr	r2, [pc, #84]	@ (800a0bc <vTaskStartScheduler+0xd0>)
 800a068:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a06a:	4b15      	ldr	r3, [pc, #84]	@ (800a0c0 <vTaskStartScheduler+0xd4>)
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295
 800a070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a072:	4b14      	ldr	r3, [pc, #80]	@ (800a0c4 <vTaskStartScheduler+0xd8>)
 800a074:	2201      	movs	r2, #1
 800a076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a078:	4b13      	ldr	r3, [pc, #76]	@ (800a0c8 <vTaskStartScheduler+0xdc>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a07e:	f001 fa9f 	bl	800b5c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a082:	e00f      	b.n	800a0a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08a:	d10b      	bne.n	800a0a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	60fb      	str	r3, [r7, #12]
}
 800a09e:	bf00      	nop
 800a0a0:	bf00      	nop
 800a0a2:	e7fd      	b.n	800a0a0 <vTaskStartScheduler+0xb4>
}
 800a0a4:	bf00      	nop
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	0800e660 	.word	0x0800e660
 800a0b0:	0800a6fd 	.word	0x0800a6fd
 800a0b4:	24001f88 	.word	0x24001f88
 800a0b8:	24001a90 	.word	0x24001a90
 800a0bc:	24000020 	.word	0x24000020
 800a0c0:	24001f84 	.word	0x24001f84
 800a0c4:	24001f70 	.word	0x24001f70
 800a0c8:	24001f68 	.word	0x24001f68

0800a0cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0d0:	4b04      	ldr	r3, [pc, #16]	@ (800a0e4 <vTaskSuspendAll+0x18>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	4a03      	ldr	r2, [pc, #12]	@ (800a0e4 <vTaskSuspendAll+0x18>)
 800a0d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0da:	bf00      	nop
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	24001f8c 	.word	0x24001f8c

0800a0e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0f6:	4b42      	ldr	r3, [pc, #264]	@ (800a200 <xTaskResumeAll+0x118>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10b      	bne.n	800a116 <xTaskResumeAll+0x2e>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	603b      	str	r3, [r7, #0]
}
 800a110:	bf00      	nop
 800a112:	bf00      	nop
 800a114:	e7fd      	b.n	800a112 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a116:	f001 faf7 	bl	800b708 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a11a:	4b39      	ldr	r3, [pc, #228]	@ (800a200 <xTaskResumeAll+0x118>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3b01      	subs	r3, #1
 800a120:	4a37      	ldr	r2, [pc, #220]	@ (800a200 <xTaskResumeAll+0x118>)
 800a122:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a124:	4b36      	ldr	r3, [pc, #216]	@ (800a200 <xTaskResumeAll+0x118>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d162      	bne.n	800a1f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a12c:	4b35      	ldr	r3, [pc, #212]	@ (800a204 <xTaskResumeAll+0x11c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d05e      	beq.n	800a1f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a134:	e02f      	b.n	800a196 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a136:	4b34      	ldr	r3, [pc, #208]	@ (800a208 <xTaskResumeAll+0x120>)
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3318      	adds	r3, #24
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe fd08 	bl	8008b58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fe fd03 	bl	8008b58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a156:	4b2d      	ldr	r3, [pc, #180]	@ (800a20c <xTaskResumeAll+0x124>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d903      	bls.n	800a166 <xTaskResumeAll+0x7e>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a162:	4a2a      	ldr	r2, [pc, #168]	@ (800a20c <xTaskResumeAll+0x124>)
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a16a:	4613      	mov	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4a27      	ldr	r2, [pc, #156]	@ (800a210 <xTaskResumeAll+0x128>)
 800a174:	441a      	add	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	3304      	adds	r3, #4
 800a17a:	4619      	mov	r1, r3
 800a17c:	4610      	mov	r0, r2
 800a17e:	f7fe fc8e 	bl	8008a9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a186:	4b23      	ldr	r3, [pc, #140]	@ (800a214 <xTaskResumeAll+0x12c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d302      	bcc.n	800a196 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a190:	4b21      	ldr	r3, [pc, #132]	@ (800a218 <xTaskResumeAll+0x130>)
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a196:	4b1c      	ldr	r3, [pc, #112]	@ (800a208 <xTaskResumeAll+0x120>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1cb      	bne.n	800a136 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1a4:	f000 fb66 	bl	800a874 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1a8:	4b1c      	ldr	r3, [pc, #112]	@ (800a21c <xTaskResumeAll+0x134>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d010      	beq.n	800a1d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1b4:	f000 f846 	bl	800a244 <xTaskIncrementTick>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d002      	beq.n	800a1c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a1be:	4b16      	ldr	r3, [pc, #88]	@ (800a218 <xTaskResumeAll+0x130>)
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1f1      	bne.n	800a1b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a1d0:	4b12      	ldr	r3, [pc, #72]	@ (800a21c <xTaskResumeAll+0x134>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1d6:	4b10      	ldr	r3, [pc, #64]	@ (800a218 <xTaskResumeAll+0x130>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d009      	beq.n	800a1f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a220 <xTaskResumeAll+0x138>)
 800a1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1f2:	f001 fabb 	bl	800b76c <vPortExitCritical>

	return xAlreadyYielded;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	24001f8c 	.word	0x24001f8c
 800a204:	24001f64 	.word	0x24001f64
 800a208:	24001f24 	.word	0x24001f24
 800a20c:	24001f6c 	.word	0x24001f6c
 800a210:	24001a94 	.word	0x24001a94
 800a214:	24001a90 	.word	0x24001a90
 800a218:	24001f78 	.word	0x24001f78
 800a21c:	24001f74 	.word	0x24001f74
 800a220:	e000ed04 	.word	0xe000ed04

0800a224 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a22a:	4b05      	ldr	r3, [pc, #20]	@ (800a240 <xTaskGetTickCount+0x1c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a230:	687b      	ldr	r3, [r7, #4]
}
 800a232:	4618      	mov	r0, r3
 800a234:	370c      	adds	r7, #12
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	24001f68 	.word	0x24001f68

0800a244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a24e:	4b4f      	ldr	r3, [pc, #316]	@ (800a38c <xTaskIncrementTick+0x148>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f040 8090 	bne.w	800a378 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a258:	4b4d      	ldr	r3, [pc, #308]	@ (800a390 <xTaskIncrementTick+0x14c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a260:	4a4b      	ldr	r2, [pc, #300]	@ (800a390 <xTaskIncrementTick+0x14c>)
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d121      	bne.n	800a2b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a26c:	4b49      	ldr	r3, [pc, #292]	@ (800a394 <xTaskIncrementTick+0x150>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00b      	beq.n	800a28e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	603b      	str	r3, [r7, #0]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <xTaskIncrementTick+0x46>
 800a28e:	4b41      	ldr	r3, [pc, #260]	@ (800a394 <xTaskIncrementTick+0x150>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	4b40      	ldr	r3, [pc, #256]	@ (800a398 <xTaskIncrementTick+0x154>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a3e      	ldr	r2, [pc, #248]	@ (800a394 <xTaskIncrementTick+0x150>)
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	4a3e      	ldr	r2, [pc, #248]	@ (800a398 <xTaskIncrementTick+0x154>)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	4b3e      	ldr	r3, [pc, #248]	@ (800a39c <xTaskIncrementTick+0x158>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	4a3c      	ldr	r2, [pc, #240]	@ (800a39c <xTaskIncrementTick+0x158>)
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	f000 fae2 	bl	800a874 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2b0:	4b3b      	ldr	r3, [pc, #236]	@ (800a3a0 <xTaskIncrementTick+0x15c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d349      	bcc.n	800a34e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2ba:	4b36      	ldr	r3, [pc, #216]	@ (800a394 <xTaskIncrementTick+0x150>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d104      	bne.n	800a2ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2c4:	4b36      	ldr	r3, [pc, #216]	@ (800a3a0 <xTaskIncrementTick+0x15c>)
 800a2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ca:	601a      	str	r2, [r3, #0]
					break;
 800a2cc:	e03f      	b.n	800a34e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ce:	4b31      	ldr	r3, [pc, #196]	@ (800a394 <xTaskIncrementTick+0x150>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d203      	bcs.n	800a2ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2e6:	4a2e      	ldr	r2, [pc, #184]	@ (800a3a0 <xTaskIncrementTick+0x15c>)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2ec:	e02f      	b.n	800a34e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe fc30 	bl	8008b58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d004      	beq.n	800a30a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	3318      	adds	r3, #24
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe fc27 	bl	8008b58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a30e:	4b25      	ldr	r3, [pc, #148]	@ (800a3a4 <xTaskIncrementTick+0x160>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	429a      	cmp	r2, r3
 800a314:	d903      	bls.n	800a31e <xTaskIncrementTick+0xda>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31a:	4a22      	ldr	r2, [pc, #136]	@ (800a3a4 <xTaskIncrementTick+0x160>)
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a322:	4613      	mov	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4a1f      	ldr	r2, [pc, #124]	@ (800a3a8 <xTaskIncrementTick+0x164>)
 800a32c:	441a      	add	r2, r3
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	3304      	adds	r3, #4
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7fe fbb2 	bl	8008a9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a33e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3ac <xTaskIncrementTick+0x168>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a344:	429a      	cmp	r2, r3
 800a346:	d3b8      	bcc.n	800a2ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a348:	2301      	movs	r3, #1
 800a34a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a34c:	e7b5      	b.n	800a2ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a34e:	4b17      	ldr	r3, [pc, #92]	@ (800a3ac <xTaskIncrementTick+0x168>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a354:	4914      	ldr	r1, [pc, #80]	@ (800a3a8 <xTaskIncrementTick+0x164>)
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	440b      	add	r3, r1
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d901      	bls.n	800a36a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a366:	2301      	movs	r3, #1
 800a368:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a36a:	4b11      	ldr	r3, [pc, #68]	@ (800a3b0 <xTaskIncrementTick+0x16c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d007      	beq.n	800a382 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a372:	2301      	movs	r3, #1
 800a374:	617b      	str	r3, [r7, #20]
 800a376:	e004      	b.n	800a382 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a378:	4b0e      	ldr	r3, [pc, #56]	@ (800a3b4 <xTaskIncrementTick+0x170>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3301      	adds	r3, #1
 800a37e:	4a0d      	ldr	r2, [pc, #52]	@ (800a3b4 <xTaskIncrementTick+0x170>)
 800a380:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a382:	697b      	ldr	r3, [r7, #20]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	24001f8c 	.word	0x24001f8c
 800a390:	24001f68 	.word	0x24001f68
 800a394:	24001f1c 	.word	0x24001f1c
 800a398:	24001f20 	.word	0x24001f20
 800a39c:	24001f7c 	.word	0x24001f7c
 800a3a0:	24001f84 	.word	0x24001f84
 800a3a4:	24001f6c 	.word	0x24001f6c
 800a3a8:	24001a94 	.word	0x24001a94
 800a3ac:	24001a90 	.word	0x24001a90
 800a3b0:	24001f78 	.word	0x24001f78
 800a3b4:	24001f74 	.word	0x24001f74

0800a3b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3be:	4b2b      	ldr	r3, [pc, #172]	@ (800a46c <vTaskSwitchContext+0xb4>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a470 <vTaskSwitchContext+0xb8>)
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3cc:	e047      	b.n	800a45e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a3ce:	4b28      	ldr	r3, [pc, #160]	@ (800a470 <vTaskSwitchContext+0xb8>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d4:	4b27      	ldr	r3, [pc, #156]	@ (800a474 <vTaskSwitchContext+0xbc>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	e011      	b.n	800a400 <vTaskSwitchContext+0x48>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10b      	bne.n	800a3fa <vTaskSwitchContext+0x42>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	607b      	str	r3, [r7, #4]
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	e7fd      	b.n	800a3f6 <vTaskSwitchContext+0x3e>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	491d      	ldr	r1, [pc, #116]	@ (800a478 <vTaskSwitchContext+0xc0>)
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	4613      	mov	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	440b      	add	r3, r1
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0e3      	beq.n	800a3dc <vTaskSwitchContext+0x24>
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	4613      	mov	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4a16      	ldr	r2, [pc, #88]	@ (800a478 <vTaskSwitchContext+0xc0>)
 800a420:	4413      	add	r3, r2
 800a422:	60bb      	str	r3, [r7, #8]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	605a      	str	r2, [r3, #4]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	3308      	adds	r3, #8
 800a436:	429a      	cmp	r2, r3
 800a438:	d104      	bne.n	800a444 <vTaskSwitchContext+0x8c>
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	605a      	str	r2, [r3, #4]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	4a0c      	ldr	r2, [pc, #48]	@ (800a47c <vTaskSwitchContext+0xc4>)
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	4a09      	ldr	r2, [pc, #36]	@ (800a474 <vTaskSwitchContext+0xbc>)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a454:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <vTaskSwitchContext+0xc4>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3354      	adds	r3, #84	@ 0x54
 800a45a:	4a09      	ldr	r2, [pc, #36]	@ (800a480 <vTaskSwitchContext+0xc8>)
 800a45c:	6013      	str	r3, [r2, #0]
}
 800a45e:	bf00      	nop
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	24001f8c 	.word	0x24001f8c
 800a470:	24001f78 	.word	0x24001f78
 800a474:	24001f6c 	.word	0x24001f6c
 800a478:	24001a94 	.word	0x24001a94
 800a47c:	24001a90 	.word	0x24001a90
 800a480:	24000020 	.word	0x24000020

0800a484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10b      	bne.n	800a4ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	60fb      	str	r3, [r7, #12]
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	e7fd      	b.n	800a4a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4ac:	4b07      	ldr	r3, [pc, #28]	@ (800a4cc <vTaskPlaceOnEventList+0x48>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3318      	adds	r3, #24
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7fe fb16 	bl	8008ae6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	6838      	ldr	r0, [r7, #0]
 800a4be:	f000 fb87 	bl	800abd0 <prvAddCurrentTaskToDelayedList>
}
 800a4c2:	bf00      	nop
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	24001a90 	.word	0x24001a90

0800a4d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10b      	bne.n	800a4fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	617b      	str	r3, [r7, #20]
}
 800a4f4:	bf00      	nop
 800a4f6:	bf00      	nop
 800a4f8:	e7fd      	b.n	800a4f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a524 <vTaskPlaceOnEventListRestricted+0x54>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3318      	adds	r3, #24
 800a500:	4619      	mov	r1, r3
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f7fe facb 	bl	8008a9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	68b8      	ldr	r0, [r7, #8]
 800a518:	f000 fb5a 	bl	800abd0 <prvAddCurrentTaskToDelayedList>
	}
 800a51c:	bf00      	nop
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	24001a90 	.word	0x24001a90

0800a528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10b      	bne.n	800a556 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	60fb      	str	r3, [r7, #12]
}
 800a550:	bf00      	nop
 800a552:	bf00      	nop
 800a554:	e7fd      	b.n	800a552 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	3318      	adds	r3, #24
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fafc 	bl	8008b58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a560:	4b1d      	ldr	r3, [pc, #116]	@ (800a5d8 <xTaskRemoveFromEventList+0xb0>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d11d      	bne.n	800a5a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3304      	adds	r3, #4
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe faf3 	bl	8008b58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a576:	4b19      	ldr	r3, [pc, #100]	@ (800a5dc <xTaskRemoveFromEventList+0xb4>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d903      	bls.n	800a586 <xTaskRemoveFromEventList+0x5e>
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a582:	4a16      	ldr	r2, [pc, #88]	@ (800a5dc <xTaskRemoveFromEventList+0xb4>)
 800a584:	6013      	str	r3, [r2, #0]
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4a13      	ldr	r2, [pc, #76]	@ (800a5e0 <xTaskRemoveFromEventList+0xb8>)
 800a594:	441a      	add	r2, r3
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	3304      	adds	r3, #4
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7fe fa7e 	bl	8008a9e <vListInsertEnd>
 800a5a2:	e005      	b.n	800a5b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	3318      	adds	r3, #24
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	480e      	ldr	r0, [pc, #56]	@ (800a5e4 <xTaskRemoveFromEventList+0xbc>)
 800a5ac:	f7fe fa77 	bl	8008a9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e8 <xTaskRemoveFromEventList+0xc0>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d905      	bls.n	800a5ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ec <xTaskRemoveFromEventList+0xc4>)
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	e001      	b.n	800a5ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5ce:	697b      	ldr	r3, [r7, #20]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	24001f8c 	.word	0x24001f8c
 800a5dc:	24001f6c 	.word	0x24001f6c
 800a5e0:	24001a94 	.word	0x24001a94
 800a5e4:	24001f24 	.word	0x24001f24
 800a5e8:	24001a90 	.word	0x24001a90
 800a5ec:	24001f78 	.word	0x24001f78

0800a5f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5f8:	4b06      	ldr	r3, [pc, #24]	@ (800a614 <vTaskInternalSetTimeOutState+0x24>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a600:	4b05      	ldr	r3, [pc, #20]	@ (800a618 <vTaskInternalSetTimeOutState+0x28>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	605a      	str	r2, [r3, #4]
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	24001f7c 	.word	0x24001f7c
 800a618:	24001f68 	.word	0x24001f68

0800a61c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10b      	bne.n	800a644 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	613b      	str	r3, [r7, #16]
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	e7fd      	b.n	800a640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10b      	bne.n	800a662 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	60fb      	str	r3, [r7, #12]
}
 800a65c:	bf00      	nop
 800a65e:	bf00      	nop
 800a660:	e7fd      	b.n	800a65e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a662:	f001 f851 	bl	800b708 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a666:	4b1d      	ldr	r3, [pc, #116]	@ (800a6dc <xTaskCheckForTimeOut+0xc0>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a67e:	d102      	bne.n	800a686 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a680:	2300      	movs	r3, #0
 800a682:	61fb      	str	r3, [r7, #28]
 800a684:	e023      	b.n	800a6ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	4b15      	ldr	r3, [pc, #84]	@ (800a6e0 <xTaskCheckForTimeOut+0xc4>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d007      	beq.n	800a6a2 <xTaskCheckForTimeOut+0x86>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d302      	bcc.n	800a6a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	61fb      	str	r3, [r7, #28]
 800a6a0:	e015      	b.n	800a6ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d20b      	bcs.n	800a6c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	1ad2      	subs	r2, r2, r3
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7ff ff99 	bl	800a5f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61fb      	str	r3, [r7, #28]
 800a6c2:	e004      	b.n	800a6ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6ce:	f001 f84d 	bl	800b76c <vPortExitCritical>

	return xReturn;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3720      	adds	r7, #32
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	24001f68 	.word	0x24001f68
 800a6e0:	24001f7c 	.word	0x24001f7c

0800a6e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6e8:	4b03      	ldr	r3, [pc, #12]	@ (800a6f8 <vTaskMissedYield+0x14>)
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]
}
 800a6ee:	bf00      	nop
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	24001f78 	.word	0x24001f78

0800a6fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a704:	f000 f852 	bl	800a7ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a708:	4b06      	ldr	r3, [pc, #24]	@ (800a724 <prvIdleTask+0x28>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d9f9      	bls.n	800a704 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a710:	4b05      	ldr	r3, [pc, #20]	@ (800a728 <prvIdleTask+0x2c>)
 800a712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a716:	601a      	str	r2, [r3, #0]
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a720:	e7f0      	b.n	800a704 <prvIdleTask+0x8>
 800a722:	bf00      	nop
 800a724:	24001a94 	.word	0x24001a94
 800a728:	e000ed04 	.word	0xe000ed04

0800a72c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a732:	2300      	movs	r3, #0
 800a734:	607b      	str	r3, [r7, #4]
 800a736:	e00c      	b.n	800a752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4a12      	ldr	r2, [pc, #72]	@ (800a78c <prvInitialiseTaskLists+0x60>)
 800a744:	4413      	add	r3, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe f97c 	bl	8008a44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3301      	adds	r3, #1
 800a750:	607b      	str	r3, [r7, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b37      	cmp	r3, #55	@ 0x37
 800a756:	d9ef      	bls.n	800a738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a758:	480d      	ldr	r0, [pc, #52]	@ (800a790 <prvInitialiseTaskLists+0x64>)
 800a75a:	f7fe f973 	bl	8008a44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a75e:	480d      	ldr	r0, [pc, #52]	@ (800a794 <prvInitialiseTaskLists+0x68>)
 800a760:	f7fe f970 	bl	8008a44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a764:	480c      	ldr	r0, [pc, #48]	@ (800a798 <prvInitialiseTaskLists+0x6c>)
 800a766:	f7fe f96d 	bl	8008a44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a76a:	480c      	ldr	r0, [pc, #48]	@ (800a79c <prvInitialiseTaskLists+0x70>)
 800a76c:	f7fe f96a 	bl	8008a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a770:	480b      	ldr	r0, [pc, #44]	@ (800a7a0 <prvInitialiseTaskLists+0x74>)
 800a772:	f7fe f967 	bl	8008a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a776:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a4 <prvInitialiseTaskLists+0x78>)
 800a778:	4a05      	ldr	r2, [pc, #20]	@ (800a790 <prvInitialiseTaskLists+0x64>)
 800a77a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a77c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a8 <prvInitialiseTaskLists+0x7c>)
 800a77e:	4a05      	ldr	r2, [pc, #20]	@ (800a794 <prvInitialiseTaskLists+0x68>)
 800a780:	601a      	str	r2, [r3, #0]
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	24001a94 	.word	0x24001a94
 800a790:	24001ef4 	.word	0x24001ef4
 800a794:	24001f08 	.word	0x24001f08
 800a798:	24001f24 	.word	0x24001f24
 800a79c:	24001f38 	.word	0x24001f38
 800a7a0:	24001f50 	.word	0x24001f50
 800a7a4:	24001f1c 	.word	0x24001f1c
 800a7a8:	24001f20 	.word	0x24001f20

0800a7ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7b2:	e019      	b.n	800a7e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7b4:	f000 ffa8 	bl	800b708 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b8:	4b10      	ldr	r3, [pc, #64]	@ (800a7fc <prvCheckTasksWaitingTermination+0x50>)
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe f9c7 	bl	8008b58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a800 <prvCheckTasksWaitingTermination+0x54>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	4a0b      	ldr	r2, [pc, #44]	@ (800a800 <prvCheckTasksWaitingTermination+0x54>)
 800a7d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a804 <prvCheckTasksWaitingTermination+0x58>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	4a0a      	ldr	r2, [pc, #40]	@ (800a804 <prvCheckTasksWaitingTermination+0x58>)
 800a7dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7de:	f000 ffc5 	bl	800b76c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 f810 	bl	800a808 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7e8:	4b06      	ldr	r3, [pc, #24]	@ (800a804 <prvCheckTasksWaitingTermination+0x58>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1e1      	bne.n	800a7b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7f0:	bf00      	nop
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	24001f38 	.word	0x24001f38
 800a800:	24001f64 	.word	0x24001f64
 800a804:	24001f4c 	.word	0x24001f4c

0800a808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3354      	adds	r3, #84	@ 0x54
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fff3 	bl	800c800 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a820:	2b00      	cmp	r3, #0
 800a822:	d108      	bne.n	800a836 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 f95d 	bl	800bae8 <vPortFree>
				vPortFree( pxTCB );
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 f95a 	bl	800bae8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a834:	e019      	b.n	800a86a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d103      	bne.n	800a848 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f001 f951 	bl	800bae8 <vPortFree>
	}
 800a846:	e010      	b.n	800a86a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d00b      	beq.n	800a86a <prvDeleteTCB+0x62>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	60fb      	str	r3, [r7, #12]
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop
 800a868:	e7fd      	b.n	800a866 <prvDeleteTCB+0x5e>
	}
 800a86a:	bf00      	nop
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a87a:	4b0c      	ldr	r3, [pc, #48]	@ (800a8ac <prvResetNextTaskUnblockTime+0x38>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a884:	4b0a      	ldr	r3, [pc, #40]	@ (800a8b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a886:	f04f 32ff 	mov.w	r2, #4294967295
 800a88a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a88c:	e008      	b.n	800a8a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a88e:	4b07      	ldr	r3, [pc, #28]	@ (800a8ac <prvResetNextTaskUnblockTime+0x38>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	4a04      	ldr	r2, [pc, #16]	@ (800a8b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a89e:	6013      	str	r3, [r2, #0]
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	24001f1c 	.word	0x24001f1c
 800a8b0:	24001f84 	.word	0x24001f84

0800a8b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e8 <xTaskGetSchedulerState+0x34>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	607b      	str	r3, [r7, #4]
 800a8c6:	e008      	b.n	800a8da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8c8:	4b08      	ldr	r3, [pc, #32]	@ (800a8ec <xTaskGetSchedulerState+0x38>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	607b      	str	r3, [r7, #4]
 800a8d4:	e001      	b.n	800a8da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8da:	687b      	ldr	r3, [r7, #4]
	}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	24001f70 	.word	0x24001f70
 800a8ec:	24001f8c 	.word	0x24001f8c

0800a8f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d051      	beq.n	800a9aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a90a:	4b2a      	ldr	r3, [pc, #168]	@ (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a910:	429a      	cmp	r2, r3
 800a912:	d241      	bcs.n	800a998 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	db06      	blt.n	800a92a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91c:	4b25      	ldr	r3, [pc, #148]	@ (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a922:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	6959      	ldr	r1, [r3, #20]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a932:	4613      	mov	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4a1f      	ldr	r2, [pc, #124]	@ (800a9b8 <xTaskPriorityInherit+0xc8>)
 800a93c:	4413      	add	r3, r2
 800a93e:	4299      	cmp	r1, r3
 800a940:	d122      	bne.n	800a988 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	3304      	adds	r3, #4
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe f906 	bl	8008b58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a94c:	4b19      	ldr	r3, [pc, #100]	@ (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a95a:	4b18      	ldr	r3, [pc, #96]	@ (800a9bc <xTaskPriorityInherit+0xcc>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d903      	bls.n	800a96a <xTaskPriorityInherit+0x7a>
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a966:	4a15      	ldr	r2, [pc, #84]	@ (800a9bc <xTaskPriorityInherit+0xcc>)
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4a10      	ldr	r2, [pc, #64]	@ (800a9b8 <xTaskPriorityInherit+0xc8>)
 800a978:	441a      	add	r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	3304      	adds	r3, #4
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7fe f88c 	bl	8008a9e <vListInsertEnd>
 800a986:	e004      	b.n	800a992 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a988:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a992:	2301      	movs	r3, #1
 800a994:	60fb      	str	r3, [r7, #12]
 800a996:	e008      	b.n	800a9aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a99c:	4b05      	ldr	r3, [pc, #20]	@ (800a9b4 <xTaskPriorityInherit+0xc4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d201      	bcs.n	800a9aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
	}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	24001a90 	.word	0x24001a90
 800a9b8:	24001a94 	.word	0x24001a94
 800a9bc:	24001f6c 	.word	0x24001f6c

0800a9c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d058      	beq.n	800aa88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9d6:	4b2f      	ldr	r3, [pc, #188]	@ (800aa94 <xTaskPriorityDisinherit+0xd4>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d00b      	beq.n	800a9f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	60fb      	str	r3, [r7, #12]
}
 800a9f2:	bf00      	nop
 800a9f4:	bf00      	nop
 800a9f6:	e7fd      	b.n	800a9f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10b      	bne.n	800aa18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	60bb      	str	r3, [r7, #8]
}
 800aa12:	bf00      	nop
 800aa14:	bf00      	nop
 800aa16:	e7fd      	b.n	800aa14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa1c:	1e5a      	subs	r2, r3, #1
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d02c      	beq.n	800aa88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d128      	bne.n	800aa88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	3304      	adds	r3, #4
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe f88c 	bl	8008b58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa58:	4b0f      	ldr	r3, [pc, #60]	@ (800aa98 <xTaskPriorityDisinherit+0xd8>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d903      	bls.n	800aa68 <xTaskPriorityDisinherit+0xa8>
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa64:	4a0c      	ldr	r2, [pc, #48]	@ (800aa98 <xTaskPriorityDisinherit+0xd8>)
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4413      	add	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4a09      	ldr	r2, [pc, #36]	@ (800aa9c <xTaskPriorityDisinherit+0xdc>)
 800aa76:	441a      	add	r2, r3
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4610      	mov	r0, r2
 800aa80:	f7fe f80d 	bl	8008a9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa84:	2301      	movs	r3, #1
 800aa86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa88:	697b      	ldr	r3, [r7, #20]
	}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	24001a90 	.word	0x24001a90
 800aa98:	24001f6c 	.word	0x24001f6c
 800aa9c:	24001a94 	.word	0x24001a94

0800aaa0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aaae:	2301      	movs	r3, #1
 800aab0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d06c      	beq.n	800ab92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10b      	bne.n	800aad8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	60fb      	str	r3, [r7, #12]
}
 800aad2:	bf00      	nop
 800aad4:	bf00      	nop
 800aad6:	e7fd      	b.n	800aad4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d902      	bls.n	800aae8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	61fb      	str	r3, [r7, #28]
 800aae6:	e002      	b.n	800aaee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d04c      	beq.n	800ab92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d147      	bne.n	800ab92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ab02:	4b26      	ldr	r3, [pc, #152]	@ (800ab9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d10b      	bne.n	800ab24 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	60bb      	str	r3, [r7, #8]
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	e7fd      	b.n	800ab20 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	69fa      	ldr	r2, [r7, #28]
 800ab2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	db04      	blt.n	800ab42 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	6959      	ldr	r1, [r3, #20]
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4a13      	ldr	r2, [pc, #76]	@ (800aba0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ab52:	4413      	add	r3, r2
 800ab54:	4299      	cmp	r1, r3
 800ab56:	d11c      	bne.n	800ab92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd fffb 	bl	8008b58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab66:	4b0f      	ldr	r3, [pc, #60]	@ (800aba4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d903      	bls.n	800ab76 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab72:	4a0c      	ldr	r2, [pc, #48]	@ (800aba4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4a07      	ldr	r2, [pc, #28]	@ (800aba0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ab84:	441a      	add	r2, r3
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	3304      	adds	r3, #4
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	f7fd ff86 	bl	8008a9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab92:	bf00      	nop
 800ab94:	3720      	adds	r7, #32
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	24001a90 	.word	0x24001a90
 800aba0:	24001a94 	.word	0x24001a94
 800aba4:	24001f6c 	.word	0x24001f6c

0800aba8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aba8:	b480      	push	{r7}
 800abaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800abac:	4b07      	ldr	r3, [pc, #28]	@ (800abcc <pvTaskIncrementMutexHeldCount+0x24>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d004      	beq.n	800abbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800abb4:	4b05      	ldr	r3, [pc, #20]	@ (800abcc <pvTaskIncrementMutexHeldCount+0x24>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abba:	3201      	adds	r2, #1
 800abbc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800abbe:	4b03      	ldr	r3, [pc, #12]	@ (800abcc <pvTaskIncrementMutexHeldCount+0x24>)
 800abc0:	681b      	ldr	r3, [r3, #0]
	}
 800abc2:	4618      	mov	r0, r3
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	24001a90 	.word	0x24001a90

0800abd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abda:	4b21      	ldr	r3, [pc, #132]	@ (800ac60 <prvAddCurrentTaskToDelayedList+0x90>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abe0:	4b20      	ldr	r3, [pc, #128]	@ (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3304      	adds	r3, #4
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fd ffb6 	bl	8008b58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf2:	d10a      	bne.n	800ac0a <prvAddCurrentTaskToDelayedList+0x3a>
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d007      	beq.n	800ac0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abfa:	4b1a      	ldr	r3, [pc, #104]	@ (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3304      	adds	r3, #4
 800ac00:	4619      	mov	r1, r3
 800ac02:	4819      	ldr	r0, [pc, #100]	@ (800ac68 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac04:	f7fd ff4b 	bl	8008a9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac08:	e026      	b.n	800ac58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4413      	add	r3, r2
 800ac10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac12:	4b14      	ldr	r3, [pc, #80]	@ (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d209      	bcs.n	800ac36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac22:	4b12      	ldr	r3, [pc, #72]	@ (800ac6c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	4b0f      	ldr	r3, [pc, #60]	@ (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4610      	mov	r0, r2
 800ac30:	f7fd ff59 	bl	8008ae6 <vListInsert>
}
 800ac34:	e010      	b.n	800ac58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac36:	4b0e      	ldr	r3, [pc, #56]	@ (800ac70 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4619      	mov	r1, r3
 800ac42:	4610      	mov	r0, r2
 800ac44:	f7fd ff4f 	bl	8008ae6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac48:	4b0a      	ldr	r3, [pc, #40]	@ (800ac74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d202      	bcs.n	800ac58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac52:	4a08      	ldr	r2, [pc, #32]	@ (800ac74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	6013      	str	r3, [r2, #0]
}
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	24001f68 	.word	0x24001f68
 800ac64:	24001a90 	.word	0x24001a90
 800ac68:	24001f50 	.word	0x24001f50
 800ac6c:	24001f20 	.word	0x24001f20
 800ac70:	24001f1c 	.word	0x24001f1c
 800ac74:	24001f84 	.word	0x24001f84

0800ac78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	@ 0x28
 800ac7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac82:	f000 fbb1 	bl	800b3e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac86:	4b1d      	ldr	r3, [pc, #116]	@ (800acfc <xTimerCreateTimerTask+0x84>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d021      	beq.n	800acd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac96:	1d3a      	adds	r2, r7, #4
 800ac98:	f107 0108 	add.w	r1, r7, #8
 800ac9c:	f107 030c 	add.w	r3, r7, #12
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fd feb5 	bl	8008a10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	9202      	str	r2, [sp, #8]
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	2302      	movs	r3, #2
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	2300      	movs	r3, #0
 800acb6:	460a      	mov	r2, r1
 800acb8:	4911      	ldr	r1, [pc, #68]	@ (800ad00 <xTimerCreateTimerTask+0x88>)
 800acba:	4812      	ldr	r0, [pc, #72]	@ (800ad04 <xTimerCreateTimerTask+0x8c>)
 800acbc:	f7fe ffa2 	bl	8009c04 <xTaskCreateStatic>
 800acc0:	4603      	mov	r3, r0
 800acc2:	4a11      	ldr	r2, [pc, #68]	@ (800ad08 <xTimerCreateTimerTask+0x90>)
 800acc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800acc6:	4b10      	ldr	r3, [pc, #64]	@ (800ad08 <xTimerCreateTimerTask+0x90>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800acce:	2301      	movs	r3, #1
 800acd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10b      	bne.n	800acf0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	613b      	str	r3, [r7, #16]
}
 800acea:	bf00      	nop
 800acec:	bf00      	nop
 800acee:	e7fd      	b.n	800acec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800acf0:	697b      	ldr	r3, [r7, #20]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3718      	adds	r7, #24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	24001fc0 	.word	0x24001fc0
 800ad00:	0800e668 	.word	0x0800e668
 800ad04:	0800af81 	.word	0x0800af81
 800ad08:	24001fc4 	.word	0x24001fc4

0800ad0c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af02      	add	r7, sp, #8
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ad1a:	202c      	movs	r0, #44	@ 0x2c
 800ad1c:	f000 fe16 	bl	800b94c <pvPortMalloc>
 800ad20:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00d      	beq.n	800ad44 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 f845 	bl	800adce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ad44:	697b      	ldr	r3, [r7, #20]
	}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b08a      	sub	sp, #40	@ 0x28
 800ad52:	af02      	add	r7, sp, #8
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	60b9      	str	r1, [r7, #8]
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ad5c:	232c      	movs	r3, #44	@ 0x2c
 800ad5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2b2c      	cmp	r3, #44	@ 0x2c
 800ad64:	d00b      	beq.n	800ad7e <xTimerCreateStatic+0x30>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	61bb      	str	r3, [r7, #24]
}
 800ad78:	bf00      	nop
 800ad7a:	bf00      	nop
 800ad7c:	e7fd      	b.n	800ad7a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ad80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10b      	bne.n	800ad9e <xTimerCreateStatic+0x50>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	617b      	str	r3, [r7, #20]
}
 800ad98:	bf00      	nop
 800ad9a:	bf00      	nop
 800ad9c:	e7fd      	b.n	800ad9a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ad9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00d      	beq.n	800adc4 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	2202      	movs	r2, #2
 800adac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 f805 	bl	800adce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800adc4:	69fb      	ldr	r3, [r7, #28]
	}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3720      	adds	r7, #32
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b086      	sub	sp, #24
 800add2:	af00      	add	r7, sp, #0
 800add4:	60f8      	str	r0, [r7, #12]
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	607a      	str	r2, [r7, #4]
 800adda:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10b      	bne.n	800adfa <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	617b      	str	r3, [r7, #20]
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop
 800adf8:	e7fd      	b.n	800adf6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800adfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01e      	beq.n	800ae3e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ae00:	f000 faf2 	bl	800b3e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ae10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae18:	6a3a      	ldr	r2, [r7, #32]
 800ae1a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	3304      	adds	r3, #4
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fd fe2f 	bl	8008a84 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d008      	beq.n	800ae3e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae32:	f043 0304 	orr.w	r3, r3, #4
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ae3e:	bf00      	nop
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08a      	sub	sp, #40	@ 0x28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10b      	bne.n	800ae78 <xTimerGenericCommand+0x30>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	623b      	str	r3, [r7, #32]
}
 800ae72:	bf00      	nop
 800ae74:	bf00      	nop
 800ae76:	e7fd      	b.n	800ae74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae78:	4b19      	ldr	r3, [pc, #100]	@ (800aee0 <xTimerGenericCommand+0x98>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d02a      	beq.n	800aed6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	dc18      	bgt.n	800aec4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae92:	f7ff fd0f 	bl	800a8b4 <xTaskGetSchedulerState>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d109      	bne.n	800aeb0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae9c:	4b10      	ldr	r3, [pc, #64]	@ (800aee0 <xTimerGenericCommand+0x98>)
 800ae9e:	6818      	ldr	r0, [r3, #0]
 800aea0:	f107 0110 	add.w	r1, r7, #16
 800aea4:	2300      	movs	r3, #0
 800aea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aea8:	f7fe f834 	bl	8008f14 <xQueueGenericSend>
 800aeac:	6278      	str	r0, [r7, #36]	@ 0x24
 800aeae:	e012      	b.n	800aed6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aeb0:	4b0b      	ldr	r3, [pc, #44]	@ (800aee0 <xTimerGenericCommand+0x98>)
 800aeb2:	6818      	ldr	r0, [r3, #0]
 800aeb4:	f107 0110 	add.w	r1, r7, #16
 800aeb8:	2300      	movs	r3, #0
 800aeba:	2200      	movs	r2, #0
 800aebc:	f7fe f82a 	bl	8008f14 <xQueueGenericSend>
 800aec0:	6278      	str	r0, [r7, #36]	@ 0x24
 800aec2:	e008      	b.n	800aed6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aec4:	4b06      	ldr	r3, [pc, #24]	@ (800aee0 <xTimerGenericCommand+0x98>)
 800aec6:	6818      	ldr	r0, [r3, #0]
 800aec8:	f107 0110 	add.w	r1, r7, #16
 800aecc:	2300      	movs	r3, #0
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	f7fe f922 	bl	8009118 <xQueueGenericSendFromISR>
 800aed4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3728      	adds	r7, #40	@ 0x28
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	24001fc0 	.word	0x24001fc0

0800aee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af02      	add	r7, sp, #8
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeee:	4b23      	ldr	r3, [pc, #140]	@ (800af7c <prvProcessExpiredTimer+0x98>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fd fe2b 	bl	8008b58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d023      	beq.n	800af58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	699a      	ldr	r2, [r3, #24]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	18d1      	adds	r1, r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	6978      	ldr	r0, [r7, #20]
 800af1e:	f000 f8d5 	bl	800b0cc <prvInsertTimerInActiveList>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d020      	beq.n	800af6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af28:	2300      	movs	r3, #0
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	2300      	movs	r3, #0
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	2100      	movs	r1, #0
 800af32:	6978      	ldr	r0, [r7, #20]
 800af34:	f7ff ff88 	bl	800ae48 <xTimerGenericCommand>
 800af38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d114      	bne.n	800af6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	60fb      	str	r3, [r7, #12]
}
 800af52:	bf00      	nop
 800af54:	bf00      	nop
 800af56:	e7fd      	b.n	800af54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af5e:	f023 0301 	bic.w	r3, r3, #1
 800af62:	b2da      	uxtb	r2, r3
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	6978      	ldr	r0, [r7, #20]
 800af70:	4798      	blx	r3
}
 800af72:	bf00      	nop
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	24001fb8 	.word	0x24001fb8

0800af80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af88:	f107 0308 	add.w	r3, r7, #8
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 f859 	bl	800b044 <prvGetNextExpireTime>
 800af92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	4619      	mov	r1, r3
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 f805 	bl	800afa8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af9e:	f000 f8d7 	bl	800b150 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afa2:	bf00      	nop
 800afa4:	e7f0      	b.n	800af88 <prvTimerTask+0x8>
	...

0800afa8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afb2:	f7ff f88b 	bl	800a0cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afb6:	f107 0308 	add.w	r3, r7, #8
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 f866 	bl	800b08c <prvSampleTimeNow>
 800afc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d130      	bne.n	800b02a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10a      	bne.n	800afe4 <prvProcessTimerOrBlockTask+0x3c>
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d806      	bhi.n	800afe4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afd6:	f7ff f887 	bl	800a0e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afda:	68f9      	ldr	r1, [r7, #12]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff ff81 	bl	800aee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afe2:	e024      	b.n	800b02e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d008      	beq.n	800affc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800afea:	4b13      	ldr	r3, [pc, #76]	@ (800b038 <prvProcessTimerOrBlockTask+0x90>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d101      	bne.n	800aff8 <prvProcessTimerOrBlockTask+0x50>
 800aff4:	2301      	movs	r3, #1
 800aff6:	e000      	b.n	800affa <prvProcessTimerOrBlockTask+0x52>
 800aff8:	2300      	movs	r3, #0
 800affa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800affc:	4b0f      	ldr	r3, [pc, #60]	@ (800b03c <prvProcessTimerOrBlockTask+0x94>)
 800affe:	6818      	ldr	r0, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	683a      	ldr	r2, [r7, #0]
 800b008:	4619      	mov	r1, r3
 800b00a:	f7fe fdc7 	bl	8009b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b00e:	f7ff f86b 	bl	800a0e8 <xTaskResumeAll>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10a      	bne.n	800b02e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b018:	4b09      	ldr	r3, [pc, #36]	@ (800b040 <prvProcessTimerOrBlockTask+0x98>)
 800b01a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	f3bf 8f6f 	isb	sy
}
 800b028:	e001      	b.n	800b02e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b02a:	f7ff f85d 	bl	800a0e8 <xTaskResumeAll>
}
 800b02e:	bf00      	nop
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	24001fbc 	.word	0x24001fbc
 800b03c:	24001fc0 	.word	0x24001fc0
 800b040:	e000ed04 	.word	0xe000ed04

0800b044 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b04c:	4b0e      	ldr	r3, [pc, #56]	@ (800b088 <prvGetNextExpireTime+0x44>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d101      	bne.n	800b05a <prvGetNextExpireTime+0x16>
 800b056:	2201      	movs	r2, #1
 800b058:	e000      	b.n	800b05c <prvGetNextExpireTime+0x18>
 800b05a:	2200      	movs	r2, #0
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d105      	bne.n	800b074 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b068:	4b07      	ldr	r3, [pc, #28]	@ (800b088 <prvGetNextExpireTime+0x44>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	60fb      	str	r3, [r7, #12]
 800b072:	e001      	b.n	800b078 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b074:	2300      	movs	r3, #0
 800b076:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b078:	68fb      	ldr	r3, [r7, #12]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	24001fb8 	.word	0x24001fb8

0800b08c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b094:	f7ff f8c6 	bl	800a224 <xTaskGetTickCount>
 800b098:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b09a:	4b0b      	ldr	r3, [pc, #44]	@ (800b0c8 <prvSampleTimeNow+0x3c>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d205      	bcs.n	800b0b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0a4:	f000 f93a 	bl	800b31c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	e002      	b.n	800b0b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0b6:	4a04      	ldr	r2, [pc, #16]	@ (800b0c8 <prvSampleTimeNow+0x3c>)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	24001fc8 	.word	0x24001fc8

0800b0cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d812      	bhi.n	800b118 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	1ad2      	subs	r2, r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d302      	bcc.n	800b106 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b100:	2301      	movs	r3, #1
 800b102:	617b      	str	r3, [r7, #20]
 800b104:	e01b      	b.n	800b13e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b106:	4b10      	ldr	r3, [pc, #64]	@ (800b148 <prvInsertTimerInActiveList+0x7c>)
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3304      	adds	r3, #4
 800b10e:	4619      	mov	r1, r3
 800b110:	4610      	mov	r0, r2
 800b112:	f7fd fce8 	bl	8008ae6 <vListInsert>
 800b116:	e012      	b.n	800b13e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d206      	bcs.n	800b12e <prvInsertTimerInActiveList+0x62>
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	429a      	cmp	r2, r3
 800b126:	d302      	bcc.n	800b12e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b128:	2301      	movs	r3, #1
 800b12a:	617b      	str	r3, [r7, #20]
 800b12c:	e007      	b.n	800b13e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b12e:	4b07      	ldr	r3, [pc, #28]	@ (800b14c <prvInsertTimerInActiveList+0x80>)
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3304      	adds	r3, #4
 800b136:	4619      	mov	r1, r3
 800b138:	4610      	mov	r0, r2
 800b13a:	f7fd fcd4 	bl	8008ae6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b13e:	697b      	ldr	r3, [r7, #20]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	24001fbc 	.word	0x24001fbc
 800b14c:	24001fb8 	.word	0x24001fb8

0800b150 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08e      	sub	sp, #56	@ 0x38
 800b154:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b156:	e0ce      	b.n	800b2f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	da19      	bge.n	800b192 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b15e:	1d3b      	adds	r3, r7, #4
 800b160:	3304      	adds	r3, #4
 800b162:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10b      	bne.n	800b182 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	61fb      	str	r3, [r7, #28]
}
 800b17c:	bf00      	nop
 800b17e:	bf00      	nop
 800b180:	e7fd      	b.n	800b17e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b188:	6850      	ldr	r0, [r2, #4]
 800b18a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b18c:	6892      	ldr	r2, [r2, #8]
 800b18e:	4611      	mov	r1, r2
 800b190:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f2c0 80ae 	blt.w	800b2f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d004      	beq.n	800b1b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fd fcd4 	bl	8008b58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff ff6a 	bl	800b08c <prvSampleTimeNow>
 800b1b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b09      	cmp	r3, #9
 800b1be:	f200 8097 	bhi.w	800b2f0 <prvProcessReceivedCommands+0x1a0>
 800b1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c8 <prvProcessReceivedCommands+0x78>)
 800b1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c8:	0800b1f1 	.word	0x0800b1f1
 800b1cc:	0800b1f1 	.word	0x0800b1f1
 800b1d0:	0800b1f1 	.word	0x0800b1f1
 800b1d4:	0800b267 	.word	0x0800b267
 800b1d8:	0800b27b 	.word	0x0800b27b
 800b1dc:	0800b2c7 	.word	0x0800b2c7
 800b1e0:	0800b1f1 	.word	0x0800b1f1
 800b1e4:	0800b1f1 	.word	0x0800b1f1
 800b1e8:	0800b267 	.word	0x0800b267
 800b1ec:	0800b27b 	.word	0x0800b27b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1f6:	f043 0301 	orr.w	r3, r3, #1
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	18d1      	adds	r1, r2, r3
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b20e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b210:	f7ff ff5c 	bl	800b0cc <prvInsertTimerInActiveList>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d06c      	beq.n	800b2f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b220:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d061      	beq.n	800b2f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	441a      	add	r2, r3
 800b238:	2300      	movs	r3, #0
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	2300      	movs	r3, #0
 800b23e:	2100      	movs	r1, #0
 800b240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b242:	f7ff fe01 	bl	800ae48 <xTimerGenericCommand>
 800b246:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d152      	bne.n	800b2f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	61bb      	str	r3, [r7, #24]
}
 800b260:	bf00      	nop
 800b262:	bf00      	nop
 800b264:	e7fd      	b.n	800b262 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b26c:	f023 0301 	bic.w	r3, r3, #1
 800b270:	b2da      	uxtb	r2, r3
 800b272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b274:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b278:	e03d      	b.n	800b2f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b280:	f043 0301 	orr.w	r3, r3, #1
 800b284:	b2da      	uxtb	r2, r3
 800b286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b288:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b290:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10b      	bne.n	800b2b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	617b      	str	r3, [r7, #20]
}
 800b2ac:	bf00      	nop
 800b2ae:	bf00      	nop
 800b2b0:	e7fd      	b.n	800b2ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b4:	699a      	ldr	r2, [r3, #24]
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b8:	18d1      	adds	r1, r2, r3
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2c0:	f7ff ff04 	bl	800b0cc <prvInsertTimerInActiveList>
					break;
 800b2c4:	e017      	b.n	800b2f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2cc:	f003 0302 	and.w	r3, r3, #2
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d103      	bne.n	800b2dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b2d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2d6:	f000 fc07 	bl	800bae8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2da:	e00c      	b.n	800b2f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2e2:	f023 0301 	bic.w	r3, r3, #1
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b2ee:	e002      	b.n	800b2f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b2f0:	bf00      	nop
 800b2f2:	e000      	b.n	800b2f6 <prvProcessReceivedCommands+0x1a6>
					break;
 800b2f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2f6:	4b08      	ldr	r3, [pc, #32]	@ (800b318 <prvProcessReceivedCommands+0x1c8>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	1d39      	adds	r1, r7, #4
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe f838 	bl	8009374 <xQueueReceive>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	f47f af26 	bne.w	800b158 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b30c:	bf00      	nop
 800b30e:	bf00      	nop
 800b310:	3730      	adds	r7, #48	@ 0x30
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	24001fc0 	.word	0x24001fc0

0800b31c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b088      	sub	sp, #32
 800b320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b322:	e049      	b.n	800b3b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b324:	4b2e      	ldr	r3, [pc, #184]	@ (800b3e0 <prvSwitchTimerLists+0xc4>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b32e:	4b2c      	ldr	r3, [pc, #176]	@ (800b3e0 <prvSwitchTimerLists+0xc4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	3304      	adds	r3, #4
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fd fc0b 	bl	8008b58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d02f      	beq.n	800b3b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	693a      	ldr	r2, [r7, #16]
 800b35e:	4413      	add	r3, r2
 800b360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	429a      	cmp	r2, r3
 800b368:	d90e      	bls.n	800b388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b376:	4b1a      	ldr	r3, [pc, #104]	@ (800b3e0 <prvSwitchTimerLists+0xc4>)
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3304      	adds	r3, #4
 800b37e:	4619      	mov	r1, r3
 800b380:	4610      	mov	r0, r2
 800b382:	f7fd fbb0 	bl	8008ae6 <vListInsert>
 800b386:	e017      	b.n	800b3b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b388:	2300      	movs	r3, #0
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	2300      	movs	r3, #0
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	2100      	movs	r1, #0
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7ff fd58 	bl	800ae48 <xTimerGenericCommand>
 800b398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10b      	bne.n	800b3b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	603b      	str	r3, [r7, #0]
}
 800b3b2:	bf00      	nop
 800b3b4:	bf00      	nop
 800b3b6:	e7fd      	b.n	800b3b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3b8:	4b09      	ldr	r3, [pc, #36]	@ (800b3e0 <prvSwitchTimerLists+0xc4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1b0      	bne.n	800b324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3c2:	4b07      	ldr	r3, [pc, #28]	@ (800b3e0 <prvSwitchTimerLists+0xc4>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3c8:	4b06      	ldr	r3, [pc, #24]	@ (800b3e4 <prvSwitchTimerLists+0xc8>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a04      	ldr	r2, [pc, #16]	@ (800b3e0 <prvSwitchTimerLists+0xc4>)
 800b3ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3d0:	4a04      	ldr	r2, [pc, #16]	@ (800b3e4 <prvSwitchTimerLists+0xc8>)
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	6013      	str	r3, [r2, #0]
}
 800b3d6:	bf00      	nop
 800b3d8:	3718      	adds	r7, #24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	24001fb8 	.word	0x24001fb8
 800b3e4:	24001fbc 	.word	0x24001fbc

0800b3e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3ee:	f000 f98b 	bl	800b708 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3f2:	4b15      	ldr	r3, [pc, #84]	@ (800b448 <prvCheckForValidListAndQueue+0x60>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d120      	bne.n	800b43c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3fa:	4814      	ldr	r0, [pc, #80]	@ (800b44c <prvCheckForValidListAndQueue+0x64>)
 800b3fc:	f7fd fb22 	bl	8008a44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b400:	4813      	ldr	r0, [pc, #76]	@ (800b450 <prvCheckForValidListAndQueue+0x68>)
 800b402:	f7fd fb1f 	bl	8008a44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b406:	4b13      	ldr	r3, [pc, #76]	@ (800b454 <prvCheckForValidListAndQueue+0x6c>)
 800b408:	4a10      	ldr	r2, [pc, #64]	@ (800b44c <prvCheckForValidListAndQueue+0x64>)
 800b40a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b40c:	4b12      	ldr	r3, [pc, #72]	@ (800b458 <prvCheckForValidListAndQueue+0x70>)
 800b40e:	4a10      	ldr	r2, [pc, #64]	@ (800b450 <prvCheckForValidListAndQueue+0x68>)
 800b410:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b412:	2300      	movs	r3, #0
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	4b11      	ldr	r3, [pc, #68]	@ (800b45c <prvCheckForValidListAndQueue+0x74>)
 800b418:	4a11      	ldr	r2, [pc, #68]	@ (800b460 <prvCheckForValidListAndQueue+0x78>)
 800b41a:	2110      	movs	r1, #16
 800b41c:	200a      	movs	r0, #10
 800b41e:	f7fd fc2f 	bl	8008c80 <xQueueGenericCreateStatic>
 800b422:	4603      	mov	r3, r0
 800b424:	4a08      	ldr	r2, [pc, #32]	@ (800b448 <prvCheckForValidListAndQueue+0x60>)
 800b426:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b428:	4b07      	ldr	r3, [pc, #28]	@ (800b448 <prvCheckForValidListAndQueue+0x60>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d005      	beq.n	800b43c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b430:	4b05      	ldr	r3, [pc, #20]	@ (800b448 <prvCheckForValidListAndQueue+0x60>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	490b      	ldr	r1, [pc, #44]	@ (800b464 <prvCheckForValidListAndQueue+0x7c>)
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe fb5c 	bl	8009af4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b43c:	f000 f996 	bl	800b76c <vPortExitCritical>
}
 800b440:	bf00      	nop
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	24001fc0 	.word	0x24001fc0
 800b44c:	24001f90 	.word	0x24001f90
 800b450:	24001fa4 	.word	0x24001fa4
 800b454:	24001fb8 	.word	0x24001fb8
 800b458:	24001fbc 	.word	0x24001fbc
 800b45c:	2400206c 	.word	0x2400206c
 800b460:	24001fcc 	.word	0x24001fcc
 800b464:	0800e670 	.word	0x0800e670

0800b468 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10b      	bne.n	800b492 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	60fb      	str	r3, [r7, #12]
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b492:	f000 f939 	bl	800b708 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b49c:	f000 f966 	bl	800b76c <vPortExitCritical>

	return pvReturn;
 800b4a0:	693b      	ldr	r3, [r7, #16]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
	...

0800b4ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	3b04      	subs	r3, #4
 800b4bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b4c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3b04      	subs	r3, #4
 800b4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f023 0201 	bic.w	r2, r3, #1
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3b04      	subs	r3, #4
 800b4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4dc:	4a0c      	ldr	r2, [pc, #48]	@ (800b510 <pxPortInitialiseStack+0x64>)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3b14      	subs	r3, #20
 800b4e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3b04      	subs	r3, #4
 800b4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f06f 0202 	mvn.w	r2, #2
 800b4fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	3b20      	subs	r3, #32
 800b500:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b502:	68fb      	ldr	r3, [r7, #12]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	0800b515 	.word	0x0800b515

0800b514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b51e:	4b13      	ldr	r3, [pc, #76]	@ (800b56c <prvTaskExitError+0x58>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b526:	d00b      	beq.n	800b540 <prvTaskExitError+0x2c>
	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	60fb      	str	r3, [r7, #12]
}
 800b53a:	bf00      	nop
 800b53c:	bf00      	nop
 800b53e:	e7fd      	b.n	800b53c <prvTaskExitError+0x28>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	60bb      	str	r3, [r7, #8]
}
 800b552:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b554:	bf00      	nop
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0fc      	beq.n	800b556 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	24000010 	.word	0x24000010

0800b570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b570:	4b07      	ldr	r3, [pc, #28]	@ (800b590 <pxCurrentTCBConst2>)
 800b572:	6819      	ldr	r1, [r3, #0]
 800b574:	6808      	ldr	r0, [r1, #0]
 800b576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57a:	f380 8809 	msr	PSP, r0
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f04f 0000 	mov.w	r0, #0
 800b586:	f380 8811 	msr	BASEPRI, r0
 800b58a:	4770      	bx	lr
 800b58c:	f3af 8000 	nop.w

0800b590 <pxCurrentTCBConst2>:
 800b590:	24001a90 	.word	0x24001a90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop

0800b598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b598:	4808      	ldr	r0, [pc, #32]	@ (800b5bc <prvPortStartFirstTask+0x24>)
 800b59a:	6800      	ldr	r0, [r0, #0]
 800b59c:	6800      	ldr	r0, [r0, #0]
 800b59e:	f380 8808 	msr	MSP, r0
 800b5a2:	f04f 0000 	mov.w	r0, #0
 800b5a6:	f380 8814 	msr	CONTROL, r0
 800b5aa:	b662      	cpsie	i
 800b5ac:	b661      	cpsie	f
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	df00      	svc	0
 800b5b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5ba:	bf00      	nop
 800b5bc:	e000ed08 	.word	0xe000ed08

0800b5c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5c6:	4b47      	ldr	r3, [pc, #284]	@ (800b6e4 <xPortStartScheduler+0x124>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a47      	ldr	r2, [pc, #284]	@ (800b6e8 <xPortStartScheduler+0x128>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10b      	bne.n	800b5e8 <xPortStartScheduler+0x28>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	613b      	str	r3, [r7, #16]
}
 800b5e2:	bf00      	nop
 800b5e4:	bf00      	nop
 800b5e6:	e7fd      	b.n	800b5e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5e8:	4b3e      	ldr	r3, [pc, #248]	@ (800b6e4 <xPortStartScheduler+0x124>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a3f      	ldr	r2, [pc, #252]	@ (800b6ec <xPortStartScheduler+0x12c>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d10b      	bne.n	800b60a <xPortStartScheduler+0x4a>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	60fb      	str	r3, [r7, #12]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b60a:	4b39      	ldr	r3, [pc, #228]	@ (800b6f0 <xPortStartScheduler+0x130>)
 800b60c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	22ff      	movs	r2, #255	@ 0xff
 800b61a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b624:	78fb      	ldrb	r3, [r7, #3]
 800b626:	b2db      	uxtb	r3, r3
 800b628:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	4b31      	ldr	r3, [pc, #196]	@ (800b6f4 <xPortStartScheduler+0x134>)
 800b630:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b632:	4b31      	ldr	r3, [pc, #196]	@ (800b6f8 <xPortStartScheduler+0x138>)
 800b634:	2207      	movs	r2, #7
 800b636:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b638:	e009      	b.n	800b64e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b63a:	4b2f      	ldr	r3, [pc, #188]	@ (800b6f8 <xPortStartScheduler+0x138>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	3b01      	subs	r3, #1
 800b640:	4a2d      	ldr	r2, [pc, #180]	@ (800b6f8 <xPortStartScheduler+0x138>)
 800b642:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	b2db      	uxtb	r3, r3
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b64e:	78fb      	ldrb	r3, [r7, #3]
 800b650:	b2db      	uxtb	r3, r3
 800b652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b656:	2b80      	cmp	r3, #128	@ 0x80
 800b658:	d0ef      	beq.n	800b63a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b65a:	4b27      	ldr	r3, [pc, #156]	@ (800b6f8 <xPortStartScheduler+0x138>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f1c3 0307 	rsb	r3, r3, #7
 800b662:	2b04      	cmp	r3, #4
 800b664:	d00b      	beq.n	800b67e <xPortStartScheduler+0xbe>
	__asm volatile
 800b666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	60bb      	str	r3, [r7, #8]
}
 800b678:	bf00      	nop
 800b67a:	bf00      	nop
 800b67c:	e7fd      	b.n	800b67a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b67e:	4b1e      	ldr	r3, [pc, #120]	@ (800b6f8 <xPortStartScheduler+0x138>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	021b      	lsls	r3, r3, #8
 800b684:	4a1c      	ldr	r2, [pc, #112]	@ (800b6f8 <xPortStartScheduler+0x138>)
 800b686:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b688:	4b1b      	ldr	r3, [pc, #108]	@ (800b6f8 <xPortStartScheduler+0x138>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b690:	4a19      	ldr	r2, [pc, #100]	@ (800b6f8 <xPortStartScheduler+0x138>)
 800b692:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	b2da      	uxtb	r2, r3
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b69c:	4b17      	ldr	r3, [pc, #92]	@ (800b6fc <xPortStartScheduler+0x13c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a16      	ldr	r2, [pc, #88]	@ (800b6fc <xPortStartScheduler+0x13c>)
 800b6a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b6a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6a8:	4b14      	ldr	r3, [pc, #80]	@ (800b6fc <xPortStartScheduler+0x13c>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a13      	ldr	r2, [pc, #76]	@ (800b6fc <xPortStartScheduler+0x13c>)
 800b6ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b6b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6b4:	f000 f8da 	bl	800b86c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6b8:	4b11      	ldr	r3, [pc, #68]	@ (800b700 <xPortStartScheduler+0x140>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6be:	f000 f8f9 	bl	800b8b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6c2:	4b10      	ldr	r3, [pc, #64]	@ (800b704 <xPortStartScheduler+0x144>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a0f      	ldr	r2, [pc, #60]	@ (800b704 <xPortStartScheduler+0x144>)
 800b6c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b6cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6ce:	f7ff ff63 	bl	800b598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6d2:	f7fe fe71 	bl	800a3b8 <vTaskSwitchContext>
	prvTaskExitError();
 800b6d6:	f7ff ff1d 	bl	800b514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	e000ed00 	.word	0xe000ed00
 800b6e8:	410fc271 	.word	0x410fc271
 800b6ec:	410fc270 	.word	0x410fc270
 800b6f0:	e000e400 	.word	0xe000e400
 800b6f4:	240020bc 	.word	0x240020bc
 800b6f8:	240020c0 	.word	0x240020c0
 800b6fc:	e000ed20 	.word	0xe000ed20
 800b700:	24000010 	.word	0x24000010
 800b704:	e000ef34 	.word	0xe000ef34

0800b708 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	607b      	str	r3, [r7, #4]
}
 800b720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b722:	4b10      	ldr	r3, [pc, #64]	@ (800b764 <vPortEnterCritical+0x5c>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3301      	adds	r3, #1
 800b728:	4a0e      	ldr	r2, [pc, #56]	@ (800b764 <vPortEnterCritical+0x5c>)
 800b72a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b72c:	4b0d      	ldr	r3, [pc, #52]	@ (800b764 <vPortEnterCritical+0x5c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d110      	bne.n	800b756 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b734:	4b0c      	ldr	r3, [pc, #48]	@ (800b768 <vPortEnterCritical+0x60>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00b      	beq.n	800b756 <vPortEnterCritical+0x4e>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	603b      	str	r3, [r7, #0]
}
 800b750:	bf00      	nop
 800b752:	bf00      	nop
 800b754:	e7fd      	b.n	800b752 <vPortEnterCritical+0x4a>
	}
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	24000010 	.word	0x24000010
 800b768:	e000ed04 	.word	0xe000ed04

0800b76c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b772:	4b12      	ldr	r3, [pc, #72]	@ (800b7bc <vPortExitCritical+0x50>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10b      	bne.n	800b792 <vPortExitCritical+0x26>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	607b      	str	r3, [r7, #4]
}
 800b78c:	bf00      	nop
 800b78e:	bf00      	nop
 800b790:	e7fd      	b.n	800b78e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b792:	4b0a      	ldr	r3, [pc, #40]	@ (800b7bc <vPortExitCritical+0x50>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3b01      	subs	r3, #1
 800b798:	4a08      	ldr	r2, [pc, #32]	@ (800b7bc <vPortExitCritical+0x50>)
 800b79a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b79c:	4b07      	ldr	r3, [pc, #28]	@ (800b7bc <vPortExitCritical+0x50>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d105      	bne.n	800b7b0 <vPortExitCritical+0x44>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	f383 8811 	msr	BASEPRI, r3
}
 800b7ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	24000010 	.word	0x24000010

0800b7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7c0:	f3ef 8009 	mrs	r0, PSP
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	4b15      	ldr	r3, [pc, #84]	@ (800b820 <pxCurrentTCBConst>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	f01e 0f10 	tst.w	lr, #16
 800b7d0:	bf08      	it	eq
 800b7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7da:	6010      	str	r0, [r2, #0]
 800b7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b7e4:	f380 8811 	msr	BASEPRI, r0
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f7fe fde2 	bl	800a3b8 <vTaskSwitchContext>
 800b7f4:	f04f 0000 	mov.w	r0, #0
 800b7f8:	f380 8811 	msr	BASEPRI, r0
 800b7fc:	bc09      	pop	{r0, r3}
 800b7fe:	6819      	ldr	r1, [r3, #0]
 800b800:	6808      	ldr	r0, [r1, #0]
 800b802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b806:	f01e 0f10 	tst.w	lr, #16
 800b80a:	bf08      	it	eq
 800b80c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b810:	f380 8809 	msr	PSP, r0
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	f3af 8000 	nop.w

0800b820 <pxCurrentTCBConst>:
 800b820:	24001a90 	.word	0x24001a90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop

0800b828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	607b      	str	r3, [r7, #4]
}
 800b840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b842:	f7fe fcff 	bl	800a244 <xTaskIncrementTick>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b84c:	4b06      	ldr	r3, [pc, #24]	@ (800b868 <xPortSysTickHandler+0x40>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	2300      	movs	r3, #0
 800b856:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	f383 8811 	msr	BASEPRI, r3
}
 800b85e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	e000ed04 	.word	0xe000ed04

0800b86c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b870:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a0 <vPortSetupTimerInterrupt+0x34>)
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b876:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a4 <vPortSetupTimerInterrupt+0x38>)
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b87c:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a8 <vPortSetupTimerInterrupt+0x3c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a0a      	ldr	r2, [pc, #40]	@ (800b8ac <vPortSetupTimerInterrupt+0x40>)
 800b882:	fba2 2303 	umull	r2, r3, r2, r3
 800b886:	099b      	lsrs	r3, r3, #6
 800b888:	4a09      	ldr	r2, [pc, #36]	@ (800b8b0 <vPortSetupTimerInterrupt+0x44>)
 800b88a:	3b01      	subs	r3, #1
 800b88c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b88e:	4b04      	ldr	r3, [pc, #16]	@ (800b8a0 <vPortSetupTimerInterrupt+0x34>)
 800b890:	2207      	movs	r2, #7
 800b892:	601a      	str	r2, [r3, #0]
}
 800b894:	bf00      	nop
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	e000e010 	.word	0xe000e010
 800b8a4:	e000e018 	.word	0xe000e018
 800b8a8:	24000000 	.word	0x24000000
 800b8ac:	10624dd3 	.word	0x10624dd3
 800b8b0:	e000e014 	.word	0xe000e014

0800b8b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b8c4 <vPortEnableVFP+0x10>
 800b8b8:	6801      	ldr	r1, [r0, #0]
 800b8ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b8be:	6001      	str	r1, [r0, #0]
 800b8c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8c2:	bf00      	nop
 800b8c4:	e000ed88 	.word	0xe000ed88

0800b8c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8ce:	f3ef 8305 	mrs	r3, IPSR
 800b8d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2b0f      	cmp	r3, #15
 800b8d8:	d915      	bls.n	800b906 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8da:	4a18      	ldr	r2, [pc, #96]	@ (800b93c <vPortValidateInterruptPriority+0x74>)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4413      	add	r3, r2
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8e4:	4b16      	ldr	r3, [pc, #88]	@ (800b940 <vPortValidateInterruptPriority+0x78>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	7afa      	ldrb	r2, [r7, #11]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d20b      	bcs.n	800b906 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	607b      	str	r3, [r7, #4]
}
 800b900:	bf00      	nop
 800b902:	bf00      	nop
 800b904:	e7fd      	b.n	800b902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b906:	4b0f      	ldr	r3, [pc, #60]	@ (800b944 <vPortValidateInterruptPriority+0x7c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b90e:	4b0e      	ldr	r3, [pc, #56]	@ (800b948 <vPortValidateInterruptPriority+0x80>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	429a      	cmp	r2, r3
 800b914:	d90b      	bls.n	800b92e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	603b      	str	r3, [r7, #0]
}
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	e7fd      	b.n	800b92a <vPortValidateInterruptPriority+0x62>
	}
 800b92e:	bf00      	nop
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	e000e3f0 	.word	0xe000e3f0
 800b940:	240020bc 	.word	0x240020bc
 800b944:	e000ed0c 	.word	0xe000ed0c
 800b948:	240020c0 	.word	0x240020c0

0800b94c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	@ 0x28
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b954:	2300      	movs	r3, #0
 800b956:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b958:	f7fe fbb8 	bl	800a0cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b95c:	4b5c      	ldr	r3, [pc, #368]	@ (800bad0 <pvPortMalloc+0x184>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b964:	f000 f924 	bl	800bbb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b968:	4b5a      	ldr	r3, [pc, #360]	@ (800bad4 <pvPortMalloc+0x188>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4013      	ands	r3, r2
 800b970:	2b00      	cmp	r3, #0
 800b972:	f040 8095 	bne.w	800baa0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d01e      	beq.n	800b9ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b97c:	2208      	movs	r2, #8
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4413      	add	r3, r2
 800b982:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f003 0307 	and.w	r3, r3, #7
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d015      	beq.n	800b9ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f023 0307 	bic.w	r3, r3, #7
 800b994:	3308      	adds	r3, #8
 800b996:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f003 0307 	and.w	r3, r3, #7
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00b      	beq.n	800b9ba <pvPortMalloc+0x6e>
	__asm volatile
 800b9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	617b      	str	r3, [r7, #20]
}
 800b9b4:	bf00      	nop
 800b9b6:	bf00      	nop
 800b9b8:	e7fd      	b.n	800b9b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d06f      	beq.n	800baa0 <pvPortMalloc+0x154>
 800b9c0:	4b45      	ldr	r3, [pc, #276]	@ (800bad8 <pvPortMalloc+0x18c>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d86a      	bhi.n	800baa0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9ca:	4b44      	ldr	r3, [pc, #272]	@ (800badc <pvPortMalloc+0x190>)
 800b9cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9ce:	4b43      	ldr	r3, [pc, #268]	@ (800badc <pvPortMalloc+0x190>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9d4:	e004      	b.n	800b9e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d903      	bls.n	800b9f2 <pvPortMalloc+0xa6>
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1f1      	bne.n	800b9d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9f2:	4b37      	ldr	r3, [pc, #220]	@ (800bad0 <pvPortMalloc+0x184>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d051      	beq.n	800baa0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9fc:	6a3b      	ldr	r3, [r7, #32]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2208      	movs	r2, #8
 800ba02:	4413      	add	r3, r2
 800ba04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba10:	685a      	ldr	r2, [r3, #4]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	1ad2      	subs	r2, r2, r3
 800ba16:	2308      	movs	r3, #8
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d920      	bls.n	800ba60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4413      	add	r3, r2
 800ba24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	f003 0307 	and.w	r3, r3, #7
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00b      	beq.n	800ba48 <pvPortMalloc+0xfc>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	613b      	str	r3, [r7, #16]
}
 800ba42:	bf00      	nop
 800ba44:	bf00      	nop
 800ba46:	e7fd      	b.n	800ba44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	1ad2      	subs	r2, r2, r3
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba5a:	69b8      	ldr	r0, [r7, #24]
 800ba5c:	f000 f90a 	bl	800bc74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba60:	4b1d      	ldr	r3, [pc, #116]	@ (800bad8 <pvPortMalloc+0x18c>)
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	4a1b      	ldr	r2, [pc, #108]	@ (800bad8 <pvPortMalloc+0x18c>)
 800ba6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bad8 <pvPortMalloc+0x18c>)
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	4b1b      	ldr	r3, [pc, #108]	@ (800bae0 <pvPortMalloc+0x194>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d203      	bcs.n	800ba82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba7a:	4b17      	ldr	r3, [pc, #92]	@ (800bad8 <pvPortMalloc+0x18c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a18      	ldr	r2, [pc, #96]	@ (800bae0 <pvPortMalloc+0x194>)
 800ba80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	4b13      	ldr	r3, [pc, #76]	@ (800bad4 <pvPortMalloc+0x188>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	431a      	orrs	r2, r3
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba96:	4b13      	ldr	r3, [pc, #76]	@ (800bae4 <pvPortMalloc+0x198>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	4a11      	ldr	r2, [pc, #68]	@ (800bae4 <pvPortMalloc+0x198>)
 800ba9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800baa0:	f7fe fb22 	bl	800a0e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	f003 0307 	and.w	r3, r3, #7
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00b      	beq.n	800bac6 <pvPortMalloc+0x17a>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	60fb      	str	r3, [r7, #12]
}
 800bac0:	bf00      	nop
 800bac2:	bf00      	nop
 800bac4:	e7fd      	b.n	800bac2 <pvPortMalloc+0x176>
	return pvReturn;
 800bac6:	69fb      	ldr	r3, [r7, #28]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3728      	adds	r7, #40	@ 0x28
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	24005ccc 	.word	0x24005ccc
 800bad4:	24005ce0 	.word	0x24005ce0
 800bad8:	24005cd0 	.word	0x24005cd0
 800badc:	24005cc4 	.word	0x24005cc4
 800bae0:	24005cd4 	.word	0x24005cd4
 800bae4:	24005cd8 	.word	0x24005cd8

0800bae8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d04f      	beq.n	800bb9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bafa:	2308      	movs	r3, #8
 800bafc:	425b      	negs	r3, r3
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	4413      	add	r3, r2
 800bb02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	4b25      	ldr	r3, [pc, #148]	@ (800bba4 <vPortFree+0xbc>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4013      	ands	r3, r2
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10b      	bne.n	800bb2e <vPortFree+0x46>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	60fb      	str	r3, [r7, #12]
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	e7fd      	b.n	800bb2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00b      	beq.n	800bb4e <vPortFree+0x66>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	60bb      	str	r3, [r7, #8]
}
 800bb48:	bf00      	nop
 800bb4a:	bf00      	nop
 800bb4c:	e7fd      	b.n	800bb4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	4b14      	ldr	r3, [pc, #80]	@ (800bba4 <vPortFree+0xbc>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4013      	ands	r3, r2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d01e      	beq.n	800bb9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d11a      	bne.n	800bb9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	4b0e      	ldr	r3, [pc, #56]	@ (800bba4 <vPortFree+0xbc>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	43db      	mvns	r3, r3
 800bb6e:	401a      	ands	r2, r3
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb74:	f7fe faaa 	bl	800a0cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bba8 <vPortFree+0xc0>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4413      	add	r3, r2
 800bb82:	4a09      	ldr	r2, [pc, #36]	@ (800bba8 <vPortFree+0xc0>)
 800bb84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb86:	6938      	ldr	r0, [r7, #16]
 800bb88:	f000 f874 	bl	800bc74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb8c:	4b07      	ldr	r3, [pc, #28]	@ (800bbac <vPortFree+0xc4>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3301      	adds	r3, #1
 800bb92:	4a06      	ldr	r2, [pc, #24]	@ (800bbac <vPortFree+0xc4>)
 800bb94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb96:	f7fe faa7 	bl	800a0e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb9a:	bf00      	nop
 800bb9c:	3718      	adds	r7, #24
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	24005ce0 	.word	0x24005ce0
 800bba8:	24005cd0 	.word	0x24005cd0
 800bbac:	24005cdc 	.word	0x24005cdc

0800bbb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bbba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbbc:	4b27      	ldr	r3, [pc, #156]	@ (800bc5c <prvHeapInit+0xac>)
 800bbbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f003 0307 	and.w	r3, r3, #7
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00c      	beq.n	800bbe4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3307      	adds	r3, #7
 800bbce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f023 0307 	bic.w	r3, r3, #7
 800bbd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	4a1f      	ldr	r2, [pc, #124]	@ (800bc5c <prvHeapInit+0xac>)
 800bbe0:	4413      	add	r3, r2
 800bbe2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbe8:	4a1d      	ldr	r2, [pc, #116]	@ (800bc60 <prvHeapInit+0xb0>)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbee:	4b1c      	ldr	r3, [pc, #112]	@ (800bc60 <prvHeapInit+0xb0>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbfc:	2208      	movs	r2, #8
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	1a9b      	subs	r3, r3, r2
 800bc02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f023 0307 	bic.w	r3, r3, #7
 800bc0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	4a15      	ldr	r2, [pc, #84]	@ (800bc64 <prvHeapInit+0xb4>)
 800bc10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc12:	4b14      	ldr	r3, [pc, #80]	@ (800bc64 <prvHeapInit+0xb4>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2200      	movs	r2, #0
 800bc18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc1a:	4b12      	ldr	r3, [pc, #72]	@ (800bc64 <prvHeapInit+0xb4>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	1ad2      	subs	r2, r2, r3
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc30:	4b0c      	ldr	r3, [pc, #48]	@ (800bc64 <prvHeapInit+0xb4>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	4a0a      	ldr	r2, [pc, #40]	@ (800bc68 <prvHeapInit+0xb8>)
 800bc3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	4a09      	ldr	r2, [pc, #36]	@ (800bc6c <prvHeapInit+0xbc>)
 800bc46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc48:	4b09      	ldr	r3, [pc, #36]	@ (800bc70 <prvHeapInit+0xc0>)
 800bc4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bc4e:	601a      	str	r2, [r3, #0]
}
 800bc50:	bf00      	nop
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	240020c4 	.word	0x240020c4
 800bc60:	24005cc4 	.word	0x24005cc4
 800bc64:	24005ccc 	.word	0x24005ccc
 800bc68:	24005cd4 	.word	0x24005cd4
 800bc6c:	24005cd0 	.word	0x24005cd0
 800bc70:	24005ce0 	.word	0x24005ce0

0800bc74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc7c:	4b28      	ldr	r3, [pc, #160]	@ (800bd20 <prvInsertBlockIntoFreeList+0xac>)
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	e002      	b.n	800bc88 <prvInsertBlockIntoFreeList+0x14>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d8f7      	bhi.n	800bc82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d108      	bne.n	800bcb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	441a      	add	r2, r3
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	441a      	add	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d118      	bne.n	800bcfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	4b15      	ldr	r3, [pc, #84]	@ (800bd24 <prvInsertBlockIntoFreeList+0xb0>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d00d      	beq.n	800bcf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	685a      	ldr	r2, [r3, #4]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	441a      	add	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	601a      	str	r2, [r3, #0]
 800bcf0:	e008      	b.n	800bd04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcf2:	4b0c      	ldr	r3, [pc, #48]	@ (800bd24 <prvInsertBlockIntoFreeList+0xb0>)
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	e003      	b.n	800bd04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d002      	beq.n	800bd12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd12:	bf00      	nop
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	24005cc4 	.word	0x24005cc4
 800bd24:	24005ccc 	.word	0x24005ccc

0800bd28 <__cvt>:
 800bd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd2a:	ed2d 8b02 	vpush	{d8}
 800bd2e:	eeb0 8b40 	vmov.f64	d8, d0
 800bd32:	b085      	sub	sp, #20
 800bd34:	4617      	mov	r7, r2
 800bd36:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bd38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd3a:	ee18 2a90 	vmov	r2, s17
 800bd3e:	f025 0520 	bic.w	r5, r5, #32
 800bd42:	2a00      	cmp	r2, #0
 800bd44:	bfb6      	itet	lt
 800bd46:	222d      	movlt	r2, #45	@ 0x2d
 800bd48:	2200      	movge	r2, #0
 800bd4a:	eeb1 8b40 	vneglt.f64	d8, d0
 800bd4e:	2d46      	cmp	r5, #70	@ 0x46
 800bd50:	460c      	mov	r4, r1
 800bd52:	701a      	strb	r2, [r3, #0]
 800bd54:	d004      	beq.n	800bd60 <__cvt+0x38>
 800bd56:	2d45      	cmp	r5, #69	@ 0x45
 800bd58:	d100      	bne.n	800bd5c <__cvt+0x34>
 800bd5a:	3401      	adds	r4, #1
 800bd5c:	2102      	movs	r1, #2
 800bd5e:	e000      	b.n	800bd62 <__cvt+0x3a>
 800bd60:	2103      	movs	r1, #3
 800bd62:	ab03      	add	r3, sp, #12
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	ab02      	add	r3, sp, #8
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	4633      	mov	r3, r6
 800bd6e:	eeb0 0b48 	vmov.f64	d0, d8
 800bd72:	f000 fe95 	bl	800caa0 <_dtoa_r>
 800bd76:	2d47      	cmp	r5, #71	@ 0x47
 800bd78:	d114      	bne.n	800bda4 <__cvt+0x7c>
 800bd7a:	07fb      	lsls	r3, r7, #31
 800bd7c:	d50a      	bpl.n	800bd94 <__cvt+0x6c>
 800bd7e:	1902      	adds	r2, r0, r4
 800bd80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd88:	bf08      	it	eq
 800bd8a:	9203      	streq	r2, [sp, #12]
 800bd8c:	2130      	movs	r1, #48	@ 0x30
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d319      	bcc.n	800bdc8 <__cvt+0xa0>
 800bd94:	9b03      	ldr	r3, [sp, #12]
 800bd96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd98:	1a1b      	subs	r3, r3, r0
 800bd9a:	6013      	str	r3, [r2, #0]
 800bd9c:	b005      	add	sp, #20
 800bd9e:	ecbd 8b02 	vpop	{d8}
 800bda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bda4:	2d46      	cmp	r5, #70	@ 0x46
 800bda6:	eb00 0204 	add.w	r2, r0, r4
 800bdaa:	d1e9      	bne.n	800bd80 <__cvt+0x58>
 800bdac:	7803      	ldrb	r3, [r0, #0]
 800bdae:	2b30      	cmp	r3, #48	@ 0x30
 800bdb0:	d107      	bne.n	800bdc2 <__cvt+0x9a>
 800bdb2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdba:	bf1c      	itt	ne
 800bdbc:	f1c4 0401 	rsbne	r4, r4, #1
 800bdc0:	6034      	strne	r4, [r6, #0]
 800bdc2:	6833      	ldr	r3, [r6, #0]
 800bdc4:	441a      	add	r2, r3
 800bdc6:	e7db      	b.n	800bd80 <__cvt+0x58>
 800bdc8:	1c5c      	adds	r4, r3, #1
 800bdca:	9403      	str	r4, [sp, #12]
 800bdcc:	7019      	strb	r1, [r3, #0]
 800bdce:	e7de      	b.n	800bd8e <__cvt+0x66>

0800bdd0 <__exponent>:
 800bdd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdd2:	2900      	cmp	r1, #0
 800bdd4:	bfba      	itte	lt
 800bdd6:	4249      	neglt	r1, r1
 800bdd8:	232d      	movlt	r3, #45	@ 0x2d
 800bdda:	232b      	movge	r3, #43	@ 0x2b
 800bddc:	2909      	cmp	r1, #9
 800bdde:	7002      	strb	r2, [r0, #0]
 800bde0:	7043      	strb	r3, [r0, #1]
 800bde2:	dd29      	ble.n	800be38 <__exponent+0x68>
 800bde4:	f10d 0307 	add.w	r3, sp, #7
 800bde8:	461d      	mov	r5, r3
 800bdea:	270a      	movs	r7, #10
 800bdec:	461a      	mov	r2, r3
 800bdee:	fbb1 f6f7 	udiv	r6, r1, r7
 800bdf2:	fb07 1416 	mls	r4, r7, r6, r1
 800bdf6:	3430      	adds	r4, #48	@ 0x30
 800bdf8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	2c63      	cmp	r4, #99	@ 0x63
 800be00:	f103 33ff 	add.w	r3, r3, #4294967295
 800be04:	4631      	mov	r1, r6
 800be06:	dcf1      	bgt.n	800bdec <__exponent+0x1c>
 800be08:	3130      	adds	r1, #48	@ 0x30
 800be0a:	1e94      	subs	r4, r2, #2
 800be0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800be10:	1c41      	adds	r1, r0, #1
 800be12:	4623      	mov	r3, r4
 800be14:	42ab      	cmp	r3, r5
 800be16:	d30a      	bcc.n	800be2e <__exponent+0x5e>
 800be18:	f10d 0309 	add.w	r3, sp, #9
 800be1c:	1a9b      	subs	r3, r3, r2
 800be1e:	42ac      	cmp	r4, r5
 800be20:	bf88      	it	hi
 800be22:	2300      	movhi	r3, #0
 800be24:	3302      	adds	r3, #2
 800be26:	4403      	add	r3, r0
 800be28:	1a18      	subs	r0, r3, r0
 800be2a:	b003      	add	sp, #12
 800be2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be32:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be36:	e7ed      	b.n	800be14 <__exponent+0x44>
 800be38:	2330      	movs	r3, #48	@ 0x30
 800be3a:	3130      	adds	r1, #48	@ 0x30
 800be3c:	7083      	strb	r3, [r0, #2]
 800be3e:	70c1      	strb	r1, [r0, #3]
 800be40:	1d03      	adds	r3, r0, #4
 800be42:	e7f1      	b.n	800be28 <__exponent+0x58>
 800be44:	0000      	movs	r0, r0
	...

0800be48 <_printf_float>:
 800be48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4c:	b08d      	sub	sp, #52	@ 0x34
 800be4e:	460c      	mov	r4, r1
 800be50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be54:	4616      	mov	r6, r2
 800be56:	461f      	mov	r7, r3
 800be58:	4605      	mov	r5, r0
 800be5a:	f000 fcbd 	bl	800c7d8 <_localeconv_r>
 800be5e:	f8d0 b000 	ldr.w	fp, [r0]
 800be62:	4658      	mov	r0, fp
 800be64:	f7f4 fa94 	bl	8000390 <strlen>
 800be68:	2300      	movs	r3, #0
 800be6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800be6c:	f8d8 3000 	ldr.w	r3, [r8]
 800be70:	f894 9018 	ldrb.w	r9, [r4, #24]
 800be74:	6822      	ldr	r2, [r4, #0]
 800be76:	9005      	str	r0, [sp, #20]
 800be78:	3307      	adds	r3, #7
 800be7a:	f023 0307 	bic.w	r3, r3, #7
 800be7e:	f103 0108 	add.w	r1, r3, #8
 800be82:	f8c8 1000 	str.w	r1, [r8]
 800be86:	ed93 0b00 	vldr	d0, [r3]
 800be8a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c0e8 <_printf_float+0x2a0>
 800be8e:	eeb0 7bc0 	vabs.f64	d7, d0
 800be92:	eeb4 7b46 	vcmp.f64	d7, d6
 800be96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800be9e:	dd24      	ble.n	800beea <_printf_float+0xa2>
 800bea0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea8:	d502      	bpl.n	800beb0 <_printf_float+0x68>
 800beaa:	232d      	movs	r3, #45	@ 0x2d
 800beac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800beb0:	498f      	ldr	r1, [pc, #572]	@ (800c0f0 <_printf_float+0x2a8>)
 800beb2:	4b90      	ldr	r3, [pc, #576]	@ (800c0f4 <_printf_float+0x2ac>)
 800beb4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800beb8:	bf94      	ite	ls
 800beba:	4688      	movls	r8, r1
 800bebc:	4698      	movhi	r8, r3
 800bebe:	f022 0204 	bic.w	r2, r2, #4
 800bec2:	2303      	movs	r3, #3
 800bec4:	6123      	str	r3, [r4, #16]
 800bec6:	6022      	str	r2, [r4, #0]
 800bec8:	f04f 0a00 	mov.w	sl, #0
 800becc:	9700      	str	r7, [sp, #0]
 800bece:	4633      	mov	r3, r6
 800bed0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bed2:	4621      	mov	r1, r4
 800bed4:	4628      	mov	r0, r5
 800bed6:	f000 f9d1 	bl	800c27c <_printf_common>
 800beda:	3001      	adds	r0, #1
 800bedc:	f040 8089 	bne.w	800bff2 <_printf_float+0x1aa>
 800bee0:	f04f 30ff 	mov.w	r0, #4294967295
 800bee4:	b00d      	add	sp, #52	@ 0x34
 800bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beea:	eeb4 0b40 	vcmp.f64	d0, d0
 800beee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef2:	d709      	bvc.n	800bf08 <_printf_float+0xc0>
 800bef4:	ee10 3a90 	vmov	r3, s1
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bfbc      	itt	lt
 800befc:	232d      	movlt	r3, #45	@ 0x2d
 800befe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bf02:	497d      	ldr	r1, [pc, #500]	@ (800c0f8 <_printf_float+0x2b0>)
 800bf04:	4b7d      	ldr	r3, [pc, #500]	@ (800c0fc <_printf_float+0x2b4>)
 800bf06:	e7d5      	b.n	800beb4 <_printf_float+0x6c>
 800bf08:	6863      	ldr	r3, [r4, #4]
 800bf0a:	1c59      	adds	r1, r3, #1
 800bf0c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bf10:	d139      	bne.n	800bf86 <_printf_float+0x13e>
 800bf12:	2306      	movs	r3, #6
 800bf14:	6063      	str	r3, [r4, #4]
 800bf16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	6022      	str	r2, [r4, #0]
 800bf1e:	9303      	str	r3, [sp, #12]
 800bf20:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bf26:	ab09      	add	r3, sp, #36	@ 0x24
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	6861      	ldr	r1, [r4, #4]
 800bf2c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf30:	4628      	mov	r0, r5
 800bf32:	f7ff fef9 	bl	800bd28 <__cvt>
 800bf36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	d129      	bne.n	800bf94 <_printf_float+0x14c>
 800bf40:	1cc8      	adds	r0, r1, #3
 800bf42:	db02      	blt.n	800bf4a <_printf_float+0x102>
 800bf44:	6863      	ldr	r3, [r4, #4]
 800bf46:	4299      	cmp	r1, r3
 800bf48:	dd41      	ble.n	800bfce <_printf_float+0x186>
 800bf4a:	f1a9 0902 	sub.w	r9, r9, #2
 800bf4e:	fa5f f989 	uxtb.w	r9, r9
 800bf52:	3901      	subs	r1, #1
 800bf54:	464a      	mov	r2, r9
 800bf56:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bf5a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf5c:	f7ff ff38 	bl	800bdd0 <__exponent>
 800bf60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf62:	1813      	adds	r3, r2, r0
 800bf64:	2a01      	cmp	r2, #1
 800bf66:	4682      	mov	sl, r0
 800bf68:	6123      	str	r3, [r4, #16]
 800bf6a:	dc02      	bgt.n	800bf72 <_printf_float+0x12a>
 800bf6c:	6822      	ldr	r2, [r4, #0]
 800bf6e:	07d2      	lsls	r2, r2, #31
 800bf70:	d501      	bpl.n	800bf76 <_printf_float+0x12e>
 800bf72:	3301      	adds	r3, #1
 800bf74:	6123      	str	r3, [r4, #16]
 800bf76:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0a6      	beq.n	800becc <_printf_float+0x84>
 800bf7e:	232d      	movs	r3, #45	@ 0x2d
 800bf80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf84:	e7a2      	b.n	800becc <_printf_float+0x84>
 800bf86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf8a:	d1c4      	bne.n	800bf16 <_printf_float+0xce>
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1c2      	bne.n	800bf16 <_printf_float+0xce>
 800bf90:	2301      	movs	r3, #1
 800bf92:	e7bf      	b.n	800bf14 <_printf_float+0xcc>
 800bf94:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bf98:	d9db      	bls.n	800bf52 <_printf_float+0x10a>
 800bf9a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bf9e:	d118      	bne.n	800bfd2 <_printf_float+0x18a>
 800bfa0:	2900      	cmp	r1, #0
 800bfa2:	6863      	ldr	r3, [r4, #4]
 800bfa4:	dd0b      	ble.n	800bfbe <_printf_float+0x176>
 800bfa6:	6121      	str	r1, [r4, #16]
 800bfa8:	b913      	cbnz	r3, 800bfb0 <_printf_float+0x168>
 800bfaa:	6822      	ldr	r2, [r4, #0]
 800bfac:	07d0      	lsls	r0, r2, #31
 800bfae:	d502      	bpl.n	800bfb6 <_printf_float+0x16e>
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	440b      	add	r3, r1
 800bfb4:	6123      	str	r3, [r4, #16]
 800bfb6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bfb8:	f04f 0a00 	mov.w	sl, #0
 800bfbc:	e7db      	b.n	800bf76 <_printf_float+0x12e>
 800bfbe:	b913      	cbnz	r3, 800bfc6 <_printf_float+0x17e>
 800bfc0:	6822      	ldr	r2, [r4, #0]
 800bfc2:	07d2      	lsls	r2, r2, #31
 800bfc4:	d501      	bpl.n	800bfca <_printf_float+0x182>
 800bfc6:	3302      	adds	r3, #2
 800bfc8:	e7f4      	b.n	800bfb4 <_printf_float+0x16c>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e7f2      	b.n	800bfb4 <_printf_float+0x16c>
 800bfce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bfd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfd4:	4299      	cmp	r1, r3
 800bfd6:	db05      	blt.n	800bfe4 <_printf_float+0x19c>
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	6121      	str	r1, [r4, #16]
 800bfdc:	07d8      	lsls	r0, r3, #31
 800bfde:	d5ea      	bpl.n	800bfb6 <_printf_float+0x16e>
 800bfe0:	1c4b      	adds	r3, r1, #1
 800bfe2:	e7e7      	b.n	800bfb4 <_printf_float+0x16c>
 800bfe4:	2900      	cmp	r1, #0
 800bfe6:	bfd4      	ite	le
 800bfe8:	f1c1 0202 	rsble	r2, r1, #2
 800bfec:	2201      	movgt	r2, #1
 800bfee:	4413      	add	r3, r2
 800bff0:	e7e0      	b.n	800bfb4 <_printf_float+0x16c>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	055a      	lsls	r2, r3, #21
 800bff6:	d407      	bmi.n	800c008 <_printf_float+0x1c0>
 800bff8:	6923      	ldr	r3, [r4, #16]
 800bffa:	4642      	mov	r2, r8
 800bffc:	4631      	mov	r1, r6
 800bffe:	4628      	mov	r0, r5
 800c000:	47b8      	blx	r7
 800c002:	3001      	adds	r0, #1
 800c004:	d12a      	bne.n	800c05c <_printf_float+0x214>
 800c006:	e76b      	b.n	800bee0 <_printf_float+0x98>
 800c008:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c00c:	f240 80e0 	bls.w	800c1d0 <_printf_float+0x388>
 800c010:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c014:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c01c:	d133      	bne.n	800c086 <_printf_float+0x23e>
 800c01e:	4a38      	ldr	r2, [pc, #224]	@ (800c100 <_printf_float+0x2b8>)
 800c020:	2301      	movs	r3, #1
 800c022:	4631      	mov	r1, r6
 800c024:	4628      	mov	r0, r5
 800c026:	47b8      	blx	r7
 800c028:	3001      	adds	r0, #1
 800c02a:	f43f af59 	beq.w	800bee0 <_printf_float+0x98>
 800c02e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c032:	4543      	cmp	r3, r8
 800c034:	db02      	blt.n	800c03c <_printf_float+0x1f4>
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	07d8      	lsls	r0, r3, #31
 800c03a:	d50f      	bpl.n	800c05c <_printf_float+0x214>
 800c03c:	9b05      	ldr	r3, [sp, #20]
 800c03e:	465a      	mov	r2, fp
 800c040:	4631      	mov	r1, r6
 800c042:	4628      	mov	r0, r5
 800c044:	47b8      	blx	r7
 800c046:	3001      	adds	r0, #1
 800c048:	f43f af4a 	beq.w	800bee0 <_printf_float+0x98>
 800c04c:	f04f 0900 	mov.w	r9, #0
 800c050:	f108 38ff 	add.w	r8, r8, #4294967295
 800c054:	f104 0a1a 	add.w	sl, r4, #26
 800c058:	45c8      	cmp	r8, r9
 800c05a:	dc09      	bgt.n	800c070 <_printf_float+0x228>
 800c05c:	6823      	ldr	r3, [r4, #0]
 800c05e:	079b      	lsls	r3, r3, #30
 800c060:	f100 8107 	bmi.w	800c272 <_printf_float+0x42a>
 800c064:	68e0      	ldr	r0, [r4, #12]
 800c066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c068:	4298      	cmp	r0, r3
 800c06a:	bfb8      	it	lt
 800c06c:	4618      	movlt	r0, r3
 800c06e:	e739      	b.n	800bee4 <_printf_float+0x9c>
 800c070:	2301      	movs	r3, #1
 800c072:	4652      	mov	r2, sl
 800c074:	4631      	mov	r1, r6
 800c076:	4628      	mov	r0, r5
 800c078:	47b8      	blx	r7
 800c07a:	3001      	adds	r0, #1
 800c07c:	f43f af30 	beq.w	800bee0 <_printf_float+0x98>
 800c080:	f109 0901 	add.w	r9, r9, #1
 800c084:	e7e8      	b.n	800c058 <_printf_float+0x210>
 800c086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c088:	2b00      	cmp	r3, #0
 800c08a:	dc3b      	bgt.n	800c104 <_printf_float+0x2bc>
 800c08c:	4a1c      	ldr	r2, [pc, #112]	@ (800c100 <_printf_float+0x2b8>)
 800c08e:	2301      	movs	r3, #1
 800c090:	4631      	mov	r1, r6
 800c092:	4628      	mov	r0, r5
 800c094:	47b8      	blx	r7
 800c096:	3001      	adds	r0, #1
 800c098:	f43f af22 	beq.w	800bee0 <_printf_float+0x98>
 800c09c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c0a0:	ea59 0303 	orrs.w	r3, r9, r3
 800c0a4:	d102      	bne.n	800c0ac <_printf_float+0x264>
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	07d9      	lsls	r1, r3, #31
 800c0aa:	d5d7      	bpl.n	800c05c <_printf_float+0x214>
 800c0ac:	9b05      	ldr	r3, [sp, #20]
 800c0ae:	465a      	mov	r2, fp
 800c0b0:	4631      	mov	r1, r6
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	47b8      	blx	r7
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	f43f af12 	beq.w	800bee0 <_printf_float+0x98>
 800c0bc:	f04f 0a00 	mov.w	sl, #0
 800c0c0:	f104 0b1a 	add.w	fp, r4, #26
 800c0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0c6:	425b      	negs	r3, r3
 800c0c8:	4553      	cmp	r3, sl
 800c0ca:	dc01      	bgt.n	800c0d0 <_printf_float+0x288>
 800c0cc:	464b      	mov	r3, r9
 800c0ce:	e794      	b.n	800bffa <_printf_float+0x1b2>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	465a      	mov	r2, fp
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	47b8      	blx	r7
 800c0da:	3001      	adds	r0, #1
 800c0dc:	f43f af00 	beq.w	800bee0 <_printf_float+0x98>
 800c0e0:	f10a 0a01 	add.w	sl, sl, #1
 800c0e4:	e7ee      	b.n	800c0c4 <_printf_float+0x27c>
 800c0e6:	bf00      	nop
 800c0e8:	ffffffff 	.word	0xffffffff
 800c0ec:	7fefffff 	.word	0x7fefffff
 800c0f0:	0800e71c 	.word	0x0800e71c
 800c0f4:	0800e720 	.word	0x0800e720
 800c0f8:	0800e724 	.word	0x0800e724
 800c0fc:	0800e728 	.word	0x0800e728
 800c100:	0800e72c 	.word	0x0800e72c
 800c104:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c106:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c10a:	4553      	cmp	r3, sl
 800c10c:	bfa8      	it	ge
 800c10e:	4653      	movge	r3, sl
 800c110:	2b00      	cmp	r3, #0
 800c112:	4699      	mov	r9, r3
 800c114:	dc37      	bgt.n	800c186 <_printf_float+0x33e>
 800c116:	2300      	movs	r3, #0
 800c118:	9307      	str	r3, [sp, #28]
 800c11a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c11e:	f104 021a 	add.w	r2, r4, #26
 800c122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c124:	9907      	ldr	r1, [sp, #28]
 800c126:	9306      	str	r3, [sp, #24]
 800c128:	eba3 0309 	sub.w	r3, r3, r9
 800c12c:	428b      	cmp	r3, r1
 800c12e:	dc31      	bgt.n	800c194 <_printf_float+0x34c>
 800c130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c132:	459a      	cmp	sl, r3
 800c134:	dc3b      	bgt.n	800c1ae <_printf_float+0x366>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	07da      	lsls	r2, r3, #31
 800c13a:	d438      	bmi.n	800c1ae <_printf_float+0x366>
 800c13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c13e:	ebaa 0903 	sub.w	r9, sl, r3
 800c142:	9b06      	ldr	r3, [sp, #24]
 800c144:	ebaa 0303 	sub.w	r3, sl, r3
 800c148:	4599      	cmp	r9, r3
 800c14a:	bfa8      	it	ge
 800c14c:	4699      	movge	r9, r3
 800c14e:	f1b9 0f00 	cmp.w	r9, #0
 800c152:	dc34      	bgt.n	800c1be <_printf_float+0x376>
 800c154:	f04f 0800 	mov.w	r8, #0
 800c158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c15c:	f104 0b1a 	add.w	fp, r4, #26
 800c160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c162:	ebaa 0303 	sub.w	r3, sl, r3
 800c166:	eba3 0309 	sub.w	r3, r3, r9
 800c16a:	4543      	cmp	r3, r8
 800c16c:	f77f af76 	ble.w	800c05c <_printf_float+0x214>
 800c170:	2301      	movs	r3, #1
 800c172:	465a      	mov	r2, fp
 800c174:	4631      	mov	r1, r6
 800c176:	4628      	mov	r0, r5
 800c178:	47b8      	blx	r7
 800c17a:	3001      	adds	r0, #1
 800c17c:	f43f aeb0 	beq.w	800bee0 <_printf_float+0x98>
 800c180:	f108 0801 	add.w	r8, r8, #1
 800c184:	e7ec      	b.n	800c160 <_printf_float+0x318>
 800c186:	4642      	mov	r2, r8
 800c188:	4631      	mov	r1, r6
 800c18a:	4628      	mov	r0, r5
 800c18c:	47b8      	blx	r7
 800c18e:	3001      	adds	r0, #1
 800c190:	d1c1      	bne.n	800c116 <_printf_float+0x2ce>
 800c192:	e6a5      	b.n	800bee0 <_printf_float+0x98>
 800c194:	2301      	movs	r3, #1
 800c196:	4631      	mov	r1, r6
 800c198:	4628      	mov	r0, r5
 800c19a:	9206      	str	r2, [sp, #24]
 800c19c:	47b8      	blx	r7
 800c19e:	3001      	adds	r0, #1
 800c1a0:	f43f ae9e 	beq.w	800bee0 <_printf_float+0x98>
 800c1a4:	9b07      	ldr	r3, [sp, #28]
 800c1a6:	9a06      	ldr	r2, [sp, #24]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	9307      	str	r3, [sp, #28]
 800c1ac:	e7b9      	b.n	800c122 <_printf_float+0x2da>
 800c1ae:	9b05      	ldr	r3, [sp, #20]
 800c1b0:	465a      	mov	r2, fp
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	47b8      	blx	r7
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d1bf      	bne.n	800c13c <_printf_float+0x2f4>
 800c1bc:	e690      	b.n	800bee0 <_printf_float+0x98>
 800c1be:	9a06      	ldr	r2, [sp, #24]
 800c1c0:	464b      	mov	r3, r9
 800c1c2:	4442      	add	r2, r8
 800c1c4:	4631      	mov	r1, r6
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	47b8      	blx	r7
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	d1c2      	bne.n	800c154 <_printf_float+0x30c>
 800c1ce:	e687      	b.n	800bee0 <_printf_float+0x98>
 800c1d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c1d4:	f1b9 0f01 	cmp.w	r9, #1
 800c1d8:	dc01      	bgt.n	800c1de <_printf_float+0x396>
 800c1da:	07db      	lsls	r3, r3, #31
 800c1dc:	d536      	bpl.n	800c24c <_printf_float+0x404>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	4642      	mov	r2, r8
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	47b8      	blx	r7
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	f43f ae79 	beq.w	800bee0 <_printf_float+0x98>
 800c1ee:	9b05      	ldr	r3, [sp, #20]
 800c1f0:	465a      	mov	r2, fp
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	47b8      	blx	r7
 800c1f8:	3001      	adds	r0, #1
 800c1fa:	f43f ae71 	beq.w	800bee0 <_printf_float+0x98>
 800c1fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c202:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c20e:	d018      	beq.n	800c242 <_printf_float+0x3fa>
 800c210:	464b      	mov	r3, r9
 800c212:	f108 0201 	add.w	r2, r8, #1
 800c216:	4631      	mov	r1, r6
 800c218:	4628      	mov	r0, r5
 800c21a:	47b8      	blx	r7
 800c21c:	3001      	adds	r0, #1
 800c21e:	d10c      	bne.n	800c23a <_printf_float+0x3f2>
 800c220:	e65e      	b.n	800bee0 <_printf_float+0x98>
 800c222:	2301      	movs	r3, #1
 800c224:	465a      	mov	r2, fp
 800c226:	4631      	mov	r1, r6
 800c228:	4628      	mov	r0, r5
 800c22a:	47b8      	blx	r7
 800c22c:	3001      	adds	r0, #1
 800c22e:	f43f ae57 	beq.w	800bee0 <_printf_float+0x98>
 800c232:	f108 0801 	add.w	r8, r8, #1
 800c236:	45c8      	cmp	r8, r9
 800c238:	dbf3      	blt.n	800c222 <_printf_float+0x3da>
 800c23a:	4653      	mov	r3, sl
 800c23c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c240:	e6dc      	b.n	800bffc <_printf_float+0x1b4>
 800c242:	f04f 0800 	mov.w	r8, #0
 800c246:	f104 0b1a 	add.w	fp, r4, #26
 800c24a:	e7f4      	b.n	800c236 <_printf_float+0x3ee>
 800c24c:	2301      	movs	r3, #1
 800c24e:	4642      	mov	r2, r8
 800c250:	e7e1      	b.n	800c216 <_printf_float+0x3ce>
 800c252:	2301      	movs	r3, #1
 800c254:	464a      	mov	r2, r9
 800c256:	4631      	mov	r1, r6
 800c258:	4628      	mov	r0, r5
 800c25a:	47b8      	blx	r7
 800c25c:	3001      	adds	r0, #1
 800c25e:	f43f ae3f 	beq.w	800bee0 <_printf_float+0x98>
 800c262:	f108 0801 	add.w	r8, r8, #1
 800c266:	68e3      	ldr	r3, [r4, #12]
 800c268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c26a:	1a5b      	subs	r3, r3, r1
 800c26c:	4543      	cmp	r3, r8
 800c26e:	dcf0      	bgt.n	800c252 <_printf_float+0x40a>
 800c270:	e6f8      	b.n	800c064 <_printf_float+0x21c>
 800c272:	f04f 0800 	mov.w	r8, #0
 800c276:	f104 0919 	add.w	r9, r4, #25
 800c27a:	e7f4      	b.n	800c266 <_printf_float+0x41e>

0800c27c <_printf_common>:
 800c27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c280:	4616      	mov	r6, r2
 800c282:	4698      	mov	r8, r3
 800c284:	688a      	ldr	r2, [r1, #8]
 800c286:	690b      	ldr	r3, [r1, #16]
 800c288:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c28c:	4293      	cmp	r3, r2
 800c28e:	bfb8      	it	lt
 800c290:	4613      	movlt	r3, r2
 800c292:	6033      	str	r3, [r6, #0]
 800c294:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c298:	4607      	mov	r7, r0
 800c29a:	460c      	mov	r4, r1
 800c29c:	b10a      	cbz	r2, 800c2a2 <_printf_common+0x26>
 800c29e:	3301      	adds	r3, #1
 800c2a0:	6033      	str	r3, [r6, #0]
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	0699      	lsls	r1, r3, #26
 800c2a6:	bf42      	ittt	mi
 800c2a8:	6833      	ldrmi	r3, [r6, #0]
 800c2aa:	3302      	addmi	r3, #2
 800c2ac:	6033      	strmi	r3, [r6, #0]
 800c2ae:	6825      	ldr	r5, [r4, #0]
 800c2b0:	f015 0506 	ands.w	r5, r5, #6
 800c2b4:	d106      	bne.n	800c2c4 <_printf_common+0x48>
 800c2b6:	f104 0a19 	add.w	sl, r4, #25
 800c2ba:	68e3      	ldr	r3, [r4, #12]
 800c2bc:	6832      	ldr	r2, [r6, #0]
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	42ab      	cmp	r3, r5
 800c2c2:	dc26      	bgt.n	800c312 <_printf_common+0x96>
 800c2c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2c8:	6822      	ldr	r2, [r4, #0]
 800c2ca:	3b00      	subs	r3, #0
 800c2cc:	bf18      	it	ne
 800c2ce:	2301      	movne	r3, #1
 800c2d0:	0692      	lsls	r2, r2, #26
 800c2d2:	d42b      	bmi.n	800c32c <_printf_common+0xb0>
 800c2d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2d8:	4641      	mov	r1, r8
 800c2da:	4638      	mov	r0, r7
 800c2dc:	47c8      	blx	r9
 800c2de:	3001      	adds	r0, #1
 800c2e0:	d01e      	beq.n	800c320 <_printf_common+0xa4>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	6922      	ldr	r2, [r4, #16]
 800c2e6:	f003 0306 	and.w	r3, r3, #6
 800c2ea:	2b04      	cmp	r3, #4
 800c2ec:	bf02      	ittt	eq
 800c2ee:	68e5      	ldreq	r5, [r4, #12]
 800c2f0:	6833      	ldreq	r3, [r6, #0]
 800c2f2:	1aed      	subeq	r5, r5, r3
 800c2f4:	68a3      	ldr	r3, [r4, #8]
 800c2f6:	bf0c      	ite	eq
 800c2f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2fc:	2500      	movne	r5, #0
 800c2fe:	4293      	cmp	r3, r2
 800c300:	bfc4      	itt	gt
 800c302:	1a9b      	subgt	r3, r3, r2
 800c304:	18ed      	addgt	r5, r5, r3
 800c306:	2600      	movs	r6, #0
 800c308:	341a      	adds	r4, #26
 800c30a:	42b5      	cmp	r5, r6
 800c30c:	d11a      	bne.n	800c344 <_printf_common+0xc8>
 800c30e:	2000      	movs	r0, #0
 800c310:	e008      	b.n	800c324 <_printf_common+0xa8>
 800c312:	2301      	movs	r3, #1
 800c314:	4652      	mov	r2, sl
 800c316:	4641      	mov	r1, r8
 800c318:	4638      	mov	r0, r7
 800c31a:	47c8      	blx	r9
 800c31c:	3001      	adds	r0, #1
 800c31e:	d103      	bne.n	800c328 <_printf_common+0xac>
 800c320:	f04f 30ff 	mov.w	r0, #4294967295
 800c324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c328:	3501      	adds	r5, #1
 800c32a:	e7c6      	b.n	800c2ba <_printf_common+0x3e>
 800c32c:	18e1      	adds	r1, r4, r3
 800c32e:	1c5a      	adds	r2, r3, #1
 800c330:	2030      	movs	r0, #48	@ 0x30
 800c332:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c336:	4422      	add	r2, r4
 800c338:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c33c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c340:	3302      	adds	r3, #2
 800c342:	e7c7      	b.n	800c2d4 <_printf_common+0x58>
 800c344:	2301      	movs	r3, #1
 800c346:	4622      	mov	r2, r4
 800c348:	4641      	mov	r1, r8
 800c34a:	4638      	mov	r0, r7
 800c34c:	47c8      	blx	r9
 800c34e:	3001      	adds	r0, #1
 800c350:	d0e6      	beq.n	800c320 <_printf_common+0xa4>
 800c352:	3601      	adds	r6, #1
 800c354:	e7d9      	b.n	800c30a <_printf_common+0x8e>
	...

0800c358 <_printf_i>:
 800c358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c35c:	7e0f      	ldrb	r7, [r1, #24]
 800c35e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c360:	2f78      	cmp	r7, #120	@ 0x78
 800c362:	4691      	mov	r9, r2
 800c364:	4680      	mov	r8, r0
 800c366:	460c      	mov	r4, r1
 800c368:	469a      	mov	sl, r3
 800c36a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c36e:	d807      	bhi.n	800c380 <_printf_i+0x28>
 800c370:	2f62      	cmp	r7, #98	@ 0x62
 800c372:	d80a      	bhi.n	800c38a <_printf_i+0x32>
 800c374:	2f00      	cmp	r7, #0
 800c376:	f000 80d2 	beq.w	800c51e <_printf_i+0x1c6>
 800c37a:	2f58      	cmp	r7, #88	@ 0x58
 800c37c:	f000 80b9 	beq.w	800c4f2 <_printf_i+0x19a>
 800c380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c384:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c388:	e03a      	b.n	800c400 <_printf_i+0xa8>
 800c38a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c38e:	2b15      	cmp	r3, #21
 800c390:	d8f6      	bhi.n	800c380 <_printf_i+0x28>
 800c392:	a101      	add	r1, pc, #4	@ (adr r1, 800c398 <_printf_i+0x40>)
 800c394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c398:	0800c3f1 	.word	0x0800c3f1
 800c39c:	0800c405 	.word	0x0800c405
 800c3a0:	0800c381 	.word	0x0800c381
 800c3a4:	0800c381 	.word	0x0800c381
 800c3a8:	0800c381 	.word	0x0800c381
 800c3ac:	0800c381 	.word	0x0800c381
 800c3b0:	0800c405 	.word	0x0800c405
 800c3b4:	0800c381 	.word	0x0800c381
 800c3b8:	0800c381 	.word	0x0800c381
 800c3bc:	0800c381 	.word	0x0800c381
 800c3c0:	0800c381 	.word	0x0800c381
 800c3c4:	0800c505 	.word	0x0800c505
 800c3c8:	0800c42f 	.word	0x0800c42f
 800c3cc:	0800c4bf 	.word	0x0800c4bf
 800c3d0:	0800c381 	.word	0x0800c381
 800c3d4:	0800c381 	.word	0x0800c381
 800c3d8:	0800c527 	.word	0x0800c527
 800c3dc:	0800c381 	.word	0x0800c381
 800c3e0:	0800c42f 	.word	0x0800c42f
 800c3e4:	0800c381 	.word	0x0800c381
 800c3e8:	0800c381 	.word	0x0800c381
 800c3ec:	0800c4c7 	.word	0x0800c4c7
 800c3f0:	6833      	ldr	r3, [r6, #0]
 800c3f2:	1d1a      	adds	r2, r3, #4
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6032      	str	r2, [r6, #0]
 800c3f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c400:	2301      	movs	r3, #1
 800c402:	e09d      	b.n	800c540 <_printf_i+0x1e8>
 800c404:	6833      	ldr	r3, [r6, #0]
 800c406:	6820      	ldr	r0, [r4, #0]
 800c408:	1d19      	adds	r1, r3, #4
 800c40a:	6031      	str	r1, [r6, #0]
 800c40c:	0606      	lsls	r6, r0, #24
 800c40e:	d501      	bpl.n	800c414 <_printf_i+0xbc>
 800c410:	681d      	ldr	r5, [r3, #0]
 800c412:	e003      	b.n	800c41c <_printf_i+0xc4>
 800c414:	0645      	lsls	r5, r0, #25
 800c416:	d5fb      	bpl.n	800c410 <_printf_i+0xb8>
 800c418:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c41c:	2d00      	cmp	r5, #0
 800c41e:	da03      	bge.n	800c428 <_printf_i+0xd0>
 800c420:	232d      	movs	r3, #45	@ 0x2d
 800c422:	426d      	negs	r5, r5
 800c424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c428:	4859      	ldr	r0, [pc, #356]	@ (800c590 <_printf_i+0x238>)
 800c42a:	230a      	movs	r3, #10
 800c42c:	e011      	b.n	800c452 <_printf_i+0xfa>
 800c42e:	6821      	ldr	r1, [r4, #0]
 800c430:	6833      	ldr	r3, [r6, #0]
 800c432:	0608      	lsls	r0, r1, #24
 800c434:	f853 5b04 	ldr.w	r5, [r3], #4
 800c438:	d402      	bmi.n	800c440 <_printf_i+0xe8>
 800c43a:	0649      	lsls	r1, r1, #25
 800c43c:	bf48      	it	mi
 800c43e:	b2ad      	uxthmi	r5, r5
 800c440:	2f6f      	cmp	r7, #111	@ 0x6f
 800c442:	4853      	ldr	r0, [pc, #332]	@ (800c590 <_printf_i+0x238>)
 800c444:	6033      	str	r3, [r6, #0]
 800c446:	bf14      	ite	ne
 800c448:	230a      	movne	r3, #10
 800c44a:	2308      	moveq	r3, #8
 800c44c:	2100      	movs	r1, #0
 800c44e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c452:	6866      	ldr	r6, [r4, #4]
 800c454:	60a6      	str	r6, [r4, #8]
 800c456:	2e00      	cmp	r6, #0
 800c458:	bfa2      	ittt	ge
 800c45a:	6821      	ldrge	r1, [r4, #0]
 800c45c:	f021 0104 	bicge.w	r1, r1, #4
 800c460:	6021      	strge	r1, [r4, #0]
 800c462:	b90d      	cbnz	r5, 800c468 <_printf_i+0x110>
 800c464:	2e00      	cmp	r6, #0
 800c466:	d04b      	beq.n	800c500 <_printf_i+0x1a8>
 800c468:	4616      	mov	r6, r2
 800c46a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c46e:	fb03 5711 	mls	r7, r3, r1, r5
 800c472:	5dc7      	ldrb	r7, [r0, r7]
 800c474:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c478:	462f      	mov	r7, r5
 800c47a:	42bb      	cmp	r3, r7
 800c47c:	460d      	mov	r5, r1
 800c47e:	d9f4      	bls.n	800c46a <_printf_i+0x112>
 800c480:	2b08      	cmp	r3, #8
 800c482:	d10b      	bne.n	800c49c <_printf_i+0x144>
 800c484:	6823      	ldr	r3, [r4, #0]
 800c486:	07df      	lsls	r7, r3, #31
 800c488:	d508      	bpl.n	800c49c <_printf_i+0x144>
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	6861      	ldr	r1, [r4, #4]
 800c48e:	4299      	cmp	r1, r3
 800c490:	bfde      	ittt	le
 800c492:	2330      	movle	r3, #48	@ 0x30
 800c494:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c498:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c49c:	1b92      	subs	r2, r2, r6
 800c49e:	6122      	str	r2, [r4, #16]
 800c4a0:	f8cd a000 	str.w	sl, [sp]
 800c4a4:	464b      	mov	r3, r9
 800c4a6:	aa03      	add	r2, sp, #12
 800c4a8:	4621      	mov	r1, r4
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	f7ff fee6 	bl	800c27c <_printf_common>
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d14a      	bne.n	800c54a <_printf_i+0x1f2>
 800c4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b8:	b004      	add	sp, #16
 800c4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	f043 0320 	orr.w	r3, r3, #32
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	4833      	ldr	r0, [pc, #204]	@ (800c594 <_printf_i+0x23c>)
 800c4c8:	2778      	movs	r7, #120	@ 0x78
 800c4ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	6831      	ldr	r1, [r6, #0]
 800c4d2:	061f      	lsls	r7, r3, #24
 800c4d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4d8:	d402      	bmi.n	800c4e0 <_printf_i+0x188>
 800c4da:	065f      	lsls	r7, r3, #25
 800c4dc:	bf48      	it	mi
 800c4de:	b2ad      	uxthmi	r5, r5
 800c4e0:	6031      	str	r1, [r6, #0]
 800c4e2:	07d9      	lsls	r1, r3, #31
 800c4e4:	bf44      	itt	mi
 800c4e6:	f043 0320 	orrmi.w	r3, r3, #32
 800c4ea:	6023      	strmi	r3, [r4, #0]
 800c4ec:	b11d      	cbz	r5, 800c4f6 <_printf_i+0x19e>
 800c4ee:	2310      	movs	r3, #16
 800c4f0:	e7ac      	b.n	800c44c <_printf_i+0xf4>
 800c4f2:	4827      	ldr	r0, [pc, #156]	@ (800c590 <_printf_i+0x238>)
 800c4f4:	e7e9      	b.n	800c4ca <_printf_i+0x172>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	f023 0320 	bic.w	r3, r3, #32
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	e7f6      	b.n	800c4ee <_printf_i+0x196>
 800c500:	4616      	mov	r6, r2
 800c502:	e7bd      	b.n	800c480 <_printf_i+0x128>
 800c504:	6833      	ldr	r3, [r6, #0]
 800c506:	6825      	ldr	r5, [r4, #0]
 800c508:	6961      	ldr	r1, [r4, #20]
 800c50a:	1d18      	adds	r0, r3, #4
 800c50c:	6030      	str	r0, [r6, #0]
 800c50e:	062e      	lsls	r6, r5, #24
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	d501      	bpl.n	800c518 <_printf_i+0x1c0>
 800c514:	6019      	str	r1, [r3, #0]
 800c516:	e002      	b.n	800c51e <_printf_i+0x1c6>
 800c518:	0668      	lsls	r0, r5, #25
 800c51a:	d5fb      	bpl.n	800c514 <_printf_i+0x1bc>
 800c51c:	8019      	strh	r1, [r3, #0]
 800c51e:	2300      	movs	r3, #0
 800c520:	6123      	str	r3, [r4, #16]
 800c522:	4616      	mov	r6, r2
 800c524:	e7bc      	b.n	800c4a0 <_printf_i+0x148>
 800c526:	6833      	ldr	r3, [r6, #0]
 800c528:	1d1a      	adds	r2, r3, #4
 800c52a:	6032      	str	r2, [r6, #0]
 800c52c:	681e      	ldr	r6, [r3, #0]
 800c52e:	6862      	ldr	r2, [r4, #4]
 800c530:	2100      	movs	r1, #0
 800c532:	4630      	mov	r0, r6
 800c534:	f7f3 fedc 	bl	80002f0 <memchr>
 800c538:	b108      	cbz	r0, 800c53e <_printf_i+0x1e6>
 800c53a:	1b80      	subs	r0, r0, r6
 800c53c:	6060      	str	r0, [r4, #4]
 800c53e:	6863      	ldr	r3, [r4, #4]
 800c540:	6123      	str	r3, [r4, #16]
 800c542:	2300      	movs	r3, #0
 800c544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c548:	e7aa      	b.n	800c4a0 <_printf_i+0x148>
 800c54a:	6923      	ldr	r3, [r4, #16]
 800c54c:	4632      	mov	r2, r6
 800c54e:	4649      	mov	r1, r9
 800c550:	4640      	mov	r0, r8
 800c552:	47d0      	blx	sl
 800c554:	3001      	adds	r0, #1
 800c556:	d0ad      	beq.n	800c4b4 <_printf_i+0x15c>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	079b      	lsls	r3, r3, #30
 800c55c:	d413      	bmi.n	800c586 <_printf_i+0x22e>
 800c55e:	68e0      	ldr	r0, [r4, #12]
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	4298      	cmp	r0, r3
 800c564:	bfb8      	it	lt
 800c566:	4618      	movlt	r0, r3
 800c568:	e7a6      	b.n	800c4b8 <_printf_i+0x160>
 800c56a:	2301      	movs	r3, #1
 800c56c:	4632      	mov	r2, r6
 800c56e:	4649      	mov	r1, r9
 800c570:	4640      	mov	r0, r8
 800c572:	47d0      	blx	sl
 800c574:	3001      	adds	r0, #1
 800c576:	d09d      	beq.n	800c4b4 <_printf_i+0x15c>
 800c578:	3501      	adds	r5, #1
 800c57a:	68e3      	ldr	r3, [r4, #12]
 800c57c:	9903      	ldr	r1, [sp, #12]
 800c57e:	1a5b      	subs	r3, r3, r1
 800c580:	42ab      	cmp	r3, r5
 800c582:	dcf2      	bgt.n	800c56a <_printf_i+0x212>
 800c584:	e7eb      	b.n	800c55e <_printf_i+0x206>
 800c586:	2500      	movs	r5, #0
 800c588:	f104 0619 	add.w	r6, r4, #25
 800c58c:	e7f5      	b.n	800c57a <_printf_i+0x222>
 800c58e:	bf00      	nop
 800c590:	0800e72e 	.word	0x0800e72e
 800c594:	0800e73f 	.word	0x0800e73f

0800c598 <std>:
 800c598:	2300      	movs	r3, #0
 800c59a:	b510      	push	{r4, lr}
 800c59c:	4604      	mov	r4, r0
 800c59e:	e9c0 3300 	strd	r3, r3, [r0]
 800c5a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5a6:	6083      	str	r3, [r0, #8]
 800c5a8:	8181      	strh	r1, [r0, #12]
 800c5aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5ac:	81c2      	strh	r2, [r0, #14]
 800c5ae:	6183      	str	r3, [r0, #24]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	2208      	movs	r2, #8
 800c5b4:	305c      	adds	r0, #92	@ 0x5c
 800c5b6:	f000 f906 	bl	800c7c6 <memset>
 800c5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f0 <std+0x58>)
 800c5bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5be:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f4 <std+0x5c>)
 800c5c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f8 <std+0x60>)
 800c5c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5fc <std+0x64>)
 800c5c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c600 <std+0x68>)
 800c5cc:	6224      	str	r4, [r4, #32]
 800c5ce:	429c      	cmp	r4, r3
 800c5d0:	d006      	beq.n	800c5e0 <std+0x48>
 800c5d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5d6:	4294      	cmp	r4, r2
 800c5d8:	d002      	beq.n	800c5e0 <std+0x48>
 800c5da:	33d0      	adds	r3, #208	@ 0xd0
 800c5dc:	429c      	cmp	r4, r3
 800c5de:	d105      	bne.n	800c5ec <std+0x54>
 800c5e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e8:	f000 b9c0 	b.w	800c96c <__retarget_lock_init_recursive>
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	bf00      	nop
 800c5f0:	0800c741 	.word	0x0800c741
 800c5f4:	0800c763 	.word	0x0800c763
 800c5f8:	0800c79b 	.word	0x0800c79b
 800c5fc:	0800c7bf 	.word	0x0800c7bf
 800c600:	24005ce4 	.word	0x24005ce4

0800c604 <stdio_exit_handler>:
 800c604:	4a02      	ldr	r2, [pc, #8]	@ (800c610 <stdio_exit_handler+0xc>)
 800c606:	4903      	ldr	r1, [pc, #12]	@ (800c614 <stdio_exit_handler+0x10>)
 800c608:	4803      	ldr	r0, [pc, #12]	@ (800c618 <stdio_exit_handler+0x14>)
 800c60a:	f000 b869 	b.w	800c6e0 <_fwalk_sglue>
 800c60e:	bf00      	nop
 800c610:	24000014 	.word	0x24000014
 800c614:	0800e1dd 	.word	0x0800e1dd
 800c618:	24000024 	.word	0x24000024

0800c61c <cleanup_stdio>:
 800c61c:	6841      	ldr	r1, [r0, #4]
 800c61e:	4b0c      	ldr	r3, [pc, #48]	@ (800c650 <cleanup_stdio+0x34>)
 800c620:	4299      	cmp	r1, r3
 800c622:	b510      	push	{r4, lr}
 800c624:	4604      	mov	r4, r0
 800c626:	d001      	beq.n	800c62c <cleanup_stdio+0x10>
 800c628:	f001 fdd8 	bl	800e1dc <_fflush_r>
 800c62c:	68a1      	ldr	r1, [r4, #8]
 800c62e:	4b09      	ldr	r3, [pc, #36]	@ (800c654 <cleanup_stdio+0x38>)
 800c630:	4299      	cmp	r1, r3
 800c632:	d002      	beq.n	800c63a <cleanup_stdio+0x1e>
 800c634:	4620      	mov	r0, r4
 800c636:	f001 fdd1 	bl	800e1dc <_fflush_r>
 800c63a:	68e1      	ldr	r1, [r4, #12]
 800c63c:	4b06      	ldr	r3, [pc, #24]	@ (800c658 <cleanup_stdio+0x3c>)
 800c63e:	4299      	cmp	r1, r3
 800c640:	d004      	beq.n	800c64c <cleanup_stdio+0x30>
 800c642:	4620      	mov	r0, r4
 800c644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c648:	f001 bdc8 	b.w	800e1dc <_fflush_r>
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	bf00      	nop
 800c650:	24005ce4 	.word	0x24005ce4
 800c654:	24005d4c 	.word	0x24005d4c
 800c658:	24005db4 	.word	0x24005db4

0800c65c <global_stdio_init.part.0>:
 800c65c:	b510      	push	{r4, lr}
 800c65e:	4b0b      	ldr	r3, [pc, #44]	@ (800c68c <global_stdio_init.part.0+0x30>)
 800c660:	4c0b      	ldr	r4, [pc, #44]	@ (800c690 <global_stdio_init.part.0+0x34>)
 800c662:	4a0c      	ldr	r2, [pc, #48]	@ (800c694 <global_stdio_init.part.0+0x38>)
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	4620      	mov	r0, r4
 800c668:	2200      	movs	r2, #0
 800c66a:	2104      	movs	r1, #4
 800c66c:	f7ff ff94 	bl	800c598 <std>
 800c670:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c674:	2201      	movs	r2, #1
 800c676:	2109      	movs	r1, #9
 800c678:	f7ff ff8e 	bl	800c598 <std>
 800c67c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c680:	2202      	movs	r2, #2
 800c682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c686:	2112      	movs	r1, #18
 800c688:	f7ff bf86 	b.w	800c598 <std>
 800c68c:	24005e1c 	.word	0x24005e1c
 800c690:	24005ce4 	.word	0x24005ce4
 800c694:	0800c605 	.word	0x0800c605

0800c698 <__sfp_lock_acquire>:
 800c698:	4801      	ldr	r0, [pc, #4]	@ (800c6a0 <__sfp_lock_acquire+0x8>)
 800c69a:	f000 b968 	b.w	800c96e <__retarget_lock_acquire_recursive>
 800c69e:	bf00      	nop
 800c6a0:	24005e25 	.word	0x24005e25

0800c6a4 <__sfp_lock_release>:
 800c6a4:	4801      	ldr	r0, [pc, #4]	@ (800c6ac <__sfp_lock_release+0x8>)
 800c6a6:	f000 b963 	b.w	800c970 <__retarget_lock_release_recursive>
 800c6aa:	bf00      	nop
 800c6ac:	24005e25 	.word	0x24005e25

0800c6b0 <__sinit>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	f7ff fff0 	bl	800c698 <__sfp_lock_acquire>
 800c6b8:	6a23      	ldr	r3, [r4, #32]
 800c6ba:	b11b      	cbz	r3, 800c6c4 <__sinit+0x14>
 800c6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6c0:	f7ff bff0 	b.w	800c6a4 <__sfp_lock_release>
 800c6c4:	4b04      	ldr	r3, [pc, #16]	@ (800c6d8 <__sinit+0x28>)
 800c6c6:	6223      	str	r3, [r4, #32]
 800c6c8:	4b04      	ldr	r3, [pc, #16]	@ (800c6dc <__sinit+0x2c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1f5      	bne.n	800c6bc <__sinit+0xc>
 800c6d0:	f7ff ffc4 	bl	800c65c <global_stdio_init.part.0>
 800c6d4:	e7f2      	b.n	800c6bc <__sinit+0xc>
 800c6d6:	bf00      	nop
 800c6d8:	0800c61d 	.word	0x0800c61d
 800c6dc:	24005e1c 	.word	0x24005e1c

0800c6e0 <_fwalk_sglue>:
 800c6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6e4:	4607      	mov	r7, r0
 800c6e6:	4688      	mov	r8, r1
 800c6e8:	4614      	mov	r4, r2
 800c6ea:	2600      	movs	r6, #0
 800c6ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6f0:	f1b9 0901 	subs.w	r9, r9, #1
 800c6f4:	d505      	bpl.n	800c702 <_fwalk_sglue+0x22>
 800c6f6:	6824      	ldr	r4, [r4, #0]
 800c6f8:	2c00      	cmp	r4, #0
 800c6fa:	d1f7      	bne.n	800c6ec <_fwalk_sglue+0xc>
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d907      	bls.n	800c718 <_fwalk_sglue+0x38>
 800c708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c70c:	3301      	adds	r3, #1
 800c70e:	d003      	beq.n	800c718 <_fwalk_sglue+0x38>
 800c710:	4629      	mov	r1, r5
 800c712:	4638      	mov	r0, r7
 800c714:	47c0      	blx	r8
 800c716:	4306      	orrs	r6, r0
 800c718:	3568      	adds	r5, #104	@ 0x68
 800c71a:	e7e9      	b.n	800c6f0 <_fwalk_sglue+0x10>

0800c71c <iprintf>:
 800c71c:	b40f      	push	{r0, r1, r2, r3}
 800c71e:	b507      	push	{r0, r1, r2, lr}
 800c720:	4906      	ldr	r1, [pc, #24]	@ (800c73c <iprintf+0x20>)
 800c722:	ab04      	add	r3, sp, #16
 800c724:	6808      	ldr	r0, [r1, #0]
 800c726:	f853 2b04 	ldr.w	r2, [r3], #4
 800c72a:	6881      	ldr	r1, [r0, #8]
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	f001 fbb9 	bl	800dea4 <_vfiprintf_r>
 800c732:	b003      	add	sp, #12
 800c734:	f85d eb04 	ldr.w	lr, [sp], #4
 800c738:	b004      	add	sp, #16
 800c73a:	4770      	bx	lr
 800c73c:	24000020 	.word	0x24000020

0800c740 <__sread>:
 800c740:	b510      	push	{r4, lr}
 800c742:	460c      	mov	r4, r1
 800c744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c748:	f000 f8c2 	bl	800c8d0 <_read_r>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	bfab      	itete	ge
 800c750:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c752:	89a3      	ldrhlt	r3, [r4, #12]
 800c754:	181b      	addge	r3, r3, r0
 800c756:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c75a:	bfac      	ite	ge
 800c75c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c75e:	81a3      	strhlt	r3, [r4, #12]
 800c760:	bd10      	pop	{r4, pc}

0800c762 <__swrite>:
 800c762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c766:	461f      	mov	r7, r3
 800c768:	898b      	ldrh	r3, [r1, #12]
 800c76a:	05db      	lsls	r3, r3, #23
 800c76c:	4605      	mov	r5, r0
 800c76e:	460c      	mov	r4, r1
 800c770:	4616      	mov	r6, r2
 800c772:	d505      	bpl.n	800c780 <__swrite+0x1e>
 800c774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c778:	2302      	movs	r3, #2
 800c77a:	2200      	movs	r2, #0
 800c77c:	f000 f896 	bl	800c8ac <_lseek_r>
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c78a:	81a3      	strh	r3, [r4, #12]
 800c78c:	4632      	mov	r2, r6
 800c78e:	463b      	mov	r3, r7
 800c790:	4628      	mov	r0, r5
 800c792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c796:	f000 b8ad 	b.w	800c8f4 <_write_r>

0800c79a <__sseek>:
 800c79a:	b510      	push	{r4, lr}
 800c79c:	460c      	mov	r4, r1
 800c79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a2:	f000 f883 	bl	800c8ac <_lseek_r>
 800c7a6:	1c43      	adds	r3, r0, #1
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	bf15      	itete	ne
 800c7ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c7ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c7b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c7b6:	81a3      	strheq	r3, [r4, #12]
 800c7b8:	bf18      	it	ne
 800c7ba:	81a3      	strhne	r3, [r4, #12]
 800c7bc:	bd10      	pop	{r4, pc}

0800c7be <__sclose>:
 800c7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c2:	f000 b80d 	b.w	800c7e0 <_close_r>

0800c7c6 <memset>:
 800c7c6:	4402      	add	r2, r0
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d100      	bne.n	800c7d0 <memset+0xa>
 800c7ce:	4770      	bx	lr
 800c7d0:	f803 1b01 	strb.w	r1, [r3], #1
 800c7d4:	e7f9      	b.n	800c7ca <memset+0x4>
	...

0800c7d8 <_localeconv_r>:
 800c7d8:	4800      	ldr	r0, [pc, #0]	@ (800c7dc <_localeconv_r+0x4>)
 800c7da:	4770      	bx	lr
 800c7dc:	24000160 	.word	0x24000160

0800c7e0 <_close_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d06      	ldr	r5, [pc, #24]	@ (800c7fc <_close_r+0x1c>)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	602b      	str	r3, [r5, #0]
 800c7ec:	f7f4 fc56 	bl	800109c <_close>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_close_r+0x1a>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_close_r+0x1a>
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	24005e20 	.word	0x24005e20

0800c800 <_reclaim_reent>:
 800c800:	4b29      	ldr	r3, [pc, #164]	@ (800c8a8 <_reclaim_reent+0xa8>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4283      	cmp	r3, r0
 800c806:	b570      	push	{r4, r5, r6, lr}
 800c808:	4604      	mov	r4, r0
 800c80a:	d04b      	beq.n	800c8a4 <_reclaim_reent+0xa4>
 800c80c:	69c3      	ldr	r3, [r0, #28]
 800c80e:	b1ab      	cbz	r3, 800c83c <_reclaim_reent+0x3c>
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	b16b      	cbz	r3, 800c830 <_reclaim_reent+0x30>
 800c814:	2500      	movs	r5, #0
 800c816:	69e3      	ldr	r3, [r4, #28]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	5959      	ldr	r1, [r3, r5]
 800c81c:	2900      	cmp	r1, #0
 800c81e:	d13b      	bne.n	800c898 <_reclaim_reent+0x98>
 800c820:	3504      	adds	r5, #4
 800c822:	2d80      	cmp	r5, #128	@ 0x80
 800c824:	d1f7      	bne.n	800c816 <_reclaim_reent+0x16>
 800c826:	69e3      	ldr	r3, [r4, #28]
 800c828:	4620      	mov	r0, r4
 800c82a:	68d9      	ldr	r1, [r3, #12]
 800c82c:	f000 fe8e 	bl	800d54c <_free_r>
 800c830:	69e3      	ldr	r3, [r4, #28]
 800c832:	6819      	ldr	r1, [r3, #0]
 800c834:	b111      	cbz	r1, 800c83c <_reclaim_reent+0x3c>
 800c836:	4620      	mov	r0, r4
 800c838:	f000 fe88 	bl	800d54c <_free_r>
 800c83c:	6961      	ldr	r1, [r4, #20]
 800c83e:	b111      	cbz	r1, 800c846 <_reclaim_reent+0x46>
 800c840:	4620      	mov	r0, r4
 800c842:	f000 fe83 	bl	800d54c <_free_r>
 800c846:	69e1      	ldr	r1, [r4, #28]
 800c848:	b111      	cbz	r1, 800c850 <_reclaim_reent+0x50>
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 fe7e 	bl	800d54c <_free_r>
 800c850:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c852:	b111      	cbz	r1, 800c85a <_reclaim_reent+0x5a>
 800c854:	4620      	mov	r0, r4
 800c856:	f000 fe79 	bl	800d54c <_free_r>
 800c85a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c85c:	b111      	cbz	r1, 800c864 <_reclaim_reent+0x64>
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 fe74 	bl	800d54c <_free_r>
 800c864:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c866:	b111      	cbz	r1, 800c86e <_reclaim_reent+0x6e>
 800c868:	4620      	mov	r0, r4
 800c86a:	f000 fe6f 	bl	800d54c <_free_r>
 800c86e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c870:	b111      	cbz	r1, 800c878 <_reclaim_reent+0x78>
 800c872:	4620      	mov	r0, r4
 800c874:	f000 fe6a 	bl	800d54c <_free_r>
 800c878:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c87a:	b111      	cbz	r1, 800c882 <_reclaim_reent+0x82>
 800c87c:	4620      	mov	r0, r4
 800c87e:	f000 fe65 	bl	800d54c <_free_r>
 800c882:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c884:	b111      	cbz	r1, 800c88c <_reclaim_reent+0x8c>
 800c886:	4620      	mov	r0, r4
 800c888:	f000 fe60 	bl	800d54c <_free_r>
 800c88c:	6a23      	ldr	r3, [r4, #32]
 800c88e:	b14b      	cbz	r3, 800c8a4 <_reclaim_reent+0xa4>
 800c890:	4620      	mov	r0, r4
 800c892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c896:	4718      	bx	r3
 800c898:	680e      	ldr	r6, [r1, #0]
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 fe56 	bl	800d54c <_free_r>
 800c8a0:	4631      	mov	r1, r6
 800c8a2:	e7bb      	b.n	800c81c <_reclaim_reent+0x1c>
 800c8a4:	bd70      	pop	{r4, r5, r6, pc}
 800c8a6:	bf00      	nop
 800c8a8:	24000020 	.word	0x24000020

0800c8ac <_lseek_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4d07      	ldr	r5, [pc, #28]	@ (800c8cc <_lseek_r+0x20>)
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	4608      	mov	r0, r1
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	602a      	str	r2, [r5, #0]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f7f4 fc15 	bl	80010ea <_lseek>
 800c8c0:	1c43      	adds	r3, r0, #1
 800c8c2:	d102      	bne.n	800c8ca <_lseek_r+0x1e>
 800c8c4:	682b      	ldr	r3, [r5, #0]
 800c8c6:	b103      	cbz	r3, 800c8ca <_lseek_r+0x1e>
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	24005e20 	.word	0x24005e20

0800c8d0 <_read_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d07      	ldr	r5, [pc, #28]	@ (800c8f0 <_read_r+0x20>)
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	4608      	mov	r0, r1
 800c8d8:	4611      	mov	r1, r2
 800c8da:	2200      	movs	r2, #0
 800c8dc:	602a      	str	r2, [r5, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	f7f4 fba3 	bl	800102a <_read>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_read_r+0x1e>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_read_r+0x1e>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	24005e20 	.word	0x24005e20

0800c8f4 <_write_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4d07      	ldr	r5, [pc, #28]	@ (800c914 <_write_r+0x20>)
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	4608      	mov	r0, r1
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	2200      	movs	r2, #0
 800c900:	602a      	str	r2, [r5, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	f7f4 fbae 	bl	8001064 <_write>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_write_r+0x1e>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_write_r+0x1e>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	24005e20 	.word	0x24005e20

0800c918 <__errno>:
 800c918:	4b01      	ldr	r3, [pc, #4]	@ (800c920 <__errno+0x8>)
 800c91a:	6818      	ldr	r0, [r3, #0]
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	24000020 	.word	0x24000020

0800c924 <__libc_init_array>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	4d0d      	ldr	r5, [pc, #52]	@ (800c95c <__libc_init_array+0x38>)
 800c928:	4c0d      	ldr	r4, [pc, #52]	@ (800c960 <__libc_init_array+0x3c>)
 800c92a:	1b64      	subs	r4, r4, r5
 800c92c:	10a4      	asrs	r4, r4, #2
 800c92e:	2600      	movs	r6, #0
 800c930:	42a6      	cmp	r6, r4
 800c932:	d109      	bne.n	800c948 <__libc_init_array+0x24>
 800c934:	4d0b      	ldr	r5, [pc, #44]	@ (800c964 <__libc_init_array+0x40>)
 800c936:	4c0c      	ldr	r4, [pc, #48]	@ (800c968 <__libc_init_array+0x44>)
 800c938:	f001 fe50 	bl	800e5dc <_init>
 800c93c:	1b64      	subs	r4, r4, r5
 800c93e:	10a4      	asrs	r4, r4, #2
 800c940:	2600      	movs	r6, #0
 800c942:	42a6      	cmp	r6, r4
 800c944:	d105      	bne.n	800c952 <__libc_init_array+0x2e>
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	f855 3b04 	ldr.w	r3, [r5], #4
 800c94c:	4798      	blx	r3
 800c94e:	3601      	adds	r6, #1
 800c950:	e7ee      	b.n	800c930 <__libc_init_array+0xc>
 800c952:	f855 3b04 	ldr.w	r3, [r5], #4
 800c956:	4798      	blx	r3
 800c958:	3601      	adds	r6, #1
 800c95a:	e7f2      	b.n	800c942 <__libc_init_array+0x1e>
 800c95c:	0800ea98 	.word	0x0800ea98
 800c960:	0800ea98 	.word	0x0800ea98
 800c964:	0800ea98 	.word	0x0800ea98
 800c968:	0800ea9c 	.word	0x0800ea9c

0800c96c <__retarget_lock_init_recursive>:
 800c96c:	4770      	bx	lr

0800c96e <__retarget_lock_acquire_recursive>:
 800c96e:	4770      	bx	lr

0800c970 <__retarget_lock_release_recursive>:
 800c970:	4770      	bx	lr

0800c972 <memcpy>:
 800c972:	440a      	add	r2, r1
 800c974:	4291      	cmp	r1, r2
 800c976:	f100 33ff 	add.w	r3, r0, #4294967295
 800c97a:	d100      	bne.n	800c97e <memcpy+0xc>
 800c97c:	4770      	bx	lr
 800c97e:	b510      	push	{r4, lr}
 800c980:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c984:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c988:	4291      	cmp	r1, r2
 800c98a:	d1f9      	bne.n	800c980 <memcpy+0xe>
 800c98c:	bd10      	pop	{r4, pc}

0800c98e <quorem>:
 800c98e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c992:	6903      	ldr	r3, [r0, #16]
 800c994:	690c      	ldr	r4, [r1, #16]
 800c996:	42a3      	cmp	r3, r4
 800c998:	4607      	mov	r7, r0
 800c99a:	db7e      	blt.n	800ca9a <quorem+0x10c>
 800c99c:	3c01      	subs	r4, #1
 800c99e:	f101 0814 	add.w	r8, r1, #20
 800c9a2:	00a3      	lsls	r3, r4, #2
 800c9a4:	f100 0514 	add.w	r5, r0, #20
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9ae:	9301      	str	r3, [sp, #4]
 800c9b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9c4:	d32e      	bcc.n	800ca24 <quorem+0x96>
 800c9c6:	f04f 0a00 	mov.w	sl, #0
 800c9ca:	46c4      	mov	ip, r8
 800c9cc:	46ae      	mov	lr, r5
 800c9ce:	46d3      	mov	fp, sl
 800c9d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9d4:	b298      	uxth	r0, r3
 800c9d6:	fb06 a000 	mla	r0, r6, r0, sl
 800c9da:	0c02      	lsrs	r2, r0, #16
 800c9dc:	0c1b      	lsrs	r3, r3, #16
 800c9de:	fb06 2303 	mla	r3, r6, r3, r2
 800c9e2:	f8de 2000 	ldr.w	r2, [lr]
 800c9e6:	b280      	uxth	r0, r0
 800c9e8:	b292      	uxth	r2, r2
 800c9ea:	1a12      	subs	r2, r2, r0
 800c9ec:	445a      	add	r2, fp
 800c9ee:	f8de 0000 	ldr.w	r0, [lr]
 800c9f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c9fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca00:	b292      	uxth	r2, r2
 800ca02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca06:	45e1      	cmp	r9, ip
 800ca08:	f84e 2b04 	str.w	r2, [lr], #4
 800ca0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca10:	d2de      	bcs.n	800c9d0 <quorem+0x42>
 800ca12:	9b00      	ldr	r3, [sp, #0]
 800ca14:	58eb      	ldr	r3, [r5, r3]
 800ca16:	b92b      	cbnz	r3, 800ca24 <quorem+0x96>
 800ca18:	9b01      	ldr	r3, [sp, #4]
 800ca1a:	3b04      	subs	r3, #4
 800ca1c:	429d      	cmp	r5, r3
 800ca1e:	461a      	mov	r2, r3
 800ca20:	d32f      	bcc.n	800ca82 <quorem+0xf4>
 800ca22:	613c      	str	r4, [r7, #16]
 800ca24:	4638      	mov	r0, r7
 800ca26:	f001 f90b 	bl	800dc40 <__mcmp>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	db25      	blt.n	800ca7a <quorem+0xec>
 800ca2e:	4629      	mov	r1, r5
 800ca30:	2000      	movs	r0, #0
 800ca32:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca36:	f8d1 c000 	ldr.w	ip, [r1]
 800ca3a:	fa1f fe82 	uxth.w	lr, r2
 800ca3e:	fa1f f38c 	uxth.w	r3, ip
 800ca42:	eba3 030e 	sub.w	r3, r3, lr
 800ca46:	4403      	add	r3, r0
 800ca48:	0c12      	lsrs	r2, r2, #16
 800ca4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca58:	45c1      	cmp	r9, r8
 800ca5a:	f841 3b04 	str.w	r3, [r1], #4
 800ca5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca62:	d2e6      	bcs.n	800ca32 <quorem+0xa4>
 800ca64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca6c:	b922      	cbnz	r2, 800ca78 <quorem+0xea>
 800ca6e:	3b04      	subs	r3, #4
 800ca70:	429d      	cmp	r5, r3
 800ca72:	461a      	mov	r2, r3
 800ca74:	d30b      	bcc.n	800ca8e <quorem+0x100>
 800ca76:	613c      	str	r4, [r7, #16]
 800ca78:	3601      	adds	r6, #1
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	b003      	add	sp, #12
 800ca7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca82:	6812      	ldr	r2, [r2, #0]
 800ca84:	3b04      	subs	r3, #4
 800ca86:	2a00      	cmp	r2, #0
 800ca88:	d1cb      	bne.n	800ca22 <quorem+0x94>
 800ca8a:	3c01      	subs	r4, #1
 800ca8c:	e7c6      	b.n	800ca1c <quorem+0x8e>
 800ca8e:	6812      	ldr	r2, [r2, #0]
 800ca90:	3b04      	subs	r3, #4
 800ca92:	2a00      	cmp	r2, #0
 800ca94:	d1ef      	bne.n	800ca76 <quorem+0xe8>
 800ca96:	3c01      	subs	r4, #1
 800ca98:	e7ea      	b.n	800ca70 <quorem+0xe2>
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	e7ee      	b.n	800ca7c <quorem+0xee>
	...

0800caa0 <_dtoa_r>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	ed2d 8b02 	vpush	{d8}
 800caa8:	69c7      	ldr	r7, [r0, #28]
 800caaa:	b091      	sub	sp, #68	@ 0x44
 800caac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cab0:	ec55 4b10 	vmov	r4, r5, d0
 800cab4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800cab6:	9107      	str	r1, [sp, #28]
 800cab8:	4681      	mov	r9, r0
 800caba:	9209      	str	r2, [sp, #36]	@ 0x24
 800cabc:	930d      	str	r3, [sp, #52]	@ 0x34
 800cabe:	b97f      	cbnz	r7, 800cae0 <_dtoa_r+0x40>
 800cac0:	2010      	movs	r0, #16
 800cac2:	f000 fd8d 	bl	800d5e0 <malloc>
 800cac6:	4602      	mov	r2, r0
 800cac8:	f8c9 001c 	str.w	r0, [r9, #28]
 800cacc:	b920      	cbnz	r0, 800cad8 <_dtoa_r+0x38>
 800cace:	4ba0      	ldr	r3, [pc, #640]	@ (800cd50 <_dtoa_r+0x2b0>)
 800cad0:	21ef      	movs	r1, #239	@ 0xef
 800cad2:	48a0      	ldr	r0, [pc, #640]	@ (800cd54 <_dtoa_r+0x2b4>)
 800cad4:	f001 fc4e 	bl	800e374 <__assert_func>
 800cad8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cadc:	6007      	str	r7, [r0, #0]
 800cade:	60c7      	str	r7, [r0, #12]
 800cae0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cae4:	6819      	ldr	r1, [r3, #0]
 800cae6:	b159      	cbz	r1, 800cb00 <_dtoa_r+0x60>
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	604a      	str	r2, [r1, #4]
 800caec:	2301      	movs	r3, #1
 800caee:	4093      	lsls	r3, r2
 800caf0:	608b      	str	r3, [r1, #8]
 800caf2:	4648      	mov	r0, r9
 800caf4:	f000 fe6a 	bl	800d7cc <_Bfree>
 800caf8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	1e2b      	subs	r3, r5, #0
 800cb02:	bfbb      	ittet	lt
 800cb04:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb08:	9303      	strlt	r3, [sp, #12]
 800cb0a:	2300      	movge	r3, #0
 800cb0c:	2201      	movlt	r2, #1
 800cb0e:	bfac      	ite	ge
 800cb10:	6033      	strge	r3, [r6, #0]
 800cb12:	6032      	strlt	r2, [r6, #0]
 800cb14:	4b90      	ldr	r3, [pc, #576]	@ (800cd58 <_dtoa_r+0x2b8>)
 800cb16:	9e03      	ldr	r6, [sp, #12]
 800cb18:	43b3      	bics	r3, r6
 800cb1a:	d110      	bne.n	800cb3e <_dtoa_r+0x9e>
 800cb1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb1e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb22:	6013      	str	r3, [r2, #0]
 800cb24:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cb28:	4323      	orrs	r3, r4
 800cb2a:	f000 84de 	beq.w	800d4ea <_dtoa_r+0xa4a>
 800cb2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb30:	4f8a      	ldr	r7, [pc, #552]	@ (800cd5c <_dtoa_r+0x2bc>)
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f000 84e0 	beq.w	800d4f8 <_dtoa_r+0xa58>
 800cb38:	1cfb      	adds	r3, r7, #3
 800cb3a:	f000 bcdb 	b.w	800d4f4 <_dtoa_r+0xa54>
 800cb3e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cb42:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4a:	d10a      	bne.n	800cb62 <_dtoa_r+0xc2>
 800cb4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb4e:	2301      	movs	r3, #1
 800cb50:	6013      	str	r3, [r2, #0]
 800cb52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb54:	b113      	cbz	r3, 800cb5c <_dtoa_r+0xbc>
 800cb56:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cb58:	4b81      	ldr	r3, [pc, #516]	@ (800cd60 <_dtoa_r+0x2c0>)
 800cb5a:	6013      	str	r3, [r2, #0]
 800cb5c:	4f81      	ldr	r7, [pc, #516]	@ (800cd64 <_dtoa_r+0x2c4>)
 800cb5e:	f000 bccb 	b.w	800d4f8 <_dtoa_r+0xa58>
 800cb62:	aa0e      	add	r2, sp, #56	@ 0x38
 800cb64:	a90f      	add	r1, sp, #60	@ 0x3c
 800cb66:	4648      	mov	r0, r9
 800cb68:	eeb0 0b48 	vmov.f64	d0, d8
 800cb6c:	f001 f918 	bl	800dda0 <__d2b>
 800cb70:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cb74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb76:	9001      	str	r0, [sp, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d045      	beq.n	800cc08 <_dtoa_r+0x168>
 800cb7c:	eeb0 7b48 	vmov.f64	d7, d8
 800cb80:	ee18 1a90 	vmov	r1, s17
 800cb84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cb88:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cb8c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cb90:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cb94:	2500      	movs	r5, #0
 800cb96:	ee07 1a90 	vmov	s15, r1
 800cb9a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cb9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cd38 <_dtoa_r+0x298>
 800cba2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cba6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800cd40 <_dtoa_r+0x2a0>
 800cbaa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cbae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cd48 <_dtoa_r+0x2a8>
 800cbb2:	ee07 3a90 	vmov	s15, r3
 800cbb6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cbba:	eeb0 7b46 	vmov.f64	d7, d6
 800cbbe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cbc2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cbc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbce:	ee16 8a90 	vmov	r8, s13
 800cbd2:	d508      	bpl.n	800cbe6 <_dtoa_r+0x146>
 800cbd4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cbd8:	eeb4 6b47 	vcmp.f64	d6, d7
 800cbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe0:	bf18      	it	ne
 800cbe2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800cbe6:	f1b8 0f16 	cmp.w	r8, #22
 800cbea:	d82b      	bhi.n	800cc44 <_dtoa_r+0x1a4>
 800cbec:	495e      	ldr	r1, [pc, #376]	@ (800cd68 <_dtoa_r+0x2c8>)
 800cbee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cbf2:	ed91 7b00 	vldr	d7, [r1]
 800cbf6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cbfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbfe:	d501      	bpl.n	800cc04 <_dtoa_r+0x164>
 800cc00:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc04:	2100      	movs	r1, #0
 800cc06:	e01e      	b.n	800cc46 <_dtoa_r+0x1a6>
 800cc08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800cc10:	2920      	cmp	r1, #32
 800cc12:	bfc1      	itttt	gt
 800cc14:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800cc18:	408e      	lslgt	r6, r1
 800cc1a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800cc1e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800cc22:	bfd6      	itet	le
 800cc24:	f1c1 0120 	rsble	r1, r1, #32
 800cc28:	4331      	orrgt	r1, r6
 800cc2a:	fa04 f101 	lslle.w	r1, r4, r1
 800cc2e:	ee07 1a90 	vmov	s15, r1
 800cc32:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cc36:	3b01      	subs	r3, #1
 800cc38:	ee17 1a90 	vmov	r1, s15
 800cc3c:	2501      	movs	r5, #1
 800cc3e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800cc42:	e7a8      	b.n	800cb96 <_dtoa_r+0xf6>
 800cc44:	2101      	movs	r1, #1
 800cc46:	1ad2      	subs	r2, r2, r3
 800cc48:	1e53      	subs	r3, r2, #1
 800cc4a:	9306      	str	r3, [sp, #24]
 800cc4c:	bf45      	ittet	mi
 800cc4e:	f1c2 0301 	rsbmi	r3, r2, #1
 800cc52:	9305      	strmi	r3, [sp, #20]
 800cc54:	2300      	movpl	r3, #0
 800cc56:	2300      	movmi	r3, #0
 800cc58:	bf4c      	ite	mi
 800cc5a:	9306      	strmi	r3, [sp, #24]
 800cc5c:	9305      	strpl	r3, [sp, #20]
 800cc5e:	f1b8 0f00 	cmp.w	r8, #0
 800cc62:	910c      	str	r1, [sp, #48]	@ 0x30
 800cc64:	db18      	blt.n	800cc98 <_dtoa_r+0x1f8>
 800cc66:	9b06      	ldr	r3, [sp, #24]
 800cc68:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cc6c:	4443      	add	r3, r8
 800cc6e:	9306      	str	r3, [sp, #24]
 800cc70:	2300      	movs	r3, #0
 800cc72:	9a07      	ldr	r2, [sp, #28]
 800cc74:	2a09      	cmp	r2, #9
 800cc76:	d849      	bhi.n	800cd0c <_dtoa_r+0x26c>
 800cc78:	2a05      	cmp	r2, #5
 800cc7a:	bfc4      	itt	gt
 800cc7c:	3a04      	subgt	r2, #4
 800cc7e:	9207      	strgt	r2, [sp, #28]
 800cc80:	9a07      	ldr	r2, [sp, #28]
 800cc82:	f1a2 0202 	sub.w	r2, r2, #2
 800cc86:	bfcc      	ite	gt
 800cc88:	2400      	movgt	r4, #0
 800cc8a:	2401      	movle	r4, #1
 800cc8c:	2a03      	cmp	r2, #3
 800cc8e:	d848      	bhi.n	800cd22 <_dtoa_r+0x282>
 800cc90:	e8df f002 	tbb	[pc, r2]
 800cc94:	3a2c2e0b 	.word	0x3a2c2e0b
 800cc98:	9b05      	ldr	r3, [sp, #20]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	eba3 0308 	sub.w	r3, r3, r8
 800cca0:	9305      	str	r3, [sp, #20]
 800cca2:	920a      	str	r2, [sp, #40]	@ 0x28
 800cca4:	f1c8 0300 	rsb	r3, r8, #0
 800cca8:	e7e3      	b.n	800cc72 <_dtoa_r+0x1d2>
 800ccaa:	2200      	movs	r2, #0
 800ccac:	9208      	str	r2, [sp, #32]
 800ccae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccb0:	2a00      	cmp	r2, #0
 800ccb2:	dc39      	bgt.n	800cd28 <_dtoa_r+0x288>
 800ccb4:	f04f 0b01 	mov.w	fp, #1
 800ccb8:	46da      	mov	sl, fp
 800ccba:	465a      	mov	r2, fp
 800ccbc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ccc0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	2004      	movs	r0, #4
 800ccc8:	f100 0614 	add.w	r6, r0, #20
 800cccc:	4296      	cmp	r6, r2
 800ccce:	d930      	bls.n	800cd32 <_dtoa_r+0x292>
 800ccd0:	6079      	str	r1, [r7, #4]
 800ccd2:	4648      	mov	r0, r9
 800ccd4:	9304      	str	r3, [sp, #16]
 800ccd6:	f000 fd39 	bl	800d74c <_Balloc>
 800ccda:	9b04      	ldr	r3, [sp, #16]
 800ccdc:	4607      	mov	r7, r0
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d146      	bne.n	800cd70 <_dtoa_r+0x2d0>
 800cce2:	4b22      	ldr	r3, [pc, #136]	@ (800cd6c <_dtoa_r+0x2cc>)
 800cce4:	4602      	mov	r2, r0
 800cce6:	f240 11af 	movw	r1, #431	@ 0x1af
 800ccea:	e6f2      	b.n	800cad2 <_dtoa_r+0x32>
 800ccec:	2201      	movs	r2, #1
 800ccee:	e7dd      	b.n	800ccac <_dtoa_r+0x20c>
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	9208      	str	r2, [sp, #32]
 800ccf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccf6:	eb08 0b02 	add.w	fp, r8, r2
 800ccfa:	f10b 0a01 	add.w	sl, fp, #1
 800ccfe:	4652      	mov	r2, sl
 800cd00:	2a01      	cmp	r2, #1
 800cd02:	bfb8      	it	lt
 800cd04:	2201      	movlt	r2, #1
 800cd06:	e7db      	b.n	800ccc0 <_dtoa_r+0x220>
 800cd08:	2201      	movs	r2, #1
 800cd0a:	e7f2      	b.n	800ccf2 <_dtoa_r+0x252>
 800cd0c:	2401      	movs	r4, #1
 800cd0e:	2200      	movs	r2, #0
 800cd10:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cd14:	f04f 3bff 	mov.w	fp, #4294967295
 800cd18:	2100      	movs	r1, #0
 800cd1a:	46da      	mov	sl, fp
 800cd1c:	2212      	movs	r2, #18
 800cd1e:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd20:	e7ce      	b.n	800ccc0 <_dtoa_r+0x220>
 800cd22:	2201      	movs	r2, #1
 800cd24:	9208      	str	r2, [sp, #32]
 800cd26:	e7f5      	b.n	800cd14 <_dtoa_r+0x274>
 800cd28:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800cd2c:	46da      	mov	sl, fp
 800cd2e:	465a      	mov	r2, fp
 800cd30:	e7c6      	b.n	800ccc0 <_dtoa_r+0x220>
 800cd32:	3101      	adds	r1, #1
 800cd34:	0040      	lsls	r0, r0, #1
 800cd36:	e7c7      	b.n	800ccc8 <_dtoa_r+0x228>
 800cd38:	636f4361 	.word	0x636f4361
 800cd3c:	3fd287a7 	.word	0x3fd287a7
 800cd40:	8b60c8b3 	.word	0x8b60c8b3
 800cd44:	3fc68a28 	.word	0x3fc68a28
 800cd48:	509f79fb 	.word	0x509f79fb
 800cd4c:	3fd34413 	.word	0x3fd34413
 800cd50:	0800e75d 	.word	0x0800e75d
 800cd54:	0800e774 	.word	0x0800e774
 800cd58:	7ff00000 	.word	0x7ff00000
 800cd5c:	0800e759 	.word	0x0800e759
 800cd60:	0800e72d 	.word	0x0800e72d
 800cd64:	0800e72c 	.word	0x0800e72c
 800cd68:	0800e870 	.word	0x0800e870
 800cd6c:	0800e7cc 	.word	0x0800e7cc
 800cd70:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800cd74:	f1ba 0f0e 	cmp.w	sl, #14
 800cd78:	6010      	str	r0, [r2, #0]
 800cd7a:	d86f      	bhi.n	800ce5c <_dtoa_r+0x3bc>
 800cd7c:	2c00      	cmp	r4, #0
 800cd7e:	d06d      	beq.n	800ce5c <_dtoa_r+0x3bc>
 800cd80:	f1b8 0f00 	cmp.w	r8, #0
 800cd84:	f340 80c2 	ble.w	800cf0c <_dtoa_r+0x46c>
 800cd88:	4aca      	ldr	r2, [pc, #808]	@ (800d0b4 <_dtoa_r+0x614>)
 800cd8a:	f008 010f 	and.w	r1, r8, #15
 800cd8e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cd92:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800cd96:	ed92 7b00 	vldr	d7, [r2]
 800cd9a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800cd9e:	f000 80a9 	beq.w	800cef4 <_dtoa_r+0x454>
 800cda2:	4ac5      	ldr	r2, [pc, #788]	@ (800d0b8 <_dtoa_r+0x618>)
 800cda4:	ed92 6b08 	vldr	d6, [r2, #32]
 800cda8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cdac:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cdb0:	f001 010f 	and.w	r1, r1, #15
 800cdb4:	2203      	movs	r2, #3
 800cdb6:	48c0      	ldr	r0, [pc, #768]	@ (800d0b8 <_dtoa_r+0x618>)
 800cdb8:	2900      	cmp	r1, #0
 800cdba:	f040 809d 	bne.w	800cef8 <_dtoa_r+0x458>
 800cdbe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cdc2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cdc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cdcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdd0:	2900      	cmp	r1, #0
 800cdd2:	f000 80c1 	beq.w	800cf58 <_dtoa_r+0x4b8>
 800cdd6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cdda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde2:	f140 80b9 	bpl.w	800cf58 <_dtoa_r+0x4b8>
 800cde6:	f1ba 0f00 	cmp.w	sl, #0
 800cdea:	f000 80b5 	beq.w	800cf58 <_dtoa_r+0x4b8>
 800cdee:	f1bb 0f00 	cmp.w	fp, #0
 800cdf2:	dd31      	ble.n	800ce58 <_dtoa_r+0x3b8>
 800cdf4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800cdf8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cdfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce00:	f108 31ff 	add.w	r1, r8, #4294967295
 800ce04:	9104      	str	r1, [sp, #16]
 800ce06:	3201      	adds	r2, #1
 800ce08:	465c      	mov	r4, fp
 800ce0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ce0e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ce12:	ee07 2a90 	vmov	s15, r2
 800ce16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ce1a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ce1e:	ee15 2a90 	vmov	r2, s11
 800ce22:	ec51 0b15 	vmov	r0, r1, d5
 800ce26:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ce2a:	2c00      	cmp	r4, #0
 800ce2c:	f040 8098 	bne.w	800cf60 <_dtoa_r+0x4c0>
 800ce30:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ce34:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ce38:	ec41 0b17 	vmov	d7, r0, r1
 800ce3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce44:	f300 8261 	bgt.w	800d30a <_dtoa_r+0x86a>
 800ce48:	eeb1 7b47 	vneg.f64	d7, d7
 800ce4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce54:	f100 80f5 	bmi.w	800d042 <_dtoa_r+0x5a2>
 800ce58:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ce5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ce5e:	2a00      	cmp	r2, #0
 800ce60:	f2c0 812c 	blt.w	800d0bc <_dtoa_r+0x61c>
 800ce64:	f1b8 0f0e 	cmp.w	r8, #14
 800ce68:	f300 8128 	bgt.w	800d0bc <_dtoa_r+0x61c>
 800ce6c:	4b91      	ldr	r3, [pc, #580]	@ (800d0b4 <_dtoa_r+0x614>)
 800ce6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ce72:	ed93 6b00 	vldr	d6, [r3]
 800ce76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	da03      	bge.n	800ce84 <_dtoa_r+0x3e4>
 800ce7c:	f1ba 0f00 	cmp.w	sl, #0
 800ce80:	f340 80d2 	ble.w	800d028 <_dtoa_r+0x588>
 800ce84:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ce88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce8c:	463e      	mov	r6, r7
 800ce8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ce92:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ce96:	ee15 3a10 	vmov	r3, s10
 800ce9a:	3330      	adds	r3, #48	@ 0x30
 800ce9c:	f806 3b01 	strb.w	r3, [r6], #1
 800cea0:	1bf3      	subs	r3, r6, r7
 800cea2:	459a      	cmp	sl, r3
 800cea4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cea8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ceac:	f040 80f8 	bne.w	800d0a0 <_dtoa_r+0x600>
 800ceb0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ceb4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ceb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cebc:	f300 80dd 	bgt.w	800d07a <_dtoa_r+0x5da>
 800cec0:	eeb4 7b46 	vcmp.f64	d7, d6
 800cec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec8:	d104      	bne.n	800ced4 <_dtoa_r+0x434>
 800ceca:	ee15 3a10 	vmov	r3, s10
 800cece:	07db      	lsls	r3, r3, #31
 800ced0:	f100 80d3 	bmi.w	800d07a <_dtoa_r+0x5da>
 800ced4:	9901      	ldr	r1, [sp, #4]
 800ced6:	4648      	mov	r0, r9
 800ced8:	f000 fc78 	bl	800d7cc <_Bfree>
 800cedc:	2300      	movs	r3, #0
 800cede:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cee0:	7033      	strb	r3, [r6, #0]
 800cee2:	f108 0301 	add.w	r3, r8, #1
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 8304 	beq.w	800d4f8 <_dtoa_r+0xa58>
 800cef0:	601e      	str	r6, [r3, #0]
 800cef2:	e301      	b.n	800d4f8 <_dtoa_r+0xa58>
 800cef4:	2202      	movs	r2, #2
 800cef6:	e75e      	b.n	800cdb6 <_dtoa_r+0x316>
 800cef8:	07cc      	lsls	r4, r1, #31
 800cefa:	d504      	bpl.n	800cf06 <_dtoa_r+0x466>
 800cefc:	ed90 6b00 	vldr	d6, [r0]
 800cf00:	3201      	adds	r2, #1
 800cf02:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf06:	1049      	asrs	r1, r1, #1
 800cf08:	3008      	adds	r0, #8
 800cf0a:	e755      	b.n	800cdb8 <_dtoa_r+0x318>
 800cf0c:	d022      	beq.n	800cf54 <_dtoa_r+0x4b4>
 800cf0e:	f1c8 0100 	rsb	r1, r8, #0
 800cf12:	4a68      	ldr	r2, [pc, #416]	@ (800d0b4 <_dtoa_r+0x614>)
 800cf14:	f001 000f 	and.w	r0, r1, #15
 800cf18:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cf1c:	ed92 7b00 	vldr	d7, [r2]
 800cf20:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cf24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf28:	4863      	ldr	r0, [pc, #396]	@ (800d0b8 <_dtoa_r+0x618>)
 800cf2a:	1109      	asrs	r1, r1, #4
 800cf2c:	2400      	movs	r4, #0
 800cf2e:	2202      	movs	r2, #2
 800cf30:	b929      	cbnz	r1, 800cf3e <_dtoa_r+0x49e>
 800cf32:	2c00      	cmp	r4, #0
 800cf34:	f43f af49 	beq.w	800cdca <_dtoa_r+0x32a>
 800cf38:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf3c:	e745      	b.n	800cdca <_dtoa_r+0x32a>
 800cf3e:	07ce      	lsls	r6, r1, #31
 800cf40:	d505      	bpl.n	800cf4e <_dtoa_r+0x4ae>
 800cf42:	ed90 6b00 	vldr	d6, [r0]
 800cf46:	3201      	adds	r2, #1
 800cf48:	2401      	movs	r4, #1
 800cf4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf4e:	1049      	asrs	r1, r1, #1
 800cf50:	3008      	adds	r0, #8
 800cf52:	e7ed      	b.n	800cf30 <_dtoa_r+0x490>
 800cf54:	2202      	movs	r2, #2
 800cf56:	e738      	b.n	800cdca <_dtoa_r+0x32a>
 800cf58:	f8cd 8010 	str.w	r8, [sp, #16]
 800cf5c:	4654      	mov	r4, sl
 800cf5e:	e754      	b.n	800ce0a <_dtoa_r+0x36a>
 800cf60:	4a54      	ldr	r2, [pc, #336]	@ (800d0b4 <_dtoa_r+0x614>)
 800cf62:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800cf66:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cf6a:	9a08      	ldr	r2, [sp, #32]
 800cf6c:	ec41 0b17 	vmov	d7, r0, r1
 800cf70:	443c      	add	r4, r7
 800cf72:	b34a      	cbz	r2, 800cfc8 <_dtoa_r+0x528>
 800cf74:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800cf78:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800cf7c:	463e      	mov	r6, r7
 800cf7e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cf82:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cf86:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cf8a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cf8e:	ee14 2a90 	vmov	r2, s9
 800cf92:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cf96:	3230      	adds	r2, #48	@ 0x30
 800cf98:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cf9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa4:	f806 2b01 	strb.w	r2, [r6], #1
 800cfa8:	d438      	bmi.n	800d01c <_dtoa_r+0x57c>
 800cfaa:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cfae:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb6:	d462      	bmi.n	800d07e <_dtoa_r+0x5de>
 800cfb8:	42a6      	cmp	r6, r4
 800cfba:	f43f af4d 	beq.w	800ce58 <_dtoa_r+0x3b8>
 800cfbe:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cfc2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cfc6:	e7e0      	b.n	800cf8a <_dtoa_r+0x4ea>
 800cfc8:	4621      	mov	r1, r4
 800cfca:	463e      	mov	r6, r7
 800cfcc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cfd0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cfd4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cfd8:	ee14 2a90 	vmov	r2, s9
 800cfdc:	3230      	adds	r2, #48	@ 0x30
 800cfde:	f806 2b01 	strb.w	r2, [r6], #1
 800cfe2:	42a6      	cmp	r6, r4
 800cfe4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cfe8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cfec:	d119      	bne.n	800d022 <_dtoa_r+0x582>
 800cfee:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800cff2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cff6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cffe:	dc3e      	bgt.n	800d07e <_dtoa_r+0x5de>
 800d000:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d004:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00c:	f57f af24 	bpl.w	800ce58 <_dtoa_r+0x3b8>
 800d010:	460e      	mov	r6, r1
 800d012:	3901      	subs	r1, #1
 800d014:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d018:	2b30      	cmp	r3, #48	@ 0x30
 800d01a:	d0f9      	beq.n	800d010 <_dtoa_r+0x570>
 800d01c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d020:	e758      	b.n	800ced4 <_dtoa_r+0x434>
 800d022:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d026:	e7d5      	b.n	800cfd4 <_dtoa_r+0x534>
 800d028:	d10b      	bne.n	800d042 <_dtoa_r+0x5a2>
 800d02a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d02e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d032:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d036:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d03e:	f2c0 8161 	blt.w	800d304 <_dtoa_r+0x864>
 800d042:	2400      	movs	r4, #0
 800d044:	4625      	mov	r5, r4
 800d046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d048:	43db      	mvns	r3, r3
 800d04a:	9304      	str	r3, [sp, #16]
 800d04c:	463e      	mov	r6, r7
 800d04e:	f04f 0800 	mov.w	r8, #0
 800d052:	4621      	mov	r1, r4
 800d054:	4648      	mov	r0, r9
 800d056:	f000 fbb9 	bl	800d7cc <_Bfree>
 800d05a:	2d00      	cmp	r5, #0
 800d05c:	d0de      	beq.n	800d01c <_dtoa_r+0x57c>
 800d05e:	f1b8 0f00 	cmp.w	r8, #0
 800d062:	d005      	beq.n	800d070 <_dtoa_r+0x5d0>
 800d064:	45a8      	cmp	r8, r5
 800d066:	d003      	beq.n	800d070 <_dtoa_r+0x5d0>
 800d068:	4641      	mov	r1, r8
 800d06a:	4648      	mov	r0, r9
 800d06c:	f000 fbae 	bl	800d7cc <_Bfree>
 800d070:	4629      	mov	r1, r5
 800d072:	4648      	mov	r0, r9
 800d074:	f000 fbaa 	bl	800d7cc <_Bfree>
 800d078:	e7d0      	b.n	800d01c <_dtoa_r+0x57c>
 800d07a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d07e:	4633      	mov	r3, r6
 800d080:	461e      	mov	r6, r3
 800d082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d086:	2a39      	cmp	r2, #57	@ 0x39
 800d088:	d106      	bne.n	800d098 <_dtoa_r+0x5f8>
 800d08a:	429f      	cmp	r7, r3
 800d08c:	d1f8      	bne.n	800d080 <_dtoa_r+0x5e0>
 800d08e:	9a04      	ldr	r2, [sp, #16]
 800d090:	3201      	adds	r2, #1
 800d092:	9204      	str	r2, [sp, #16]
 800d094:	2230      	movs	r2, #48	@ 0x30
 800d096:	703a      	strb	r2, [r7, #0]
 800d098:	781a      	ldrb	r2, [r3, #0]
 800d09a:	3201      	adds	r2, #1
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	e7bd      	b.n	800d01c <_dtoa_r+0x57c>
 800d0a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d0a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ac:	f47f aeef 	bne.w	800ce8e <_dtoa_r+0x3ee>
 800d0b0:	e710      	b.n	800ced4 <_dtoa_r+0x434>
 800d0b2:	bf00      	nop
 800d0b4:	0800e870 	.word	0x0800e870
 800d0b8:	0800e848 	.word	0x0800e848
 800d0bc:	9908      	ldr	r1, [sp, #32]
 800d0be:	2900      	cmp	r1, #0
 800d0c0:	f000 80e3 	beq.w	800d28a <_dtoa_r+0x7ea>
 800d0c4:	9907      	ldr	r1, [sp, #28]
 800d0c6:	2901      	cmp	r1, #1
 800d0c8:	f300 80c8 	bgt.w	800d25c <_dtoa_r+0x7bc>
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	f000 80c1 	beq.w	800d254 <_dtoa_r+0x7b4>
 800d0d2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d0d6:	9e05      	ldr	r6, [sp, #20]
 800d0d8:	461c      	mov	r4, r3
 800d0da:	9304      	str	r3, [sp, #16]
 800d0dc:	9b05      	ldr	r3, [sp, #20]
 800d0de:	4413      	add	r3, r2
 800d0e0:	9305      	str	r3, [sp, #20]
 800d0e2:	9b06      	ldr	r3, [sp, #24]
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	4413      	add	r3, r2
 800d0e8:	4648      	mov	r0, r9
 800d0ea:	9306      	str	r3, [sp, #24]
 800d0ec:	f000 fc22 	bl	800d934 <__i2b>
 800d0f0:	9b04      	ldr	r3, [sp, #16]
 800d0f2:	4605      	mov	r5, r0
 800d0f4:	b166      	cbz	r6, 800d110 <_dtoa_r+0x670>
 800d0f6:	9a06      	ldr	r2, [sp, #24]
 800d0f8:	2a00      	cmp	r2, #0
 800d0fa:	dd09      	ble.n	800d110 <_dtoa_r+0x670>
 800d0fc:	42b2      	cmp	r2, r6
 800d0fe:	9905      	ldr	r1, [sp, #20]
 800d100:	bfa8      	it	ge
 800d102:	4632      	movge	r2, r6
 800d104:	1a89      	subs	r1, r1, r2
 800d106:	9105      	str	r1, [sp, #20]
 800d108:	9906      	ldr	r1, [sp, #24]
 800d10a:	1ab6      	subs	r6, r6, r2
 800d10c:	1a8a      	subs	r2, r1, r2
 800d10e:	9206      	str	r2, [sp, #24]
 800d110:	b1fb      	cbz	r3, 800d152 <_dtoa_r+0x6b2>
 800d112:	9a08      	ldr	r2, [sp, #32]
 800d114:	2a00      	cmp	r2, #0
 800d116:	f000 80bc 	beq.w	800d292 <_dtoa_r+0x7f2>
 800d11a:	b19c      	cbz	r4, 800d144 <_dtoa_r+0x6a4>
 800d11c:	4629      	mov	r1, r5
 800d11e:	4622      	mov	r2, r4
 800d120:	4648      	mov	r0, r9
 800d122:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d124:	f000 fcc6 	bl	800dab4 <__pow5mult>
 800d128:	9a01      	ldr	r2, [sp, #4]
 800d12a:	4601      	mov	r1, r0
 800d12c:	4605      	mov	r5, r0
 800d12e:	4648      	mov	r0, r9
 800d130:	f000 fc16 	bl	800d960 <__multiply>
 800d134:	9901      	ldr	r1, [sp, #4]
 800d136:	9004      	str	r0, [sp, #16]
 800d138:	4648      	mov	r0, r9
 800d13a:	f000 fb47 	bl	800d7cc <_Bfree>
 800d13e:	9a04      	ldr	r2, [sp, #16]
 800d140:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d142:	9201      	str	r2, [sp, #4]
 800d144:	1b1a      	subs	r2, r3, r4
 800d146:	d004      	beq.n	800d152 <_dtoa_r+0x6b2>
 800d148:	9901      	ldr	r1, [sp, #4]
 800d14a:	4648      	mov	r0, r9
 800d14c:	f000 fcb2 	bl	800dab4 <__pow5mult>
 800d150:	9001      	str	r0, [sp, #4]
 800d152:	2101      	movs	r1, #1
 800d154:	4648      	mov	r0, r9
 800d156:	f000 fbed 	bl	800d934 <__i2b>
 800d15a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d15c:	4604      	mov	r4, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	f000 81d0 	beq.w	800d504 <_dtoa_r+0xa64>
 800d164:	461a      	mov	r2, r3
 800d166:	4601      	mov	r1, r0
 800d168:	4648      	mov	r0, r9
 800d16a:	f000 fca3 	bl	800dab4 <__pow5mult>
 800d16e:	9b07      	ldr	r3, [sp, #28]
 800d170:	2b01      	cmp	r3, #1
 800d172:	4604      	mov	r4, r0
 800d174:	f300 8095 	bgt.w	800d2a2 <_dtoa_r+0x802>
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f040 808b 	bne.w	800d296 <_dtoa_r+0x7f6>
 800d180:	9b03      	ldr	r3, [sp, #12]
 800d182:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d186:	2a00      	cmp	r2, #0
 800d188:	f040 8087 	bne.w	800d29a <_dtoa_r+0x7fa>
 800d18c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d190:	0d12      	lsrs	r2, r2, #20
 800d192:	0512      	lsls	r2, r2, #20
 800d194:	2a00      	cmp	r2, #0
 800d196:	f000 8082 	beq.w	800d29e <_dtoa_r+0x7fe>
 800d19a:	9b05      	ldr	r3, [sp, #20]
 800d19c:	3301      	adds	r3, #1
 800d19e:	9305      	str	r3, [sp, #20]
 800d1a0:	9b06      	ldr	r3, [sp, #24]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	9306      	str	r3, [sp, #24]
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 81af 	beq.w	800d510 <_dtoa_r+0xa70>
 800d1b2:	6922      	ldr	r2, [r4, #16]
 800d1b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d1b8:	6910      	ldr	r0, [r2, #16]
 800d1ba:	f000 fb6f 	bl	800d89c <__hi0bits>
 800d1be:	f1c0 0020 	rsb	r0, r0, #32
 800d1c2:	9b06      	ldr	r3, [sp, #24]
 800d1c4:	4418      	add	r0, r3
 800d1c6:	f010 001f 	ands.w	r0, r0, #31
 800d1ca:	d076      	beq.n	800d2ba <_dtoa_r+0x81a>
 800d1cc:	f1c0 0220 	rsb	r2, r0, #32
 800d1d0:	2a04      	cmp	r2, #4
 800d1d2:	dd69      	ble.n	800d2a8 <_dtoa_r+0x808>
 800d1d4:	9b05      	ldr	r3, [sp, #20]
 800d1d6:	f1c0 001c 	rsb	r0, r0, #28
 800d1da:	4403      	add	r3, r0
 800d1dc:	9305      	str	r3, [sp, #20]
 800d1de:	9b06      	ldr	r3, [sp, #24]
 800d1e0:	4406      	add	r6, r0
 800d1e2:	4403      	add	r3, r0
 800d1e4:	9306      	str	r3, [sp, #24]
 800d1e6:	9b05      	ldr	r3, [sp, #20]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	dd05      	ble.n	800d1f8 <_dtoa_r+0x758>
 800d1ec:	9901      	ldr	r1, [sp, #4]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	4648      	mov	r0, r9
 800d1f2:	f000 fcb9 	bl	800db68 <__lshift>
 800d1f6:	9001      	str	r0, [sp, #4]
 800d1f8:	9b06      	ldr	r3, [sp, #24]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	dd05      	ble.n	800d20a <_dtoa_r+0x76a>
 800d1fe:	4621      	mov	r1, r4
 800d200:	461a      	mov	r2, r3
 800d202:	4648      	mov	r0, r9
 800d204:	f000 fcb0 	bl	800db68 <__lshift>
 800d208:	4604      	mov	r4, r0
 800d20a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d056      	beq.n	800d2be <_dtoa_r+0x81e>
 800d210:	9801      	ldr	r0, [sp, #4]
 800d212:	4621      	mov	r1, r4
 800d214:	f000 fd14 	bl	800dc40 <__mcmp>
 800d218:	2800      	cmp	r0, #0
 800d21a:	da50      	bge.n	800d2be <_dtoa_r+0x81e>
 800d21c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d220:	9304      	str	r3, [sp, #16]
 800d222:	9901      	ldr	r1, [sp, #4]
 800d224:	2300      	movs	r3, #0
 800d226:	220a      	movs	r2, #10
 800d228:	4648      	mov	r0, r9
 800d22a:	f000 faf1 	bl	800d810 <__multadd>
 800d22e:	9b08      	ldr	r3, [sp, #32]
 800d230:	9001      	str	r0, [sp, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	f000 816e 	beq.w	800d514 <_dtoa_r+0xa74>
 800d238:	4629      	mov	r1, r5
 800d23a:	2300      	movs	r3, #0
 800d23c:	220a      	movs	r2, #10
 800d23e:	4648      	mov	r0, r9
 800d240:	f000 fae6 	bl	800d810 <__multadd>
 800d244:	f1bb 0f00 	cmp.w	fp, #0
 800d248:	4605      	mov	r5, r0
 800d24a:	dc64      	bgt.n	800d316 <_dtoa_r+0x876>
 800d24c:	9b07      	ldr	r3, [sp, #28]
 800d24e:	2b02      	cmp	r3, #2
 800d250:	dc3e      	bgt.n	800d2d0 <_dtoa_r+0x830>
 800d252:	e060      	b.n	800d316 <_dtoa_r+0x876>
 800d254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d256:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d25a:	e73c      	b.n	800d0d6 <_dtoa_r+0x636>
 800d25c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d260:	42a3      	cmp	r3, r4
 800d262:	bfbf      	itttt	lt
 800d264:	1ae2      	sublt	r2, r4, r3
 800d266:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d268:	189b      	addlt	r3, r3, r2
 800d26a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d26c:	bfae      	itee	ge
 800d26e:	1b1c      	subge	r4, r3, r4
 800d270:	4623      	movlt	r3, r4
 800d272:	2400      	movlt	r4, #0
 800d274:	f1ba 0f00 	cmp.w	sl, #0
 800d278:	bfb5      	itete	lt
 800d27a:	9a05      	ldrlt	r2, [sp, #20]
 800d27c:	9e05      	ldrge	r6, [sp, #20]
 800d27e:	eba2 060a 	sublt.w	r6, r2, sl
 800d282:	4652      	movge	r2, sl
 800d284:	bfb8      	it	lt
 800d286:	2200      	movlt	r2, #0
 800d288:	e727      	b.n	800d0da <_dtoa_r+0x63a>
 800d28a:	9e05      	ldr	r6, [sp, #20]
 800d28c:	9d08      	ldr	r5, [sp, #32]
 800d28e:	461c      	mov	r4, r3
 800d290:	e730      	b.n	800d0f4 <_dtoa_r+0x654>
 800d292:	461a      	mov	r2, r3
 800d294:	e758      	b.n	800d148 <_dtoa_r+0x6a8>
 800d296:	2300      	movs	r3, #0
 800d298:	e786      	b.n	800d1a8 <_dtoa_r+0x708>
 800d29a:	9b02      	ldr	r3, [sp, #8]
 800d29c:	e784      	b.n	800d1a8 <_dtoa_r+0x708>
 800d29e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d2a0:	e783      	b.n	800d1aa <_dtoa_r+0x70a>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2a6:	e784      	b.n	800d1b2 <_dtoa_r+0x712>
 800d2a8:	d09d      	beq.n	800d1e6 <_dtoa_r+0x746>
 800d2aa:	9b05      	ldr	r3, [sp, #20]
 800d2ac:	321c      	adds	r2, #28
 800d2ae:	4413      	add	r3, r2
 800d2b0:	9305      	str	r3, [sp, #20]
 800d2b2:	9b06      	ldr	r3, [sp, #24]
 800d2b4:	4416      	add	r6, r2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	e794      	b.n	800d1e4 <_dtoa_r+0x744>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	e7f5      	b.n	800d2aa <_dtoa_r+0x80a>
 800d2be:	f1ba 0f00 	cmp.w	sl, #0
 800d2c2:	f8cd 8010 	str.w	r8, [sp, #16]
 800d2c6:	46d3      	mov	fp, sl
 800d2c8:	dc21      	bgt.n	800d30e <_dtoa_r+0x86e>
 800d2ca:	9b07      	ldr	r3, [sp, #28]
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	dd1e      	ble.n	800d30e <_dtoa_r+0x86e>
 800d2d0:	f1bb 0f00 	cmp.w	fp, #0
 800d2d4:	f47f aeb7 	bne.w	800d046 <_dtoa_r+0x5a6>
 800d2d8:	4621      	mov	r1, r4
 800d2da:	465b      	mov	r3, fp
 800d2dc:	2205      	movs	r2, #5
 800d2de:	4648      	mov	r0, r9
 800d2e0:	f000 fa96 	bl	800d810 <__multadd>
 800d2e4:	4601      	mov	r1, r0
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	9801      	ldr	r0, [sp, #4]
 800d2ea:	f000 fca9 	bl	800dc40 <__mcmp>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	f77f aea9 	ble.w	800d046 <_dtoa_r+0x5a6>
 800d2f4:	463e      	mov	r6, r7
 800d2f6:	2331      	movs	r3, #49	@ 0x31
 800d2f8:	f806 3b01 	strb.w	r3, [r6], #1
 800d2fc:	9b04      	ldr	r3, [sp, #16]
 800d2fe:	3301      	adds	r3, #1
 800d300:	9304      	str	r3, [sp, #16]
 800d302:	e6a4      	b.n	800d04e <_dtoa_r+0x5ae>
 800d304:	f8cd 8010 	str.w	r8, [sp, #16]
 800d308:	4654      	mov	r4, sl
 800d30a:	4625      	mov	r5, r4
 800d30c:	e7f2      	b.n	800d2f4 <_dtoa_r+0x854>
 800d30e:	9b08      	ldr	r3, [sp, #32]
 800d310:	2b00      	cmp	r3, #0
 800d312:	f000 8103 	beq.w	800d51c <_dtoa_r+0xa7c>
 800d316:	2e00      	cmp	r6, #0
 800d318:	dd05      	ble.n	800d326 <_dtoa_r+0x886>
 800d31a:	4629      	mov	r1, r5
 800d31c:	4632      	mov	r2, r6
 800d31e:	4648      	mov	r0, r9
 800d320:	f000 fc22 	bl	800db68 <__lshift>
 800d324:	4605      	mov	r5, r0
 800d326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d058      	beq.n	800d3de <_dtoa_r+0x93e>
 800d32c:	6869      	ldr	r1, [r5, #4]
 800d32e:	4648      	mov	r0, r9
 800d330:	f000 fa0c 	bl	800d74c <_Balloc>
 800d334:	4606      	mov	r6, r0
 800d336:	b928      	cbnz	r0, 800d344 <_dtoa_r+0x8a4>
 800d338:	4b82      	ldr	r3, [pc, #520]	@ (800d544 <_dtoa_r+0xaa4>)
 800d33a:	4602      	mov	r2, r0
 800d33c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d340:	f7ff bbc7 	b.w	800cad2 <_dtoa_r+0x32>
 800d344:	692a      	ldr	r2, [r5, #16]
 800d346:	3202      	adds	r2, #2
 800d348:	0092      	lsls	r2, r2, #2
 800d34a:	f105 010c 	add.w	r1, r5, #12
 800d34e:	300c      	adds	r0, #12
 800d350:	f7ff fb0f 	bl	800c972 <memcpy>
 800d354:	2201      	movs	r2, #1
 800d356:	4631      	mov	r1, r6
 800d358:	4648      	mov	r0, r9
 800d35a:	f000 fc05 	bl	800db68 <__lshift>
 800d35e:	1c7b      	adds	r3, r7, #1
 800d360:	9305      	str	r3, [sp, #20]
 800d362:	eb07 030b 	add.w	r3, r7, fp
 800d366:	9309      	str	r3, [sp, #36]	@ 0x24
 800d368:	9b02      	ldr	r3, [sp, #8]
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	46a8      	mov	r8, r5
 800d370:	9308      	str	r3, [sp, #32]
 800d372:	4605      	mov	r5, r0
 800d374:	9b05      	ldr	r3, [sp, #20]
 800d376:	9801      	ldr	r0, [sp, #4]
 800d378:	4621      	mov	r1, r4
 800d37a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d37e:	f7ff fb06 	bl	800c98e <quorem>
 800d382:	4641      	mov	r1, r8
 800d384:	9002      	str	r0, [sp, #8]
 800d386:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d38a:	9801      	ldr	r0, [sp, #4]
 800d38c:	f000 fc58 	bl	800dc40 <__mcmp>
 800d390:	462a      	mov	r2, r5
 800d392:	9006      	str	r0, [sp, #24]
 800d394:	4621      	mov	r1, r4
 800d396:	4648      	mov	r0, r9
 800d398:	f000 fc6e 	bl	800dc78 <__mdiff>
 800d39c:	68c2      	ldr	r2, [r0, #12]
 800d39e:	4606      	mov	r6, r0
 800d3a0:	b9fa      	cbnz	r2, 800d3e2 <_dtoa_r+0x942>
 800d3a2:	4601      	mov	r1, r0
 800d3a4:	9801      	ldr	r0, [sp, #4]
 800d3a6:	f000 fc4b 	bl	800dc40 <__mcmp>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4648      	mov	r0, r9
 800d3b0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d3b2:	f000 fa0b 	bl	800d7cc <_Bfree>
 800d3b6:	9b07      	ldr	r3, [sp, #28]
 800d3b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3ba:	9e05      	ldr	r6, [sp, #20]
 800d3bc:	ea43 0102 	orr.w	r1, r3, r2
 800d3c0:	9b08      	ldr	r3, [sp, #32]
 800d3c2:	4319      	orrs	r1, r3
 800d3c4:	d10f      	bne.n	800d3e6 <_dtoa_r+0x946>
 800d3c6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d3ca:	d028      	beq.n	800d41e <_dtoa_r+0x97e>
 800d3cc:	9b06      	ldr	r3, [sp, #24]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	dd02      	ble.n	800d3d8 <_dtoa_r+0x938>
 800d3d2:	9b02      	ldr	r3, [sp, #8]
 800d3d4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d3d8:	f88b a000 	strb.w	sl, [fp]
 800d3dc:	e639      	b.n	800d052 <_dtoa_r+0x5b2>
 800d3de:	4628      	mov	r0, r5
 800d3e0:	e7bd      	b.n	800d35e <_dtoa_r+0x8be>
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	e7e2      	b.n	800d3ac <_dtoa_r+0x90c>
 800d3e6:	9b06      	ldr	r3, [sp, #24]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	db04      	blt.n	800d3f6 <_dtoa_r+0x956>
 800d3ec:	9907      	ldr	r1, [sp, #28]
 800d3ee:	430b      	orrs	r3, r1
 800d3f0:	9908      	ldr	r1, [sp, #32]
 800d3f2:	430b      	orrs	r3, r1
 800d3f4:	d120      	bne.n	800d438 <_dtoa_r+0x998>
 800d3f6:	2a00      	cmp	r2, #0
 800d3f8:	ddee      	ble.n	800d3d8 <_dtoa_r+0x938>
 800d3fa:	9901      	ldr	r1, [sp, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	4648      	mov	r0, r9
 800d400:	f000 fbb2 	bl	800db68 <__lshift>
 800d404:	4621      	mov	r1, r4
 800d406:	9001      	str	r0, [sp, #4]
 800d408:	f000 fc1a 	bl	800dc40 <__mcmp>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	dc03      	bgt.n	800d418 <_dtoa_r+0x978>
 800d410:	d1e2      	bne.n	800d3d8 <_dtoa_r+0x938>
 800d412:	f01a 0f01 	tst.w	sl, #1
 800d416:	d0df      	beq.n	800d3d8 <_dtoa_r+0x938>
 800d418:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d41c:	d1d9      	bne.n	800d3d2 <_dtoa_r+0x932>
 800d41e:	2339      	movs	r3, #57	@ 0x39
 800d420:	f88b 3000 	strb.w	r3, [fp]
 800d424:	4633      	mov	r3, r6
 800d426:	461e      	mov	r6, r3
 800d428:	3b01      	subs	r3, #1
 800d42a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d42e:	2a39      	cmp	r2, #57	@ 0x39
 800d430:	d053      	beq.n	800d4da <_dtoa_r+0xa3a>
 800d432:	3201      	adds	r2, #1
 800d434:	701a      	strb	r2, [r3, #0]
 800d436:	e60c      	b.n	800d052 <_dtoa_r+0x5b2>
 800d438:	2a00      	cmp	r2, #0
 800d43a:	dd07      	ble.n	800d44c <_dtoa_r+0x9ac>
 800d43c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d440:	d0ed      	beq.n	800d41e <_dtoa_r+0x97e>
 800d442:	f10a 0301 	add.w	r3, sl, #1
 800d446:	f88b 3000 	strb.w	r3, [fp]
 800d44a:	e602      	b.n	800d052 <_dtoa_r+0x5b2>
 800d44c:	9b05      	ldr	r3, [sp, #20]
 800d44e:	9a05      	ldr	r2, [sp, #20]
 800d450:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d456:	4293      	cmp	r3, r2
 800d458:	d029      	beq.n	800d4ae <_dtoa_r+0xa0e>
 800d45a:	9901      	ldr	r1, [sp, #4]
 800d45c:	2300      	movs	r3, #0
 800d45e:	220a      	movs	r2, #10
 800d460:	4648      	mov	r0, r9
 800d462:	f000 f9d5 	bl	800d810 <__multadd>
 800d466:	45a8      	cmp	r8, r5
 800d468:	9001      	str	r0, [sp, #4]
 800d46a:	f04f 0300 	mov.w	r3, #0
 800d46e:	f04f 020a 	mov.w	r2, #10
 800d472:	4641      	mov	r1, r8
 800d474:	4648      	mov	r0, r9
 800d476:	d107      	bne.n	800d488 <_dtoa_r+0x9e8>
 800d478:	f000 f9ca 	bl	800d810 <__multadd>
 800d47c:	4680      	mov	r8, r0
 800d47e:	4605      	mov	r5, r0
 800d480:	9b05      	ldr	r3, [sp, #20]
 800d482:	3301      	adds	r3, #1
 800d484:	9305      	str	r3, [sp, #20]
 800d486:	e775      	b.n	800d374 <_dtoa_r+0x8d4>
 800d488:	f000 f9c2 	bl	800d810 <__multadd>
 800d48c:	4629      	mov	r1, r5
 800d48e:	4680      	mov	r8, r0
 800d490:	2300      	movs	r3, #0
 800d492:	220a      	movs	r2, #10
 800d494:	4648      	mov	r0, r9
 800d496:	f000 f9bb 	bl	800d810 <__multadd>
 800d49a:	4605      	mov	r5, r0
 800d49c:	e7f0      	b.n	800d480 <_dtoa_r+0x9e0>
 800d49e:	f1bb 0f00 	cmp.w	fp, #0
 800d4a2:	bfcc      	ite	gt
 800d4a4:	465e      	movgt	r6, fp
 800d4a6:	2601      	movle	r6, #1
 800d4a8:	443e      	add	r6, r7
 800d4aa:	f04f 0800 	mov.w	r8, #0
 800d4ae:	9901      	ldr	r1, [sp, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	4648      	mov	r0, r9
 800d4b4:	f000 fb58 	bl	800db68 <__lshift>
 800d4b8:	4621      	mov	r1, r4
 800d4ba:	9001      	str	r0, [sp, #4]
 800d4bc:	f000 fbc0 	bl	800dc40 <__mcmp>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	dcaf      	bgt.n	800d424 <_dtoa_r+0x984>
 800d4c4:	d102      	bne.n	800d4cc <_dtoa_r+0xa2c>
 800d4c6:	f01a 0f01 	tst.w	sl, #1
 800d4ca:	d1ab      	bne.n	800d424 <_dtoa_r+0x984>
 800d4cc:	4633      	mov	r3, r6
 800d4ce:	461e      	mov	r6, r3
 800d4d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4d4:	2a30      	cmp	r2, #48	@ 0x30
 800d4d6:	d0fa      	beq.n	800d4ce <_dtoa_r+0xa2e>
 800d4d8:	e5bb      	b.n	800d052 <_dtoa_r+0x5b2>
 800d4da:	429f      	cmp	r7, r3
 800d4dc:	d1a3      	bne.n	800d426 <_dtoa_r+0x986>
 800d4de:	9b04      	ldr	r3, [sp, #16]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	9304      	str	r3, [sp, #16]
 800d4e4:	2331      	movs	r3, #49	@ 0x31
 800d4e6:	703b      	strb	r3, [r7, #0]
 800d4e8:	e5b3      	b.n	800d052 <_dtoa_r+0x5b2>
 800d4ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d4ec:	4f16      	ldr	r7, [pc, #88]	@ (800d548 <_dtoa_r+0xaa8>)
 800d4ee:	b11b      	cbz	r3, 800d4f8 <_dtoa_r+0xa58>
 800d4f0:	f107 0308 	add.w	r3, r7, #8
 800d4f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d4f6:	6013      	str	r3, [r2, #0]
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	b011      	add	sp, #68	@ 0x44
 800d4fc:	ecbd 8b02 	vpop	{d8}
 800d500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d504:	9b07      	ldr	r3, [sp, #28]
 800d506:	2b01      	cmp	r3, #1
 800d508:	f77f ae36 	ble.w	800d178 <_dtoa_r+0x6d8>
 800d50c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d50e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d510:	2001      	movs	r0, #1
 800d512:	e656      	b.n	800d1c2 <_dtoa_r+0x722>
 800d514:	f1bb 0f00 	cmp.w	fp, #0
 800d518:	f77f aed7 	ble.w	800d2ca <_dtoa_r+0x82a>
 800d51c:	463e      	mov	r6, r7
 800d51e:	9801      	ldr	r0, [sp, #4]
 800d520:	4621      	mov	r1, r4
 800d522:	f7ff fa34 	bl	800c98e <quorem>
 800d526:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d52a:	f806 ab01 	strb.w	sl, [r6], #1
 800d52e:	1bf2      	subs	r2, r6, r7
 800d530:	4593      	cmp	fp, r2
 800d532:	ddb4      	ble.n	800d49e <_dtoa_r+0x9fe>
 800d534:	9901      	ldr	r1, [sp, #4]
 800d536:	2300      	movs	r3, #0
 800d538:	220a      	movs	r2, #10
 800d53a:	4648      	mov	r0, r9
 800d53c:	f000 f968 	bl	800d810 <__multadd>
 800d540:	9001      	str	r0, [sp, #4]
 800d542:	e7ec      	b.n	800d51e <_dtoa_r+0xa7e>
 800d544:	0800e7cc 	.word	0x0800e7cc
 800d548:	0800e750 	.word	0x0800e750

0800d54c <_free_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4605      	mov	r5, r0
 800d550:	2900      	cmp	r1, #0
 800d552:	d041      	beq.n	800d5d8 <_free_r+0x8c>
 800d554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d558:	1f0c      	subs	r4, r1, #4
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	bfb8      	it	lt
 800d55e:	18e4      	addlt	r4, r4, r3
 800d560:	f000 f8e8 	bl	800d734 <__malloc_lock>
 800d564:	4a1d      	ldr	r2, [pc, #116]	@ (800d5dc <_free_r+0x90>)
 800d566:	6813      	ldr	r3, [r2, #0]
 800d568:	b933      	cbnz	r3, 800d578 <_free_r+0x2c>
 800d56a:	6063      	str	r3, [r4, #4]
 800d56c:	6014      	str	r4, [r2, #0]
 800d56e:	4628      	mov	r0, r5
 800d570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d574:	f000 b8e4 	b.w	800d740 <__malloc_unlock>
 800d578:	42a3      	cmp	r3, r4
 800d57a:	d908      	bls.n	800d58e <_free_r+0x42>
 800d57c:	6820      	ldr	r0, [r4, #0]
 800d57e:	1821      	adds	r1, r4, r0
 800d580:	428b      	cmp	r3, r1
 800d582:	bf01      	itttt	eq
 800d584:	6819      	ldreq	r1, [r3, #0]
 800d586:	685b      	ldreq	r3, [r3, #4]
 800d588:	1809      	addeq	r1, r1, r0
 800d58a:	6021      	streq	r1, [r4, #0]
 800d58c:	e7ed      	b.n	800d56a <_free_r+0x1e>
 800d58e:	461a      	mov	r2, r3
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	b10b      	cbz	r3, 800d598 <_free_r+0x4c>
 800d594:	42a3      	cmp	r3, r4
 800d596:	d9fa      	bls.n	800d58e <_free_r+0x42>
 800d598:	6811      	ldr	r1, [r2, #0]
 800d59a:	1850      	adds	r0, r2, r1
 800d59c:	42a0      	cmp	r0, r4
 800d59e:	d10b      	bne.n	800d5b8 <_free_r+0x6c>
 800d5a0:	6820      	ldr	r0, [r4, #0]
 800d5a2:	4401      	add	r1, r0
 800d5a4:	1850      	adds	r0, r2, r1
 800d5a6:	4283      	cmp	r3, r0
 800d5a8:	6011      	str	r1, [r2, #0]
 800d5aa:	d1e0      	bne.n	800d56e <_free_r+0x22>
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	6053      	str	r3, [r2, #4]
 800d5b2:	4408      	add	r0, r1
 800d5b4:	6010      	str	r0, [r2, #0]
 800d5b6:	e7da      	b.n	800d56e <_free_r+0x22>
 800d5b8:	d902      	bls.n	800d5c0 <_free_r+0x74>
 800d5ba:	230c      	movs	r3, #12
 800d5bc:	602b      	str	r3, [r5, #0]
 800d5be:	e7d6      	b.n	800d56e <_free_r+0x22>
 800d5c0:	6820      	ldr	r0, [r4, #0]
 800d5c2:	1821      	adds	r1, r4, r0
 800d5c4:	428b      	cmp	r3, r1
 800d5c6:	bf04      	itt	eq
 800d5c8:	6819      	ldreq	r1, [r3, #0]
 800d5ca:	685b      	ldreq	r3, [r3, #4]
 800d5cc:	6063      	str	r3, [r4, #4]
 800d5ce:	bf04      	itt	eq
 800d5d0:	1809      	addeq	r1, r1, r0
 800d5d2:	6021      	streq	r1, [r4, #0]
 800d5d4:	6054      	str	r4, [r2, #4]
 800d5d6:	e7ca      	b.n	800d56e <_free_r+0x22>
 800d5d8:	bd38      	pop	{r3, r4, r5, pc}
 800d5da:	bf00      	nop
 800d5dc:	24005e2c 	.word	0x24005e2c

0800d5e0 <malloc>:
 800d5e0:	4b02      	ldr	r3, [pc, #8]	@ (800d5ec <malloc+0xc>)
 800d5e2:	4601      	mov	r1, r0
 800d5e4:	6818      	ldr	r0, [r3, #0]
 800d5e6:	f000 b825 	b.w	800d634 <_malloc_r>
 800d5ea:	bf00      	nop
 800d5ec:	24000020 	.word	0x24000020

0800d5f0 <sbrk_aligned>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	4e0f      	ldr	r6, [pc, #60]	@ (800d630 <sbrk_aligned+0x40>)
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	6831      	ldr	r1, [r6, #0]
 800d5f8:	4605      	mov	r5, r0
 800d5fa:	b911      	cbnz	r1, 800d602 <sbrk_aligned+0x12>
 800d5fc:	f000 feaa 	bl	800e354 <_sbrk_r>
 800d600:	6030      	str	r0, [r6, #0]
 800d602:	4621      	mov	r1, r4
 800d604:	4628      	mov	r0, r5
 800d606:	f000 fea5 	bl	800e354 <_sbrk_r>
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	d103      	bne.n	800d616 <sbrk_aligned+0x26>
 800d60e:	f04f 34ff 	mov.w	r4, #4294967295
 800d612:	4620      	mov	r0, r4
 800d614:	bd70      	pop	{r4, r5, r6, pc}
 800d616:	1cc4      	adds	r4, r0, #3
 800d618:	f024 0403 	bic.w	r4, r4, #3
 800d61c:	42a0      	cmp	r0, r4
 800d61e:	d0f8      	beq.n	800d612 <sbrk_aligned+0x22>
 800d620:	1a21      	subs	r1, r4, r0
 800d622:	4628      	mov	r0, r5
 800d624:	f000 fe96 	bl	800e354 <_sbrk_r>
 800d628:	3001      	adds	r0, #1
 800d62a:	d1f2      	bne.n	800d612 <sbrk_aligned+0x22>
 800d62c:	e7ef      	b.n	800d60e <sbrk_aligned+0x1e>
 800d62e:	bf00      	nop
 800d630:	24005e28 	.word	0x24005e28

0800d634 <_malloc_r>:
 800d634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d638:	1ccd      	adds	r5, r1, #3
 800d63a:	f025 0503 	bic.w	r5, r5, #3
 800d63e:	3508      	adds	r5, #8
 800d640:	2d0c      	cmp	r5, #12
 800d642:	bf38      	it	cc
 800d644:	250c      	movcc	r5, #12
 800d646:	2d00      	cmp	r5, #0
 800d648:	4606      	mov	r6, r0
 800d64a:	db01      	blt.n	800d650 <_malloc_r+0x1c>
 800d64c:	42a9      	cmp	r1, r5
 800d64e:	d904      	bls.n	800d65a <_malloc_r+0x26>
 800d650:	230c      	movs	r3, #12
 800d652:	6033      	str	r3, [r6, #0]
 800d654:	2000      	movs	r0, #0
 800d656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d65a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d730 <_malloc_r+0xfc>
 800d65e:	f000 f869 	bl	800d734 <__malloc_lock>
 800d662:	f8d8 3000 	ldr.w	r3, [r8]
 800d666:	461c      	mov	r4, r3
 800d668:	bb44      	cbnz	r4, 800d6bc <_malloc_r+0x88>
 800d66a:	4629      	mov	r1, r5
 800d66c:	4630      	mov	r0, r6
 800d66e:	f7ff ffbf 	bl	800d5f0 <sbrk_aligned>
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	4604      	mov	r4, r0
 800d676:	d158      	bne.n	800d72a <_malloc_r+0xf6>
 800d678:	f8d8 4000 	ldr.w	r4, [r8]
 800d67c:	4627      	mov	r7, r4
 800d67e:	2f00      	cmp	r7, #0
 800d680:	d143      	bne.n	800d70a <_malloc_r+0xd6>
 800d682:	2c00      	cmp	r4, #0
 800d684:	d04b      	beq.n	800d71e <_malloc_r+0xea>
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	4639      	mov	r1, r7
 800d68a:	4630      	mov	r0, r6
 800d68c:	eb04 0903 	add.w	r9, r4, r3
 800d690:	f000 fe60 	bl	800e354 <_sbrk_r>
 800d694:	4581      	cmp	r9, r0
 800d696:	d142      	bne.n	800d71e <_malloc_r+0xea>
 800d698:	6821      	ldr	r1, [r4, #0]
 800d69a:	1a6d      	subs	r5, r5, r1
 800d69c:	4629      	mov	r1, r5
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7ff ffa6 	bl	800d5f0 <sbrk_aligned>
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	d03a      	beq.n	800d71e <_malloc_r+0xea>
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	442b      	add	r3, r5
 800d6ac:	6023      	str	r3, [r4, #0]
 800d6ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d6b2:	685a      	ldr	r2, [r3, #4]
 800d6b4:	bb62      	cbnz	r2, 800d710 <_malloc_r+0xdc>
 800d6b6:	f8c8 7000 	str.w	r7, [r8]
 800d6ba:	e00f      	b.n	800d6dc <_malloc_r+0xa8>
 800d6bc:	6822      	ldr	r2, [r4, #0]
 800d6be:	1b52      	subs	r2, r2, r5
 800d6c0:	d420      	bmi.n	800d704 <_malloc_r+0xd0>
 800d6c2:	2a0b      	cmp	r2, #11
 800d6c4:	d917      	bls.n	800d6f6 <_malloc_r+0xc2>
 800d6c6:	1961      	adds	r1, r4, r5
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	6025      	str	r5, [r4, #0]
 800d6cc:	bf18      	it	ne
 800d6ce:	6059      	strne	r1, [r3, #4]
 800d6d0:	6863      	ldr	r3, [r4, #4]
 800d6d2:	bf08      	it	eq
 800d6d4:	f8c8 1000 	streq.w	r1, [r8]
 800d6d8:	5162      	str	r2, [r4, r5]
 800d6da:	604b      	str	r3, [r1, #4]
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f000 f82f 	bl	800d740 <__malloc_unlock>
 800d6e2:	f104 000b 	add.w	r0, r4, #11
 800d6e6:	1d23      	adds	r3, r4, #4
 800d6e8:	f020 0007 	bic.w	r0, r0, #7
 800d6ec:	1ac2      	subs	r2, r0, r3
 800d6ee:	bf1c      	itt	ne
 800d6f0:	1a1b      	subne	r3, r3, r0
 800d6f2:	50a3      	strne	r3, [r4, r2]
 800d6f4:	e7af      	b.n	800d656 <_malloc_r+0x22>
 800d6f6:	6862      	ldr	r2, [r4, #4]
 800d6f8:	42a3      	cmp	r3, r4
 800d6fa:	bf0c      	ite	eq
 800d6fc:	f8c8 2000 	streq.w	r2, [r8]
 800d700:	605a      	strne	r2, [r3, #4]
 800d702:	e7eb      	b.n	800d6dc <_malloc_r+0xa8>
 800d704:	4623      	mov	r3, r4
 800d706:	6864      	ldr	r4, [r4, #4]
 800d708:	e7ae      	b.n	800d668 <_malloc_r+0x34>
 800d70a:	463c      	mov	r4, r7
 800d70c:	687f      	ldr	r7, [r7, #4]
 800d70e:	e7b6      	b.n	800d67e <_malloc_r+0x4a>
 800d710:	461a      	mov	r2, r3
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	42a3      	cmp	r3, r4
 800d716:	d1fb      	bne.n	800d710 <_malloc_r+0xdc>
 800d718:	2300      	movs	r3, #0
 800d71a:	6053      	str	r3, [r2, #4]
 800d71c:	e7de      	b.n	800d6dc <_malloc_r+0xa8>
 800d71e:	230c      	movs	r3, #12
 800d720:	6033      	str	r3, [r6, #0]
 800d722:	4630      	mov	r0, r6
 800d724:	f000 f80c 	bl	800d740 <__malloc_unlock>
 800d728:	e794      	b.n	800d654 <_malloc_r+0x20>
 800d72a:	6005      	str	r5, [r0, #0]
 800d72c:	e7d6      	b.n	800d6dc <_malloc_r+0xa8>
 800d72e:	bf00      	nop
 800d730:	24005e2c 	.word	0x24005e2c

0800d734 <__malloc_lock>:
 800d734:	4801      	ldr	r0, [pc, #4]	@ (800d73c <__malloc_lock+0x8>)
 800d736:	f7ff b91a 	b.w	800c96e <__retarget_lock_acquire_recursive>
 800d73a:	bf00      	nop
 800d73c:	24005e24 	.word	0x24005e24

0800d740 <__malloc_unlock>:
 800d740:	4801      	ldr	r0, [pc, #4]	@ (800d748 <__malloc_unlock+0x8>)
 800d742:	f7ff b915 	b.w	800c970 <__retarget_lock_release_recursive>
 800d746:	bf00      	nop
 800d748:	24005e24 	.word	0x24005e24

0800d74c <_Balloc>:
 800d74c:	b570      	push	{r4, r5, r6, lr}
 800d74e:	69c6      	ldr	r6, [r0, #28]
 800d750:	4604      	mov	r4, r0
 800d752:	460d      	mov	r5, r1
 800d754:	b976      	cbnz	r6, 800d774 <_Balloc+0x28>
 800d756:	2010      	movs	r0, #16
 800d758:	f7ff ff42 	bl	800d5e0 <malloc>
 800d75c:	4602      	mov	r2, r0
 800d75e:	61e0      	str	r0, [r4, #28]
 800d760:	b920      	cbnz	r0, 800d76c <_Balloc+0x20>
 800d762:	4b18      	ldr	r3, [pc, #96]	@ (800d7c4 <_Balloc+0x78>)
 800d764:	4818      	ldr	r0, [pc, #96]	@ (800d7c8 <_Balloc+0x7c>)
 800d766:	216b      	movs	r1, #107	@ 0x6b
 800d768:	f000 fe04 	bl	800e374 <__assert_func>
 800d76c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d770:	6006      	str	r6, [r0, #0]
 800d772:	60c6      	str	r6, [r0, #12]
 800d774:	69e6      	ldr	r6, [r4, #28]
 800d776:	68f3      	ldr	r3, [r6, #12]
 800d778:	b183      	cbz	r3, 800d79c <_Balloc+0x50>
 800d77a:	69e3      	ldr	r3, [r4, #28]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d782:	b9b8      	cbnz	r0, 800d7b4 <_Balloc+0x68>
 800d784:	2101      	movs	r1, #1
 800d786:	fa01 f605 	lsl.w	r6, r1, r5
 800d78a:	1d72      	adds	r2, r6, #5
 800d78c:	0092      	lsls	r2, r2, #2
 800d78e:	4620      	mov	r0, r4
 800d790:	f000 fe0e 	bl	800e3b0 <_calloc_r>
 800d794:	b160      	cbz	r0, 800d7b0 <_Balloc+0x64>
 800d796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d79a:	e00e      	b.n	800d7ba <_Balloc+0x6e>
 800d79c:	2221      	movs	r2, #33	@ 0x21
 800d79e:	2104      	movs	r1, #4
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f000 fe05 	bl	800e3b0 <_calloc_r>
 800d7a6:	69e3      	ldr	r3, [r4, #28]
 800d7a8:	60f0      	str	r0, [r6, #12]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1e4      	bne.n	800d77a <_Balloc+0x2e>
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	bd70      	pop	{r4, r5, r6, pc}
 800d7b4:	6802      	ldr	r2, [r0, #0]
 800d7b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d7c0:	e7f7      	b.n	800d7b2 <_Balloc+0x66>
 800d7c2:	bf00      	nop
 800d7c4:	0800e75d 	.word	0x0800e75d
 800d7c8:	0800e7dd 	.word	0x0800e7dd

0800d7cc <_Bfree>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	69c6      	ldr	r6, [r0, #28]
 800d7d0:	4605      	mov	r5, r0
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	b976      	cbnz	r6, 800d7f4 <_Bfree+0x28>
 800d7d6:	2010      	movs	r0, #16
 800d7d8:	f7ff ff02 	bl	800d5e0 <malloc>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	61e8      	str	r0, [r5, #28]
 800d7e0:	b920      	cbnz	r0, 800d7ec <_Bfree+0x20>
 800d7e2:	4b09      	ldr	r3, [pc, #36]	@ (800d808 <_Bfree+0x3c>)
 800d7e4:	4809      	ldr	r0, [pc, #36]	@ (800d80c <_Bfree+0x40>)
 800d7e6:	218f      	movs	r1, #143	@ 0x8f
 800d7e8:	f000 fdc4 	bl	800e374 <__assert_func>
 800d7ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7f0:	6006      	str	r6, [r0, #0]
 800d7f2:	60c6      	str	r6, [r0, #12]
 800d7f4:	b13c      	cbz	r4, 800d806 <_Bfree+0x3a>
 800d7f6:	69eb      	ldr	r3, [r5, #28]
 800d7f8:	6862      	ldr	r2, [r4, #4]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d800:	6021      	str	r1, [r4, #0]
 800d802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d806:	bd70      	pop	{r4, r5, r6, pc}
 800d808:	0800e75d 	.word	0x0800e75d
 800d80c:	0800e7dd 	.word	0x0800e7dd

0800d810 <__multadd>:
 800d810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d814:	690d      	ldr	r5, [r1, #16]
 800d816:	4607      	mov	r7, r0
 800d818:	460c      	mov	r4, r1
 800d81a:	461e      	mov	r6, r3
 800d81c:	f101 0c14 	add.w	ip, r1, #20
 800d820:	2000      	movs	r0, #0
 800d822:	f8dc 3000 	ldr.w	r3, [ip]
 800d826:	b299      	uxth	r1, r3
 800d828:	fb02 6101 	mla	r1, r2, r1, r6
 800d82c:	0c1e      	lsrs	r6, r3, #16
 800d82e:	0c0b      	lsrs	r3, r1, #16
 800d830:	fb02 3306 	mla	r3, r2, r6, r3
 800d834:	b289      	uxth	r1, r1
 800d836:	3001      	adds	r0, #1
 800d838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d83c:	4285      	cmp	r5, r0
 800d83e:	f84c 1b04 	str.w	r1, [ip], #4
 800d842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d846:	dcec      	bgt.n	800d822 <__multadd+0x12>
 800d848:	b30e      	cbz	r6, 800d88e <__multadd+0x7e>
 800d84a:	68a3      	ldr	r3, [r4, #8]
 800d84c:	42ab      	cmp	r3, r5
 800d84e:	dc19      	bgt.n	800d884 <__multadd+0x74>
 800d850:	6861      	ldr	r1, [r4, #4]
 800d852:	4638      	mov	r0, r7
 800d854:	3101      	adds	r1, #1
 800d856:	f7ff ff79 	bl	800d74c <_Balloc>
 800d85a:	4680      	mov	r8, r0
 800d85c:	b928      	cbnz	r0, 800d86a <__multadd+0x5a>
 800d85e:	4602      	mov	r2, r0
 800d860:	4b0c      	ldr	r3, [pc, #48]	@ (800d894 <__multadd+0x84>)
 800d862:	480d      	ldr	r0, [pc, #52]	@ (800d898 <__multadd+0x88>)
 800d864:	21ba      	movs	r1, #186	@ 0xba
 800d866:	f000 fd85 	bl	800e374 <__assert_func>
 800d86a:	6922      	ldr	r2, [r4, #16]
 800d86c:	3202      	adds	r2, #2
 800d86e:	f104 010c 	add.w	r1, r4, #12
 800d872:	0092      	lsls	r2, r2, #2
 800d874:	300c      	adds	r0, #12
 800d876:	f7ff f87c 	bl	800c972 <memcpy>
 800d87a:	4621      	mov	r1, r4
 800d87c:	4638      	mov	r0, r7
 800d87e:	f7ff ffa5 	bl	800d7cc <_Bfree>
 800d882:	4644      	mov	r4, r8
 800d884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d888:	3501      	adds	r5, #1
 800d88a:	615e      	str	r6, [r3, #20]
 800d88c:	6125      	str	r5, [r4, #16]
 800d88e:	4620      	mov	r0, r4
 800d890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d894:	0800e7cc 	.word	0x0800e7cc
 800d898:	0800e7dd 	.word	0x0800e7dd

0800d89c <__hi0bits>:
 800d89c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	bf36      	itet	cc
 800d8a4:	0403      	lslcc	r3, r0, #16
 800d8a6:	2000      	movcs	r0, #0
 800d8a8:	2010      	movcc	r0, #16
 800d8aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d8ae:	bf3c      	itt	cc
 800d8b0:	021b      	lslcc	r3, r3, #8
 800d8b2:	3008      	addcc	r0, #8
 800d8b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8b8:	bf3c      	itt	cc
 800d8ba:	011b      	lslcc	r3, r3, #4
 800d8bc:	3004      	addcc	r0, #4
 800d8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8c2:	bf3c      	itt	cc
 800d8c4:	009b      	lslcc	r3, r3, #2
 800d8c6:	3002      	addcc	r0, #2
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	db05      	blt.n	800d8d8 <__hi0bits+0x3c>
 800d8cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d8d0:	f100 0001 	add.w	r0, r0, #1
 800d8d4:	bf08      	it	eq
 800d8d6:	2020      	moveq	r0, #32
 800d8d8:	4770      	bx	lr

0800d8da <__lo0bits>:
 800d8da:	6803      	ldr	r3, [r0, #0]
 800d8dc:	4602      	mov	r2, r0
 800d8de:	f013 0007 	ands.w	r0, r3, #7
 800d8e2:	d00b      	beq.n	800d8fc <__lo0bits+0x22>
 800d8e4:	07d9      	lsls	r1, r3, #31
 800d8e6:	d421      	bmi.n	800d92c <__lo0bits+0x52>
 800d8e8:	0798      	lsls	r0, r3, #30
 800d8ea:	bf49      	itett	mi
 800d8ec:	085b      	lsrmi	r3, r3, #1
 800d8ee:	089b      	lsrpl	r3, r3, #2
 800d8f0:	2001      	movmi	r0, #1
 800d8f2:	6013      	strmi	r3, [r2, #0]
 800d8f4:	bf5c      	itt	pl
 800d8f6:	6013      	strpl	r3, [r2, #0]
 800d8f8:	2002      	movpl	r0, #2
 800d8fa:	4770      	bx	lr
 800d8fc:	b299      	uxth	r1, r3
 800d8fe:	b909      	cbnz	r1, 800d904 <__lo0bits+0x2a>
 800d900:	0c1b      	lsrs	r3, r3, #16
 800d902:	2010      	movs	r0, #16
 800d904:	b2d9      	uxtb	r1, r3
 800d906:	b909      	cbnz	r1, 800d90c <__lo0bits+0x32>
 800d908:	3008      	adds	r0, #8
 800d90a:	0a1b      	lsrs	r3, r3, #8
 800d90c:	0719      	lsls	r1, r3, #28
 800d90e:	bf04      	itt	eq
 800d910:	091b      	lsreq	r3, r3, #4
 800d912:	3004      	addeq	r0, #4
 800d914:	0799      	lsls	r1, r3, #30
 800d916:	bf04      	itt	eq
 800d918:	089b      	lsreq	r3, r3, #2
 800d91a:	3002      	addeq	r0, #2
 800d91c:	07d9      	lsls	r1, r3, #31
 800d91e:	d403      	bmi.n	800d928 <__lo0bits+0x4e>
 800d920:	085b      	lsrs	r3, r3, #1
 800d922:	f100 0001 	add.w	r0, r0, #1
 800d926:	d003      	beq.n	800d930 <__lo0bits+0x56>
 800d928:	6013      	str	r3, [r2, #0]
 800d92a:	4770      	bx	lr
 800d92c:	2000      	movs	r0, #0
 800d92e:	4770      	bx	lr
 800d930:	2020      	movs	r0, #32
 800d932:	4770      	bx	lr

0800d934 <__i2b>:
 800d934:	b510      	push	{r4, lr}
 800d936:	460c      	mov	r4, r1
 800d938:	2101      	movs	r1, #1
 800d93a:	f7ff ff07 	bl	800d74c <_Balloc>
 800d93e:	4602      	mov	r2, r0
 800d940:	b928      	cbnz	r0, 800d94e <__i2b+0x1a>
 800d942:	4b05      	ldr	r3, [pc, #20]	@ (800d958 <__i2b+0x24>)
 800d944:	4805      	ldr	r0, [pc, #20]	@ (800d95c <__i2b+0x28>)
 800d946:	f240 1145 	movw	r1, #325	@ 0x145
 800d94a:	f000 fd13 	bl	800e374 <__assert_func>
 800d94e:	2301      	movs	r3, #1
 800d950:	6144      	str	r4, [r0, #20]
 800d952:	6103      	str	r3, [r0, #16]
 800d954:	bd10      	pop	{r4, pc}
 800d956:	bf00      	nop
 800d958:	0800e7cc 	.word	0x0800e7cc
 800d95c:	0800e7dd 	.word	0x0800e7dd

0800d960 <__multiply>:
 800d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d964:	4614      	mov	r4, r2
 800d966:	690a      	ldr	r2, [r1, #16]
 800d968:	6923      	ldr	r3, [r4, #16]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	bfa8      	it	ge
 800d96e:	4623      	movge	r3, r4
 800d970:	460f      	mov	r7, r1
 800d972:	bfa4      	itt	ge
 800d974:	460c      	movge	r4, r1
 800d976:	461f      	movge	r7, r3
 800d978:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d97c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d980:	68a3      	ldr	r3, [r4, #8]
 800d982:	6861      	ldr	r1, [r4, #4]
 800d984:	eb0a 0609 	add.w	r6, sl, r9
 800d988:	42b3      	cmp	r3, r6
 800d98a:	b085      	sub	sp, #20
 800d98c:	bfb8      	it	lt
 800d98e:	3101      	addlt	r1, #1
 800d990:	f7ff fedc 	bl	800d74c <_Balloc>
 800d994:	b930      	cbnz	r0, 800d9a4 <__multiply+0x44>
 800d996:	4602      	mov	r2, r0
 800d998:	4b44      	ldr	r3, [pc, #272]	@ (800daac <__multiply+0x14c>)
 800d99a:	4845      	ldr	r0, [pc, #276]	@ (800dab0 <__multiply+0x150>)
 800d99c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d9a0:	f000 fce8 	bl	800e374 <__assert_func>
 800d9a4:	f100 0514 	add.w	r5, r0, #20
 800d9a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9ac:	462b      	mov	r3, r5
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	4543      	cmp	r3, r8
 800d9b2:	d321      	bcc.n	800d9f8 <__multiply+0x98>
 800d9b4:	f107 0114 	add.w	r1, r7, #20
 800d9b8:	f104 0214 	add.w	r2, r4, #20
 800d9bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d9c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d9c4:	9302      	str	r3, [sp, #8]
 800d9c6:	1b13      	subs	r3, r2, r4
 800d9c8:	3b15      	subs	r3, #21
 800d9ca:	f023 0303 	bic.w	r3, r3, #3
 800d9ce:	3304      	adds	r3, #4
 800d9d0:	f104 0715 	add.w	r7, r4, #21
 800d9d4:	42ba      	cmp	r2, r7
 800d9d6:	bf38      	it	cc
 800d9d8:	2304      	movcc	r3, #4
 800d9da:	9301      	str	r3, [sp, #4]
 800d9dc:	9b02      	ldr	r3, [sp, #8]
 800d9de:	9103      	str	r1, [sp, #12]
 800d9e0:	428b      	cmp	r3, r1
 800d9e2:	d80c      	bhi.n	800d9fe <__multiply+0x9e>
 800d9e4:	2e00      	cmp	r6, #0
 800d9e6:	dd03      	ble.n	800d9f0 <__multiply+0x90>
 800d9e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d05b      	beq.n	800daa8 <__multiply+0x148>
 800d9f0:	6106      	str	r6, [r0, #16]
 800d9f2:	b005      	add	sp, #20
 800d9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f8:	f843 2b04 	str.w	r2, [r3], #4
 800d9fc:	e7d8      	b.n	800d9b0 <__multiply+0x50>
 800d9fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800da02:	f1ba 0f00 	cmp.w	sl, #0
 800da06:	d024      	beq.n	800da52 <__multiply+0xf2>
 800da08:	f104 0e14 	add.w	lr, r4, #20
 800da0c:	46a9      	mov	r9, r5
 800da0e:	f04f 0c00 	mov.w	ip, #0
 800da12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da16:	f8d9 3000 	ldr.w	r3, [r9]
 800da1a:	fa1f fb87 	uxth.w	fp, r7
 800da1e:	b29b      	uxth	r3, r3
 800da20:	fb0a 330b 	mla	r3, sl, fp, r3
 800da24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800da28:	f8d9 7000 	ldr.w	r7, [r9]
 800da2c:	4463      	add	r3, ip
 800da2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da32:	fb0a c70b 	mla	r7, sl, fp, ip
 800da36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da40:	4572      	cmp	r2, lr
 800da42:	f849 3b04 	str.w	r3, [r9], #4
 800da46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da4a:	d8e2      	bhi.n	800da12 <__multiply+0xb2>
 800da4c:	9b01      	ldr	r3, [sp, #4]
 800da4e:	f845 c003 	str.w	ip, [r5, r3]
 800da52:	9b03      	ldr	r3, [sp, #12]
 800da54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da58:	3104      	adds	r1, #4
 800da5a:	f1b9 0f00 	cmp.w	r9, #0
 800da5e:	d021      	beq.n	800daa4 <__multiply+0x144>
 800da60:	682b      	ldr	r3, [r5, #0]
 800da62:	f104 0c14 	add.w	ip, r4, #20
 800da66:	46ae      	mov	lr, r5
 800da68:	f04f 0a00 	mov.w	sl, #0
 800da6c:	f8bc b000 	ldrh.w	fp, [ip]
 800da70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800da74:	fb09 770b 	mla	r7, r9, fp, r7
 800da78:	4457      	add	r7, sl
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da80:	f84e 3b04 	str.w	r3, [lr], #4
 800da84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da8c:	f8be 3000 	ldrh.w	r3, [lr]
 800da90:	fb09 330a 	mla	r3, r9, sl, r3
 800da94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da98:	4562      	cmp	r2, ip
 800da9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da9e:	d8e5      	bhi.n	800da6c <__multiply+0x10c>
 800daa0:	9f01      	ldr	r7, [sp, #4]
 800daa2:	51eb      	str	r3, [r5, r7]
 800daa4:	3504      	adds	r5, #4
 800daa6:	e799      	b.n	800d9dc <__multiply+0x7c>
 800daa8:	3e01      	subs	r6, #1
 800daaa:	e79b      	b.n	800d9e4 <__multiply+0x84>
 800daac:	0800e7cc 	.word	0x0800e7cc
 800dab0:	0800e7dd 	.word	0x0800e7dd

0800dab4 <__pow5mult>:
 800dab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab8:	4615      	mov	r5, r2
 800daba:	f012 0203 	ands.w	r2, r2, #3
 800dabe:	4607      	mov	r7, r0
 800dac0:	460e      	mov	r6, r1
 800dac2:	d007      	beq.n	800dad4 <__pow5mult+0x20>
 800dac4:	4c25      	ldr	r4, [pc, #148]	@ (800db5c <__pow5mult+0xa8>)
 800dac6:	3a01      	subs	r2, #1
 800dac8:	2300      	movs	r3, #0
 800daca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dace:	f7ff fe9f 	bl	800d810 <__multadd>
 800dad2:	4606      	mov	r6, r0
 800dad4:	10ad      	asrs	r5, r5, #2
 800dad6:	d03d      	beq.n	800db54 <__pow5mult+0xa0>
 800dad8:	69fc      	ldr	r4, [r7, #28]
 800dada:	b97c      	cbnz	r4, 800dafc <__pow5mult+0x48>
 800dadc:	2010      	movs	r0, #16
 800dade:	f7ff fd7f 	bl	800d5e0 <malloc>
 800dae2:	4602      	mov	r2, r0
 800dae4:	61f8      	str	r0, [r7, #28]
 800dae6:	b928      	cbnz	r0, 800daf4 <__pow5mult+0x40>
 800dae8:	4b1d      	ldr	r3, [pc, #116]	@ (800db60 <__pow5mult+0xac>)
 800daea:	481e      	ldr	r0, [pc, #120]	@ (800db64 <__pow5mult+0xb0>)
 800daec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800daf0:	f000 fc40 	bl	800e374 <__assert_func>
 800daf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daf8:	6004      	str	r4, [r0, #0]
 800dafa:	60c4      	str	r4, [r0, #12]
 800dafc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800db00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db04:	b94c      	cbnz	r4, 800db1a <__pow5mult+0x66>
 800db06:	f240 2171 	movw	r1, #625	@ 0x271
 800db0a:	4638      	mov	r0, r7
 800db0c:	f7ff ff12 	bl	800d934 <__i2b>
 800db10:	2300      	movs	r3, #0
 800db12:	f8c8 0008 	str.w	r0, [r8, #8]
 800db16:	4604      	mov	r4, r0
 800db18:	6003      	str	r3, [r0, #0]
 800db1a:	f04f 0900 	mov.w	r9, #0
 800db1e:	07eb      	lsls	r3, r5, #31
 800db20:	d50a      	bpl.n	800db38 <__pow5mult+0x84>
 800db22:	4631      	mov	r1, r6
 800db24:	4622      	mov	r2, r4
 800db26:	4638      	mov	r0, r7
 800db28:	f7ff ff1a 	bl	800d960 <__multiply>
 800db2c:	4631      	mov	r1, r6
 800db2e:	4680      	mov	r8, r0
 800db30:	4638      	mov	r0, r7
 800db32:	f7ff fe4b 	bl	800d7cc <_Bfree>
 800db36:	4646      	mov	r6, r8
 800db38:	106d      	asrs	r5, r5, #1
 800db3a:	d00b      	beq.n	800db54 <__pow5mult+0xa0>
 800db3c:	6820      	ldr	r0, [r4, #0]
 800db3e:	b938      	cbnz	r0, 800db50 <__pow5mult+0x9c>
 800db40:	4622      	mov	r2, r4
 800db42:	4621      	mov	r1, r4
 800db44:	4638      	mov	r0, r7
 800db46:	f7ff ff0b 	bl	800d960 <__multiply>
 800db4a:	6020      	str	r0, [r4, #0]
 800db4c:	f8c0 9000 	str.w	r9, [r0]
 800db50:	4604      	mov	r4, r0
 800db52:	e7e4      	b.n	800db1e <__pow5mult+0x6a>
 800db54:	4630      	mov	r0, r6
 800db56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db5a:	bf00      	nop
 800db5c:	0800e838 	.word	0x0800e838
 800db60:	0800e75d 	.word	0x0800e75d
 800db64:	0800e7dd 	.word	0x0800e7dd

0800db68 <__lshift>:
 800db68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db6c:	460c      	mov	r4, r1
 800db6e:	6849      	ldr	r1, [r1, #4]
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db76:	68a3      	ldr	r3, [r4, #8]
 800db78:	4607      	mov	r7, r0
 800db7a:	4691      	mov	r9, r2
 800db7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db80:	f108 0601 	add.w	r6, r8, #1
 800db84:	42b3      	cmp	r3, r6
 800db86:	db0b      	blt.n	800dba0 <__lshift+0x38>
 800db88:	4638      	mov	r0, r7
 800db8a:	f7ff fddf 	bl	800d74c <_Balloc>
 800db8e:	4605      	mov	r5, r0
 800db90:	b948      	cbnz	r0, 800dba6 <__lshift+0x3e>
 800db92:	4602      	mov	r2, r0
 800db94:	4b28      	ldr	r3, [pc, #160]	@ (800dc38 <__lshift+0xd0>)
 800db96:	4829      	ldr	r0, [pc, #164]	@ (800dc3c <__lshift+0xd4>)
 800db98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db9c:	f000 fbea 	bl	800e374 <__assert_func>
 800dba0:	3101      	adds	r1, #1
 800dba2:	005b      	lsls	r3, r3, #1
 800dba4:	e7ee      	b.n	800db84 <__lshift+0x1c>
 800dba6:	2300      	movs	r3, #0
 800dba8:	f100 0114 	add.w	r1, r0, #20
 800dbac:	f100 0210 	add.w	r2, r0, #16
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	4553      	cmp	r3, sl
 800dbb4:	db33      	blt.n	800dc1e <__lshift+0xb6>
 800dbb6:	6920      	ldr	r0, [r4, #16]
 800dbb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbbc:	f104 0314 	add.w	r3, r4, #20
 800dbc0:	f019 091f 	ands.w	r9, r9, #31
 800dbc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dbcc:	d02b      	beq.n	800dc26 <__lshift+0xbe>
 800dbce:	f1c9 0e20 	rsb	lr, r9, #32
 800dbd2:	468a      	mov	sl, r1
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	fa00 f009 	lsl.w	r0, r0, r9
 800dbdc:	4310      	orrs	r0, r2
 800dbde:	f84a 0b04 	str.w	r0, [sl], #4
 800dbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe6:	459c      	cmp	ip, r3
 800dbe8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dbec:	d8f3      	bhi.n	800dbd6 <__lshift+0x6e>
 800dbee:	ebac 0304 	sub.w	r3, ip, r4
 800dbf2:	3b15      	subs	r3, #21
 800dbf4:	f023 0303 	bic.w	r3, r3, #3
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	f104 0015 	add.w	r0, r4, #21
 800dbfe:	4584      	cmp	ip, r0
 800dc00:	bf38      	it	cc
 800dc02:	2304      	movcc	r3, #4
 800dc04:	50ca      	str	r2, [r1, r3]
 800dc06:	b10a      	cbz	r2, 800dc0c <__lshift+0xa4>
 800dc08:	f108 0602 	add.w	r6, r8, #2
 800dc0c:	3e01      	subs	r6, #1
 800dc0e:	4638      	mov	r0, r7
 800dc10:	612e      	str	r6, [r5, #16]
 800dc12:	4621      	mov	r1, r4
 800dc14:	f7ff fdda 	bl	800d7cc <_Bfree>
 800dc18:	4628      	mov	r0, r5
 800dc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc22:	3301      	adds	r3, #1
 800dc24:	e7c5      	b.n	800dbb2 <__lshift+0x4a>
 800dc26:	3904      	subs	r1, #4
 800dc28:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc30:	459c      	cmp	ip, r3
 800dc32:	d8f9      	bhi.n	800dc28 <__lshift+0xc0>
 800dc34:	e7ea      	b.n	800dc0c <__lshift+0xa4>
 800dc36:	bf00      	nop
 800dc38:	0800e7cc 	.word	0x0800e7cc
 800dc3c:	0800e7dd 	.word	0x0800e7dd

0800dc40 <__mcmp>:
 800dc40:	690a      	ldr	r2, [r1, #16]
 800dc42:	4603      	mov	r3, r0
 800dc44:	6900      	ldr	r0, [r0, #16]
 800dc46:	1a80      	subs	r0, r0, r2
 800dc48:	b530      	push	{r4, r5, lr}
 800dc4a:	d10e      	bne.n	800dc6a <__mcmp+0x2a>
 800dc4c:	3314      	adds	r3, #20
 800dc4e:	3114      	adds	r1, #20
 800dc50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc60:	4295      	cmp	r5, r2
 800dc62:	d003      	beq.n	800dc6c <__mcmp+0x2c>
 800dc64:	d205      	bcs.n	800dc72 <__mcmp+0x32>
 800dc66:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6a:	bd30      	pop	{r4, r5, pc}
 800dc6c:	42a3      	cmp	r3, r4
 800dc6e:	d3f3      	bcc.n	800dc58 <__mcmp+0x18>
 800dc70:	e7fb      	b.n	800dc6a <__mcmp+0x2a>
 800dc72:	2001      	movs	r0, #1
 800dc74:	e7f9      	b.n	800dc6a <__mcmp+0x2a>
	...

0800dc78 <__mdiff>:
 800dc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	4689      	mov	r9, r1
 800dc7e:	4606      	mov	r6, r0
 800dc80:	4611      	mov	r1, r2
 800dc82:	4648      	mov	r0, r9
 800dc84:	4614      	mov	r4, r2
 800dc86:	f7ff ffdb 	bl	800dc40 <__mcmp>
 800dc8a:	1e05      	subs	r5, r0, #0
 800dc8c:	d112      	bne.n	800dcb4 <__mdiff+0x3c>
 800dc8e:	4629      	mov	r1, r5
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7ff fd5b 	bl	800d74c <_Balloc>
 800dc96:	4602      	mov	r2, r0
 800dc98:	b928      	cbnz	r0, 800dca6 <__mdiff+0x2e>
 800dc9a:	4b3f      	ldr	r3, [pc, #252]	@ (800dd98 <__mdiff+0x120>)
 800dc9c:	f240 2137 	movw	r1, #567	@ 0x237
 800dca0:	483e      	ldr	r0, [pc, #248]	@ (800dd9c <__mdiff+0x124>)
 800dca2:	f000 fb67 	bl	800e374 <__assert_func>
 800dca6:	2301      	movs	r3, #1
 800dca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcac:	4610      	mov	r0, r2
 800dcae:	b003      	add	sp, #12
 800dcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb4:	bfbc      	itt	lt
 800dcb6:	464b      	movlt	r3, r9
 800dcb8:	46a1      	movlt	r9, r4
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dcc0:	bfba      	itte	lt
 800dcc2:	461c      	movlt	r4, r3
 800dcc4:	2501      	movlt	r5, #1
 800dcc6:	2500      	movge	r5, #0
 800dcc8:	f7ff fd40 	bl	800d74c <_Balloc>
 800dccc:	4602      	mov	r2, r0
 800dcce:	b918      	cbnz	r0, 800dcd8 <__mdiff+0x60>
 800dcd0:	4b31      	ldr	r3, [pc, #196]	@ (800dd98 <__mdiff+0x120>)
 800dcd2:	f240 2145 	movw	r1, #581	@ 0x245
 800dcd6:	e7e3      	b.n	800dca0 <__mdiff+0x28>
 800dcd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dcdc:	6926      	ldr	r6, [r4, #16]
 800dcde:	60c5      	str	r5, [r0, #12]
 800dce0:	f109 0310 	add.w	r3, r9, #16
 800dce4:	f109 0514 	add.w	r5, r9, #20
 800dce8:	f104 0e14 	add.w	lr, r4, #20
 800dcec:	f100 0b14 	add.w	fp, r0, #20
 800dcf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dcf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dcf8:	9301      	str	r3, [sp, #4]
 800dcfa:	46d9      	mov	r9, fp
 800dcfc:	f04f 0c00 	mov.w	ip, #0
 800dd00:	9b01      	ldr	r3, [sp, #4]
 800dd02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dd06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dd0a:	9301      	str	r3, [sp, #4]
 800dd0c:	fa1f f38a 	uxth.w	r3, sl
 800dd10:	4619      	mov	r1, r3
 800dd12:	b283      	uxth	r3, r0
 800dd14:	1acb      	subs	r3, r1, r3
 800dd16:	0c00      	lsrs	r0, r0, #16
 800dd18:	4463      	add	r3, ip
 800dd1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dd1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dd28:	4576      	cmp	r6, lr
 800dd2a:	f849 3b04 	str.w	r3, [r9], #4
 800dd2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd32:	d8e5      	bhi.n	800dd00 <__mdiff+0x88>
 800dd34:	1b33      	subs	r3, r6, r4
 800dd36:	3b15      	subs	r3, #21
 800dd38:	f023 0303 	bic.w	r3, r3, #3
 800dd3c:	3415      	adds	r4, #21
 800dd3e:	3304      	adds	r3, #4
 800dd40:	42a6      	cmp	r6, r4
 800dd42:	bf38      	it	cc
 800dd44:	2304      	movcc	r3, #4
 800dd46:	441d      	add	r5, r3
 800dd48:	445b      	add	r3, fp
 800dd4a:	461e      	mov	r6, r3
 800dd4c:	462c      	mov	r4, r5
 800dd4e:	4544      	cmp	r4, r8
 800dd50:	d30e      	bcc.n	800dd70 <__mdiff+0xf8>
 800dd52:	f108 0103 	add.w	r1, r8, #3
 800dd56:	1b49      	subs	r1, r1, r5
 800dd58:	f021 0103 	bic.w	r1, r1, #3
 800dd5c:	3d03      	subs	r5, #3
 800dd5e:	45a8      	cmp	r8, r5
 800dd60:	bf38      	it	cc
 800dd62:	2100      	movcc	r1, #0
 800dd64:	440b      	add	r3, r1
 800dd66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd6a:	b191      	cbz	r1, 800dd92 <__mdiff+0x11a>
 800dd6c:	6117      	str	r7, [r2, #16]
 800dd6e:	e79d      	b.n	800dcac <__mdiff+0x34>
 800dd70:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd74:	46e6      	mov	lr, ip
 800dd76:	0c08      	lsrs	r0, r1, #16
 800dd78:	fa1c fc81 	uxtah	ip, ip, r1
 800dd7c:	4471      	add	r1, lr
 800dd7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd82:	b289      	uxth	r1, r1
 800dd84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd88:	f846 1b04 	str.w	r1, [r6], #4
 800dd8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd90:	e7dd      	b.n	800dd4e <__mdiff+0xd6>
 800dd92:	3f01      	subs	r7, #1
 800dd94:	e7e7      	b.n	800dd66 <__mdiff+0xee>
 800dd96:	bf00      	nop
 800dd98:	0800e7cc 	.word	0x0800e7cc
 800dd9c:	0800e7dd 	.word	0x0800e7dd

0800dda0 <__d2b>:
 800dda0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dda4:	460f      	mov	r7, r1
 800dda6:	2101      	movs	r1, #1
 800dda8:	ec59 8b10 	vmov	r8, r9, d0
 800ddac:	4616      	mov	r6, r2
 800ddae:	f7ff fccd 	bl	800d74c <_Balloc>
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	b930      	cbnz	r0, 800ddc4 <__d2b+0x24>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	4b23      	ldr	r3, [pc, #140]	@ (800de48 <__d2b+0xa8>)
 800ddba:	4824      	ldr	r0, [pc, #144]	@ (800de4c <__d2b+0xac>)
 800ddbc:	f240 310f 	movw	r1, #783	@ 0x30f
 800ddc0:	f000 fad8 	bl	800e374 <__assert_func>
 800ddc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ddc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ddcc:	b10d      	cbz	r5, 800ddd2 <__d2b+0x32>
 800ddce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ddd2:	9301      	str	r3, [sp, #4]
 800ddd4:	f1b8 0300 	subs.w	r3, r8, #0
 800ddd8:	d023      	beq.n	800de22 <__d2b+0x82>
 800ddda:	4668      	mov	r0, sp
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	f7ff fd7c 	bl	800d8da <__lo0bits>
 800dde2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dde6:	b1d0      	cbz	r0, 800de1e <__d2b+0x7e>
 800dde8:	f1c0 0320 	rsb	r3, r0, #32
 800ddec:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf0:	430b      	orrs	r3, r1
 800ddf2:	40c2      	lsrs	r2, r0
 800ddf4:	6163      	str	r3, [r4, #20]
 800ddf6:	9201      	str	r2, [sp, #4]
 800ddf8:	9b01      	ldr	r3, [sp, #4]
 800ddfa:	61a3      	str	r3, [r4, #24]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	bf0c      	ite	eq
 800de00:	2201      	moveq	r2, #1
 800de02:	2202      	movne	r2, #2
 800de04:	6122      	str	r2, [r4, #16]
 800de06:	b1a5      	cbz	r5, 800de32 <__d2b+0x92>
 800de08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800de0c:	4405      	add	r5, r0
 800de0e:	603d      	str	r5, [r7, #0]
 800de10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800de14:	6030      	str	r0, [r6, #0]
 800de16:	4620      	mov	r0, r4
 800de18:	b003      	add	sp, #12
 800de1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de1e:	6161      	str	r1, [r4, #20]
 800de20:	e7ea      	b.n	800ddf8 <__d2b+0x58>
 800de22:	a801      	add	r0, sp, #4
 800de24:	f7ff fd59 	bl	800d8da <__lo0bits>
 800de28:	9b01      	ldr	r3, [sp, #4]
 800de2a:	6163      	str	r3, [r4, #20]
 800de2c:	3020      	adds	r0, #32
 800de2e:	2201      	movs	r2, #1
 800de30:	e7e8      	b.n	800de04 <__d2b+0x64>
 800de32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800de3a:	6038      	str	r0, [r7, #0]
 800de3c:	6918      	ldr	r0, [r3, #16]
 800de3e:	f7ff fd2d 	bl	800d89c <__hi0bits>
 800de42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de46:	e7e5      	b.n	800de14 <__d2b+0x74>
 800de48:	0800e7cc 	.word	0x0800e7cc
 800de4c:	0800e7dd 	.word	0x0800e7dd

0800de50 <__sfputc_r>:
 800de50:	6893      	ldr	r3, [r2, #8]
 800de52:	3b01      	subs	r3, #1
 800de54:	2b00      	cmp	r3, #0
 800de56:	b410      	push	{r4}
 800de58:	6093      	str	r3, [r2, #8]
 800de5a:	da08      	bge.n	800de6e <__sfputc_r+0x1e>
 800de5c:	6994      	ldr	r4, [r2, #24]
 800de5e:	42a3      	cmp	r3, r4
 800de60:	db01      	blt.n	800de66 <__sfputc_r+0x16>
 800de62:	290a      	cmp	r1, #10
 800de64:	d103      	bne.n	800de6e <__sfputc_r+0x1e>
 800de66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de6a:	f000 b9df 	b.w	800e22c <__swbuf_r>
 800de6e:	6813      	ldr	r3, [r2, #0]
 800de70:	1c58      	adds	r0, r3, #1
 800de72:	6010      	str	r0, [r2, #0]
 800de74:	7019      	strb	r1, [r3, #0]
 800de76:	4608      	mov	r0, r1
 800de78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <__sfputs_r>:
 800de7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de80:	4606      	mov	r6, r0
 800de82:	460f      	mov	r7, r1
 800de84:	4614      	mov	r4, r2
 800de86:	18d5      	adds	r5, r2, r3
 800de88:	42ac      	cmp	r4, r5
 800de8a:	d101      	bne.n	800de90 <__sfputs_r+0x12>
 800de8c:	2000      	movs	r0, #0
 800de8e:	e007      	b.n	800dea0 <__sfputs_r+0x22>
 800de90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de94:	463a      	mov	r2, r7
 800de96:	4630      	mov	r0, r6
 800de98:	f7ff ffda 	bl	800de50 <__sfputc_r>
 800de9c:	1c43      	adds	r3, r0, #1
 800de9e:	d1f3      	bne.n	800de88 <__sfputs_r+0xa>
 800dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dea4 <_vfiprintf_r>:
 800dea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea8:	460d      	mov	r5, r1
 800deaa:	b09d      	sub	sp, #116	@ 0x74
 800deac:	4614      	mov	r4, r2
 800deae:	4698      	mov	r8, r3
 800deb0:	4606      	mov	r6, r0
 800deb2:	b118      	cbz	r0, 800debc <_vfiprintf_r+0x18>
 800deb4:	6a03      	ldr	r3, [r0, #32]
 800deb6:	b90b      	cbnz	r3, 800debc <_vfiprintf_r+0x18>
 800deb8:	f7fe fbfa 	bl	800c6b0 <__sinit>
 800debc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800debe:	07d9      	lsls	r1, r3, #31
 800dec0:	d405      	bmi.n	800dece <_vfiprintf_r+0x2a>
 800dec2:	89ab      	ldrh	r3, [r5, #12]
 800dec4:	059a      	lsls	r2, r3, #22
 800dec6:	d402      	bmi.n	800dece <_vfiprintf_r+0x2a>
 800dec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deca:	f7fe fd50 	bl	800c96e <__retarget_lock_acquire_recursive>
 800dece:	89ab      	ldrh	r3, [r5, #12]
 800ded0:	071b      	lsls	r3, r3, #28
 800ded2:	d501      	bpl.n	800ded8 <_vfiprintf_r+0x34>
 800ded4:	692b      	ldr	r3, [r5, #16]
 800ded6:	b99b      	cbnz	r3, 800df00 <_vfiprintf_r+0x5c>
 800ded8:	4629      	mov	r1, r5
 800deda:	4630      	mov	r0, r6
 800dedc:	f000 f9e4 	bl	800e2a8 <__swsetup_r>
 800dee0:	b170      	cbz	r0, 800df00 <_vfiprintf_r+0x5c>
 800dee2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dee4:	07dc      	lsls	r4, r3, #31
 800dee6:	d504      	bpl.n	800def2 <_vfiprintf_r+0x4e>
 800dee8:	f04f 30ff 	mov.w	r0, #4294967295
 800deec:	b01d      	add	sp, #116	@ 0x74
 800deee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def2:	89ab      	ldrh	r3, [r5, #12]
 800def4:	0598      	lsls	r0, r3, #22
 800def6:	d4f7      	bmi.n	800dee8 <_vfiprintf_r+0x44>
 800def8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800defa:	f7fe fd39 	bl	800c970 <__retarget_lock_release_recursive>
 800defe:	e7f3      	b.n	800dee8 <_vfiprintf_r+0x44>
 800df00:	2300      	movs	r3, #0
 800df02:	9309      	str	r3, [sp, #36]	@ 0x24
 800df04:	2320      	movs	r3, #32
 800df06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800df0e:	2330      	movs	r3, #48	@ 0x30
 800df10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e0c0 <_vfiprintf_r+0x21c>
 800df14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df18:	f04f 0901 	mov.w	r9, #1
 800df1c:	4623      	mov	r3, r4
 800df1e:	469a      	mov	sl, r3
 800df20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df24:	b10a      	cbz	r2, 800df2a <_vfiprintf_r+0x86>
 800df26:	2a25      	cmp	r2, #37	@ 0x25
 800df28:	d1f9      	bne.n	800df1e <_vfiprintf_r+0x7a>
 800df2a:	ebba 0b04 	subs.w	fp, sl, r4
 800df2e:	d00b      	beq.n	800df48 <_vfiprintf_r+0xa4>
 800df30:	465b      	mov	r3, fp
 800df32:	4622      	mov	r2, r4
 800df34:	4629      	mov	r1, r5
 800df36:	4630      	mov	r0, r6
 800df38:	f7ff ffa1 	bl	800de7e <__sfputs_r>
 800df3c:	3001      	adds	r0, #1
 800df3e:	f000 80a7 	beq.w	800e090 <_vfiprintf_r+0x1ec>
 800df42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df44:	445a      	add	r2, fp
 800df46:	9209      	str	r2, [sp, #36]	@ 0x24
 800df48:	f89a 3000 	ldrb.w	r3, [sl]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f000 809f 	beq.w	800e090 <_vfiprintf_r+0x1ec>
 800df52:	2300      	movs	r3, #0
 800df54:	f04f 32ff 	mov.w	r2, #4294967295
 800df58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df5c:	f10a 0a01 	add.w	sl, sl, #1
 800df60:	9304      	str	r3, [sp, #16]
 800df62:	9307      	str	r3, [sp, #28]
 800df64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df68:	931a      	str	r3, [sp, #104]	@ 0x68
 800df6a:	4654      	mov	r4, sl
 800df6c:	2205      	movs	r2, #5
 800df6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df72:	4853      	ldr	r0, [pc, #332]	@ (800e0c0 <_vfiprintf_r+0x21c>)
 800df74:	f7f2 f9bc 	bl	80002f0 <memchr>
 800df78:	9a04      	ldr	r2, [sp, #16]
 800df7a:	b9d8      	cbnz	r0, 800dfb4 <_vfiprintf_r+0x110>
 800df7c:	06d1      	lsls	r1, r2, #27
 800df7e:	bf44      	itt	mi
 800df80:	2320      	movmi	r3, #32
 800df82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df86:	0713      	lsls	r3, r2, #28
 800df88:	bf44      	itt	mi
 800df8a:	232b      	movmi	r3, #43	@ 0x2b
 800df8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df90:	f89a 3000 	ldrb.w	r3, [sl]
 800df94:	2b2a      	cmp	r3, #42	@ 0x2a
 800df96:	d015      	beq.n	800dfc4 <_vfiprintf_r+0x120>
 800df98:	9a07      	ldr	r2, [sp, #28]
 800df9a:	4654      	mov	r4, sl
 800df9c:	2000      	movs	r0, #0
 800df9e:	f04f 0c0a 	mov.w	ip, #10
 800dfa2:	4621      	mov	r1, r4
 800dfa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfa8:	3b30      	subs	r3, #48	@ 0x30
 800dfaa:	2b09      	cmp	r3, #9
 800dfac:	d94b      	bls.n	800e046 <_vfiprintf_r+0x1a2>
 800dfae:	b1b0      	cbz	r0, 800dfde <_vfiprintf_r+0x13a>
 800dfb0:	9207      	str	r2, [sp, #28]
 800dfb2:	e014      	b.n	800dfde <_vfiprintf_r+0x13a>
 800dfb4:	eba0 0308 	sub.w	r3, r0, r8
 800dfb8:	fa09 f303 	lsl.w	r3, r9, r3
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	9304      	str	r3, [sp, #16]
 800dfc0:	46a2      	mov	sl, r4
 800dfc2:	e7d2      	b.n	800df6a <_vfiprintf_r+0xc6>
 800dfc4:	9b03      	ldr	r3, [sp, #12]
 800dfc6:	1d19      	adds	r1, r3, #4
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	9103      	str	r1, [sp, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	bfbb      	ittet	lt
 800dfd0:	425b      	neglt	r3, r3
 800dfd2:	f042 0202 	orrlt.w	r2, r2, #2
 800dfd6:	9307      	strge	r3, [sp, #28]
 800dfd8:	9307      	strlt	r3, [sp, #28]
 800dfda:	bfb8      	it	lt
 800dfdc:	9204      	strlt	r2, [sp, #16]
 800dfde:	7823      	ldrb	r3, [r4, #0]
 800dfe0:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfe2:	d10a      	bne.n	800dffa <_vfiprintf_r+0x156>
 800dfe4:	7863      	ldrb	r3, [r4, #1]
 800dfe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfe8:	d132      	bne.n	800e050 <_vfiprintf_r+0x1ac>
 800dfea:	9b03      	ldr	r3, [sp, #12]
 800dfec:	1d1a      	adds	r2, r3, #4
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	9203      	str	r2, [sp, #12]
 800dff2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dff6:	3402      	adds	r4, #2
 800dff8:	9305      	str	r3, [sp, #20]
 800dffa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e0d0 <_vfiprintf_r+0x22c>
 800dffe:	7821      	ldrb	r1, [r4, #0]
 800e000:	2203      	movs	r2, #3
 800e002:	4650      	mov	r0, sl
 800e004:	f7f2 f974 	bl	80002f0 <memchr>
 800e008:	b138      	cbz	r0, 800e01a <_vfiprintf_r+0x176>
 800e00a:	9b04      	ldr	r3, [sp, #16]
 800e00c:	eba0 000a 	sub.w	r0, r0, sl
 800e010:	2240      	movs	r2, #64	@ 0x40
 800e012:	4082      	lsls	r2, r0
 800e014:	4313      	orrs	r3, r2
 800e016:	3401      	adds	r4, #1
 800e018:	9304      	str	r3, [sp, #16]
 800e01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e01e:	4829      	ldr	r0, [pc, #164]	@ (800e0c4 <_vfiprintf_r+0x220>)
 800e020:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e024:	2206      	movs	r2, #6
 800e026:	f7f2 f963 	bl	80002f0 <memchr>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d03f      	beq.n	800e0ae <_vfiprintf_r+0x20a>
 800e02e:	4b26      	ldr	r3, [pc, #152]	@ (800e0c8 <_vfiprintf_r+0x224>)
 800e030:	bb1b      	cbnz	r3, 800e07a <_vfiprintf_r+0x1d6>
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	3307      	adds	r3, #7
 800e036:	f023 0307 	bic.w	r3, r3, #7
 800e03a:	3308      	adds	r3, #8
 800e03c:	9303      	str	r3, [sp, #12]
 800e03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e040:	443b      	add	r3, r7
 800e042:	9309      	str	r3, [sp, #36]	@ 0x24
 800e044:	e76a      	b.n	800df1c <_vfiprintf_r+0x78>
 800e046:	fb0c 3202 	mla	r2, ip, r2, r3
 800e04a:	460c      	mov	r4, r1
 800e04c:	2001      	movs	r0, #1
 800e04e:	e7a8      	b.n	800dfa2 <_vfiprintf_r+0xfe>
 800e050:	2300      	movs	r3, #0
 800e052:	3401      	adds	r4, #1
 800e054:	9305      	str	r3, [sp, #20]
 800e056:	4619      	mov	r1, r3
 800e058:	f04f 0c0a 	mov.w	ip, #10
 800e05c:	4620      	mov	r0, r4
 800e05e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e062:	3a30      	subs	r2, #48	@ 0x30
 800e064:	2a09      	cmp	r2, #9
 800e066:	d903      	bls.n	800e070 <_vfiprintf_r+0x1cc>
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d0c6      	beq.n	800dffa <_vfiprintf_r+0x156>
 800e06c:	9105      	str	r1, [sp, #20]
 800e06e:	e7c4      	b.n	800dffa <_vfiprintf_r+0x156>
 800e070:	fb0c 2101 	mla	r1, ip, r1, r2
 800e074:	4604      	mov	r4, r0
 800e076:	2301      	movs	r3, #1
 800e078:	e7f0      	b.n	800e05c <_vfiprintf_r+0x1b8>
 800e07a:	ab03      	add	r3, sp, #12
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	462a      	mov	r2, r5
 800e080:	4b12      	ldr	r3, [pc, #72]	@ (800e0cc <_vfiprintf_r+0x228>)
 800e082:	a904      	add	r1, sp, #16
 800e084:	4630      	mov	r0, r6
 800e086:	f7fd fedf 	bl	800be48 <_printf_float>
 800e08a:	4607      	mov	r7, r0
 800e08c:	1c78      	adds	r0, r7, #1
 800e08e:	d1d6      	bne.n	800e03e <_vfiprintf_r+0x19a>
 800e090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e092:	07d9      	lsls	r1, r3, #31
 800e094:	d405      	bmi.n	800e0a2 <_vfiprintf_r+0x1fe>
 800e096:	89ab      	ldrh	r3, [r5, #12]
 800e098:	059a      	lsls	r2, r3, #22
 800e09a:	d402      	bmi.n	800e0a2 <_vfiprintf_r+0x1fe>
 800e09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e09e:	f7fe fc67 	bl	800c970 <__retarget_lock_release_recursive>
 800e0a2:	89ab      	ldrh	r3, [r5, #12]
 800e0a4:	065b      	lsls	r3, r3, #25
 800e0a6:	f53f af1f 	bmi.w	800dee8 <_vfiprintf_r+0x44>
 800e0aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0ac:	e71e      	b.n	800deec <_vfiprintf_r+0x48>
 800e0ae:	ab03      	add	r3, sp, #12
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	462a      	mov	r2, r5
 800e0b4:	4b05      	ldr	r3, [pc, #20]	@ (800e0cc <_vfiprintf_r+0x228>)
 800e0b6:	a904      	add	r1, sp, #16
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	f7fe f94d 	bl	800c358 <_printf_i>
 800e0be:	e7e4      	b.n	800e08a <_vfiprintf_r+0x1e6>
 800e0c0:	0800e938 	.word	0x0800e938
 800e0c4:	0800e942 	.word	0x0800e942
 800e0c8:	0800be49 	.word	0x0800be49
 800e0cc:	0800de7f 	.word	0x0800de7f
 800e0d0:	0800e93e 	.word	0x0800e93e

0800e0d4 <__sflush_r>:
 800e0d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0dc:	0716      	lsls	r6, r2, #28
 800e0de:	4605      	mov	r5, r0
 800e0e0:	460c      	mov	r4, r1
 800e0e2:	d454      	bmi.n	800e18e <__sflush_r+0xba>
 800e0e4:	684b      	ldr	r3, [r1, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	dc02      	bgt.n	800e0f0 <__sflush_r+0x1c>
 800e0ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	dd48      	ble.n	800e182 <__sflush_r+0xae>
 800e0f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0f2:	2e00      	cmp	r6, #0
 800e0f4:	d045      	beq.n	800e182 <__sflush_r+0xae>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0fc:	682f      	ldr	r7, [r5, #0]
 800e0fe:	6a21      	ldr	r1, [r4, #32]
 800e100:	602b      	str	r3, [r5, #0]
 800e102:	d030      	beq.n	800e166 <__sflush_r+0x92>
 800e104:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e106:	89a3      	ldrh	r3, [r4, #12]
 800e108:	0759      	lsls	r1, r3, #29
 800e10a:	d505      	bpl.n	800e118 <__sflush_r+0x44>
 800e10c:	6863      	ldr	r3, [r4, #4]
 800e10e:	1ad2      	subs	r2, r2, r3
 800e110:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e112:	b10b      	cbz	r3, 800e118 <__sflush_r+0x44>
 800e114:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e116:	1ad2      	subs	r2, r2, r3
 800e118:	2300      	movs	r3, #0
 800e11a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e11c:	6a21      	ldr	r1, [r4, #32]
 800e11e:	4628      	mov	r0, r5
 800e120:	47b0      	blx	r6
 800e122:	1c43      	adds	r3, r0, #1
 800e124:	89a3      	ldrh	r3, [r4, #12]
 800e126:	d106      	bne.n	800e136 <__sflush_r+0x62>
 800e128:	6829      	ldr	r1, [r5, #0]
 800e12a:	291d      	cmp	r1, #29
 800e12c:	d82b      	bhi.n	800e186 <__sflush_r+0xb2>
 800e12e:	4a2a      	ldr	r2, [pc, #168]	@ (800e1d8 <__sflush_r+0x104>)
 800e130:	410a      	asrs	r2, r1
 800e132:	07d6      	lsls	r6, r2, #31
 800e134:	d427      	bmi.n	800e186 <__sflush_r+0xb2>
 800e136:	2200      	movs	r2, #0
 800e138:	6062      	str	r2, [r4, #4]
 800e13a:	04d9      	lsls	r1, r3, #19
 800e13c:	6922      	ldr	r2, [r4, #16]
 800e13e:	6022      	str	r2, [r4, #0]
 800e140:	d504      	bpl.n	800e14c <__sflush_r+0x78>
 800e142:	1c42      	adds	r2, r0, #1
 800e144:	d101      	bne.n	800e14a <__sflush_r+0x76>
 800e146:	682b      	ldr	r3, [r5, #0]
 800e148:	b903      	cbnz	r3, 800e14c <__sflush_r+0x78>
 800e14a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e14c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e14e:	602f      	str	r7, [r5, #0]
 800e150:	b1b9      	cbz	r1, 800e182 <__sflush_r+0xae>
 800e152:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e156:	4299      	cmp	r1, r3
 800e158:	d002      	beq.n	800e160 <__sflush_r+0x8c>
 800e15a:	4628      	mov	r0, r5
 800e15c:	f7ff f9f6 	bl	800d54c <_free_r>
 800e160:	2300      	movs	r3, #0
 800e162:	6363      	str	r3, [r4, #52]	@ 0x34
 800e164:	e00d      	b.n	800e182 <__sflush_r+0xae>
 800e166:	2301      	movs	r3, #1
 800e168:	4628      	mov	r0, r5
 800e16a:	47b0      	blx	r6
 800e16c:	4602      	mov	r2, r0
 800e16e:	1c50      	adds	r0, r2, #1
 800e170:	d1c9      	bne.n	800e106 <__sflush_r+0x32>
 800e172:	682b      	ldr	r3, [r5, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d0c6      	beq.n	800e106 <__sflush_r+0x32>
 800e178:	2b1d      	cmp	r3, #29
 800e17a:	d001      	beq.n	800e180 <__sflush_r+0xac>
 800e17c:	2b16      	cmp	r3, #22
 800e17e:	d11e      	bne.n	800e1be <__sflush_r+0xea>
 800e180:	602f      	str	r7, [r5, #0]
 800e182:	2000      	movs	r0, #0
 800e184:	e022      	b.n	800e1cc <__sflush_r+0xf8>
 800e186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e18a:	b21b      	sxth	r3, r3
 800e18c:	e01b      	b.n	800e1c6 <__sflush_r+0xf2>
 800e18e:	690f      	ldr	r7, [r1, #16]
 800e190:	2f00      	cmp	r7, #0
 800e192:	d0f6      	beq.n	800e182 <__sflush_r+0xae>
 800e194:	0793      	lsls	r3, r2, #30
 800e196:	680e      	ldr	r6, [r1, #0]
 800e198:	bf08      	it	eq
 800e19a:	694b      	ldreq	r3, [r1, #20]
 800e19c:	600f      	str	r7, [r1, #0]
 800e19e:	bf18      	it	ne
 800e1a0:	2300      	movne	r3, #0
 800e1a2:	eba6 0807 	sub.w	r8, r6, r7
 800e1a6:	608b      	str	r3, [r1, #8]
 800e1a8:	f1b8 0f00 	cmp.w	r8, #0
 800e1ac:	dde9      	ble.n	800e182 <__sflush_r+0xae>
 800e1ae:	6a21      	ldr	r1, [r4, #32]
 800e1b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e1b2:	4643      	mov	r3, r8
 800e1b4:	463a      	mov	r2, r7
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	47b0      	blx	r6
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	dc08      	bgt.n	800e1d0 <__sflush_r+0xfc>
 800e1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1c6:	81a3      	strh	r3, [r4, #12]
 800e1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d0:	4407      	add	r7, r0
 800e1d2:	eba8 0800 	sub.w	r8, r8, r0
 800e1d6:	e7e7      	b.n	800e1a8 <__sflush_r+0xd4>
 800e1d8:	dfbffffe 	.word	0xdfbffffe

0800e1dc <_fflush_r>:
 800e1dc:	b538      	push	{r3, r4, r5, lr}
 800e1de:	690b      	ldr	r3, [r1, #16]
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	b913      	cbnz	r3, 800e1ec <_fflush_r+0x10>
 800e1e6:	2500      	movs	r5, #0
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	b118      	cbz	r0, 800e1f6 <_fflush_r+0x1a>
 800e1ee:	6a03      	ldr	r3, [r0, #32]
 800e1f0:	b90b      	cbnz	r3, 800e1f6 <_fflush_r+0x1a>
 800e1f2:	f7fe fa5d 	bl	800c6b0 <__sinit>
 800e1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d0f3      	beq.n	800e1e6 <_fflush_r+0xa>
 800e1fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e200:	07d0      	lsls	r0, r2, #31
 800e202:	d404      	bmi.n	800e20e <_fflush_r+0x32>
 800e204:	0599      	lsls	r1, r3, #22
 800e206:	d402      	bmi.n	800e20e <_fflush_r+0x32>
 800e208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e20a:	f7fe fbb0 	bl	800c96e <__retarget_lock_acquire_recursive>
 800e20e:	4628      	mov	r0, r5
 800e210:	4621      	mov	r1, r4
 800e212:	f7ff ff5f 	bl	800e0d4 <__sflush_r>
 800e216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e218:	07da      	lsls	r2, r3, #31
 800e21a:	4605      	mov	r5, r0
 800e21c:	d4e4      	bmi.n	800e1e8 <_fflush_r+0xc>
 800e21e:	89a3      	ldrh	r3, [r4, #12]
 800e220:	059b      	lsls	r3, r3, #22
 800e222:	d4e1      	bmi.n	800e1e8 <_fflush_r+0xc>
 800e224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e226:	f7fe fba3 	bl	800c970 <__retarget_lock_release_recursive>
 800e22a:	e7dd      	b.n	800e1e8 <_fflush_r+0xc>

0800e22c <__swbuf_r>:
 800e22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e22e:	460e      	mov	r6, r1
 800e230:	4614      	mov	r4, r2
 800e232:	4605      	mov	r5, r0
 800e234:	b118      	cbz	r0, 800e23e <__swbuf_r+0x12>
 800e236:	6a03      	ldr	r3, [r0, #32]
 800e238:	b90b      	cbnz	r3, 800e23e <__swbuf_r+0x12>
 800e23a:	f7fe fa39 	bl	800c6b0 <__sinit>
 800e23e:	69a3      	ldr	r3, [r4, #24]
 800e240:	60a3      	str	r3, [r4, #8]
 800e242:	89a3      	ldrh	r3, [r4, #12]
 800e244:	071a      	lsls	r2, r3, #28
 800e246:	d501      	bpl.n	800e24c <__swbuf_r+0x20>
 800e248:	6923      	ldr	r3, [r4, #16]
 800e24a:	b943      	cbnz	r3, 800e25e <__swbuf_r+0x32>
 800e24c:	4621      	mov	r1, r4
 800e24e:	4628      	mov	r0, r5
 800e250:	f000 f82a 	bl	800e2a8 <__swsetup_r>
 800e254:	b118      	cbz	r0, 800e25e <__swbuf_r+0x32>
 800e256:	f04f 37ff 	mov.w	r7, #4294967295
 800e25a:	4638      	mov	r0, r7
 800e25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e25e:	6823      	ldr	r3, [r4, #0]
 800e260:	6922      	ldr	r2, [r4, #16]
 800e262:	1a98      	subs	r0, r3, r2
 800e264:	6963      	ldr	r3, [r4, #20]
 800e266:	b2f6      	uxtb	r6, r6
 800e268:	4283      	cmp	r3, r0
 800e26a:	4637      	mov	r7, r6
 800e26c:	dc05      	bgt.n	800e27a <__swbuf_r+0x4e>
 800e26e:	4621      	mov	r1, r4
 800e270:	4628      	mov	r0, r5
 800e272:	f7ff ffb3 	bl	800e1dc <_fflush_r>
 800e276:	2800      	cmp	r0, #0
 800e278:	d1ed      	bne.n	800e256 <__swbuf_r+0x2a>
 800e27a:	68a3      	ldr	r3, [r4, #8]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	60a3      	str	r3, [r4, #8]
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	6022      	str	r2, [r4, #0]
 800e286:	701e      	strb	r6, [r3, #0]
 800e288:	6962      	ldr	r2, [r4, #20]
 800e28a:	1c43      	adds	r3, r0, #1
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d004      	beq.n	800e29a <__swbuf_r+0x6e>
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	07db      	lsls	r3, r3, #31
 800e294:	d5e1      	bpl.n	800e25a <__swbuf_r+0x2e>
 800e296:	2e0a      	cmp	r6, #10
 800e298:	d1df      	bne.n	800e25a <__swbuf_r+0x2e>
 800e29a:	4621      	mov	r1, r4
 800e29c:	4628      	mov	r0, r5
 800e29e:	f7ff ff9d 	bl	800e1dc <_fflush_r>
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	d0d9      	beq.n	800e25a <__swbuf_r+0x2e>
 800e2a6:	e7d6      	b.n	800e256 <__swbuf_r+0x2a>

0800e2a8 <__swsetup_r>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4b29      	ldr	r3, [pc, #164]	@ (800e350 <__swsetup_r+0xa8>)
 800e2ac:	4605      	mov	r5, r0
 800e2ae:	6818      	ldr	r0, [r3, #0]
 800e2b0:	460c      	mov	r4, r1
 800e2b2:	b118      	cbz	r0, 800e2bc <__swsetup_r+0x14>
 800e2b4:	6a03      	ldr	r3, [r0, #32]
 800e2b6:	b90b      	cbnz	r3, 800e2bc <__swsetup_r+0x14>
 800e2b8:	f7fe f9fa 	bl	800c6b0 <__sinit>
 800e2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c0:	0719      	lsls	r1, r3, #28
 800e2c2:	d422      	bmi.n	800e30a <__swsetup_r+0x62>
 800e2c4:	06da      	lsls	r2, r3, #27
 800e2c6:	d407      	bmi.n	800e2d8 <__swsetup_r+0x30>
 800e2c8:	2209      	movs	r2, #9
 800e2ca:	602a      	str	r2, [r5, #0]
 800e2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2d0:	81a3      	strh	r3, [r4, #12]
 800e2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d6:	e033      	b.n	800e340 <__swsetup_r+0x98>
 800e2d8:	0758      	lsls	r0, r3, #29
 800e2da:	d512      	bpl.n	800e302 <__swsetup_r+0x5a>
 800e2dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2de:	b141      	cbz	r1, 800e2f2 <__swsetup_r+0x4a>
 800e2e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2e4:	4299      	cmp	r1, r3
 800e2e6:	d002      	beq.n	800e2ee <__swsetup_r+0x46>
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	f7ff f92f 	bl	800d54c <_free_r>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2f2:	89a3      	ldrh	r3, [r4, #12]
 800e2f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e2f8:	81a3      	strh	r3, [r4, #12]
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	6063      	str	r3, [r4, #4]
 800e2fe:	6923      	ldr	r3, [r4, #16]
 800e300:	6023      	str	r3, [r4, #0]
 800e302:	89a3      	ldrh	r3, [r4, #12]
 800e304:	f043 0308 	orr.w	r3, r3, #8
 800e308:	81a3      	strh	r3, [r4, #12]
 800e30a:	6923      	ldr	r3, [r4, #16]
 800e30c:	b94b      	cbnz	r3, 800e322 <__swsetup_r+0x7a>
 800e30e:	89a3      	ldrh	r3, [r4, #12]
 800e310:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e318:	d003      	beq.n	800e322 <__swsetup_r+0x7a>
 800e31a:	4621      	mov	r1, r4
 800e31c:	4628      	mov	r0, r5
 800e31e:	f000 f8b3 	bl	800e488 <__smakebuf_r>
 800e322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e326:	f013 0201 	ands.w	r2, r3, #1
 800e32a:	d00a      	beq.n	800e342 <__swsetup_r+0x9a>
 800e32c:	2200      	movs	r2, #0
 800e32e:	60a2      	str	r2, [r4, #8]
 800e330:	6962      	ldr	r2, [r4, #20]
 800e332:	4252      	negs	r2, r2
 800e334:	61a2      	str	r2, [r4, #24]
 800e336:	6922      	ldr	r2, [r4, #16]
 800e338:	b942      	cbnz	r2, 800e34c <__swsetup_r+0xa4>
 800e33a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e33e:	d1c5      	bne.n	800e2cc <__swsetup_r+0x24>
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	0799      	lsls	r1, r3, #30
 800e344:	bf58      	it	pl
 800e346:	6962      	ldrpl	r2, [r4, #20]
 800e348:	60a2      	str	r2, [r4, #8]
 800e34a:	e7f4      	b.n	800e336 <__swsetup_r+0x8e>
 800e34c:	2000      	movs	r0, #0
 800e34e:	e7f7      	b.n	800e340 <__swsetup_r+0x98>
 800e350:	24000020 	.word	0x24000020

0800e354 <_sbrk_r>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	4d06      	ldr	r5, [pc, #24]	@ (800e370 <_sbrk_r+0x1c>)
 800e358:	2300      	movs	r3, #0
 800e35a:	4604      	mov	r4, r0
 800e35c:	4608      	mov	r0, r1
 800e35e:	602b      	str	r3, [r5, #0]
 800e360:	f7f2 fed0 	bl	8001104 <_sbrk>
 800e364:	1c43      	adds	r3, r0, #1
 800e366:	d102      	bne.n	800e36e <_sbrk_r+0x1a>
 800e368:	682b      	ldr	r3, [r5, #0]
 800e36a:	b103      	cbz	r3, 800e36e <_sbrk_r+0x1a>
 800e36c:	6023      	str	r3, [r4, #0]
 800e36e:	bd38      	pop	{r3, r4, r5, pc}
 800e370:	24005e20 	.word	0x24005e20

0800e374 <__assert_func>:
 800e374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e376:	4614      	mov	r4, r2
 800e378:	461a      	mov	r2, r3
 800e37a:	4b09      	ldr	r3, [pc, #36]	@ (800e3a0 <__assert_func+0x2c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4605      	mov	r5, r0
 800e380:	68d8      	ldr	r0, [r3, #12]
 800e382:	b954      	cbnz	r4, 800e39a <__assert_func+0x26>
 800e384:	4b07      	ldr	r3, [pc, #28]	@ (800e3a4 <__assert_func+0x30>)
 800e386:	461c      	mov	r4, r3
 800e388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e38c:	9100      	str	r1, [sp, #0]
 800e38e:	462b      	mov	r3, r5
 800e390:	4905      	ldr	r1, [pc, #20]	@ (800e3a8 <__assert_func+0x34>)
 800e392:	f000 f841 	bl	800e418 <fiprintf>
 800e396:	f000 f8d5 	bl	800e544 <abort>
 800e39a:	4b04      	ldr	r3, [pc, #16]	@ (800e3ac <__assert_func+0x38>)
 800e39c:	e7f4      	b.n	800e388 <__assert_func+0x14>
 800e39e:	bf00      	nop
 800e3a0:	24000020 	.word	0x24000020
 800e3a4:	0800e98e 	.word	0x0800e98e
 800e3a8:	0800e960 	.word	0x0800e960
 800e3ac:	0800e953 	.word	0x0800e953

0800e3b0 <_calloc_r>:
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 800e3b2:	fba1 5402 	umull	r5, r4, r1, r2
 800e3b6:	b93c      	cbnz	r4, 800e3c8 <_calloc_r+0x18>
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	f7ff f93b 	bl	800d634 <_malloc_r>
 800e3be:	4606      	mov	r6, r0
 800e3c0:	b928      	cbnz	r0, 800e3ce <_calloc_r+0x1e>
 800e3c2:	2600      	movs	r6, #0
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	bd70      	pop	{r4, r5, r6, pc}
 800e3c8:	220c      	movs	r2, #12
 800e3ca:	6002      	str	r2, [r0, #0]
 800e3cc:	e7f9      	b.n	800e3c2 <_calloc_r+0x12>
 800e3ce:	462a      	mov	r2, r5
 800e3d0:	4621      	mov	r1, r4
 800e3d2:	f7fe f9f8 	bl	800c7c6 <memset>
 800e3d6:	e7f5      	b.n	800e3c4 <_calloc_r+0x14>

0800e3d8 <__ascii_mbtowc>:
 800e3d8:	b082      	sub	sp, #8
 800e3da:	b901      	cbnz	r1, 800e3de <__ascii_mbtowc+0x6>
 800e3dc:	a901      	add	r1, sp, #4
 800e3de:	b142      	cbz	r2, 800e3f2 <__ascii_mbtowc+0x1a>
 800e3e0:	b14b      	cbz	r3, 800e3f6 <__ascii_mbtowc+0x1e>
 800e3e2:	7813      	ldrb	r3, [r2, #0]
 800e3e4:	600b      	str	r3, [r1, #0]
 800e3e6:	7812      	ldrb	r2, [r2, #0]
 800e3e8:	1e10      	subs	r0, r2, #0
 800e3ea:	bf18      	it	ne
 800e3ec:	2001      	movne	r0, #1
 800e3ee:	b002      	add	sp, #8
 800e3f0:	4770      	bx	lr
 800e3f2:	4610      	mov	r0, r2
 800e3f4:	e7fb      	b.n	800e3ee <__ascii_mbtowc+0x16>
 800e3f6:	f06f 0001 	mvn.w	r0, #1
 800e3fa:	e7f8      	b.n	800e3ee <__ascii_mbtowc+0x16>

0800e3fc <__ascii_wctomb>:
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	4608      	mov	r0, r1
 800e400:	b141      	cbz	r1, 800e414 <__ascii_wctomb+0x18>
 800e402:	2aff      	cmp	r2, #255	@ 0xff
 800e404:	d904      	bls.n	800e410 <__ascii_wctomb+0x14>
 800e406:	228a      	movs	r2, #138	@ 0x8a
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	f04f 30ff 	mov.w	r0, #4294967295
 800e40e:	4770      	bx	lr
 800e410:	700a      	strb	r2, [r1, #0]
 800e412:	2001      	movs	r0, #1
 800e414:	4770      	bx	lr
	...

0800e418 <fiprintf>:
 800e418:	b40e      	push	{r1, r2, r3}
 800e41a:	b503      	push	{r0, r1, lr}
 800e41c:	4601      	mov	r1, r0
 800e41e:	ab03      	add	r3, sp, #12
 800e420:	4805      	ldr	r0, [pc, #20]	@ (800e438 <fiprintf+0x20>)
 800e422:	f853 2b04 	ldr.w	r2, [r3], #4
 800e426:	6800      	ldr	r0, [r0, #0]
 800e428:	9301      	str	r3, [sp, #4]
 800e42a:	f7ff fd3b 	bl	800dea4 <_vfiprintf_r>
 800e42e:	b002      	add	sp, #8
 800e430:	f85d eb04 	ldr.w	lr, [sp], #4
 800e434:	b003      	add	sp, #12
 800e436:	4770      	bx	lr
 800e438:	24000020 	.word	0x24000020

0800e43c <__swhatbuf_r>:
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	460c      	mov	r4, r1
 800e440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e444:	2900      	cmp	r1, #0
 800e446:	b096      	sub	sp, #88	@ 0x58
 800e448:	4615      	mov	r5, r2
 800e44a:	461e      	mov	r6, r3
 800e44c:	da0d      	bge.n	800e46a <__swhatbuf_r+0x2e>
 800e44e:	89a3      	ldrh	r3, [r4, #12]
 800e450:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e454:	f04f 0100 	mov.w	r1, #0
 800e458:	bf14      	ite	ne
 800e45a:	2340      	movne	r3, #64	@ 0x40
 800e45c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e460:	2000      	movs	r0, #0
 800e462:	6031      	str	r1, [r6, #0]
 800e464:	602b      	str	r3, [r5, #0]
 800e466:	b016      	add	sp, #88	@ 0x58
 800e468:	bd70      	pop	{r4, r5, r6, pc}
 800e46a:	466a      	mov	r2, sp
 800e46c:	f000 f848 	bl	800e500 <_fstat_r>
 800e470:	2800      	cmp	r0, #0
 800e472:	dbec      	blt.n	800e44e <__swhatbuf_r+0x12>
 800e474:	9901      	ldr	r1, [sp, #4]
 800e476:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e47a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e47e:	4259      	negs	r1, r3
 800e480:	4159      	adcs	r1, r3
 800e482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e486:	e7eb      	b.n	800e460 <__swhatbuf_r+0x24>

0800e488 <__smakebuf_r>:
 800e488:	898b      	ldrh	r3, [r1, #12]
 800e48a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e48c:	079d      	lsls	r5, r3, #30
 800e48e:	4606      	mov	r6, r0
 800e490:	460c      	mov	r4, r1
 800e492:	d507      	bpl.n	800e4a4 <__smakebuf_r+0x1c>
 800e494:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	6123      	str	r3, [r4, #16]
 800e49c:	2301      	movs	r3, #1
 800e49e:	6163      	str	r3, [r4, #20]
 800e4a0:	b003      	add	sp, #12
 800e4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4a4:	ab01      	add	r3, sp, #4
 800e4a6:	466a      	mov	r2, sp
 800e4a8:	f7ff ffc8 	bl	800e43c <__swhatbuf_r>
 800e4ac:	9f00      	ldr	r7, [sp, #0]
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	4639      	mov	r1, r7
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f7ff f8be 	bl	800d634 <_malloc_r>
 800e4b8:	b948      	cbnz	r0, 800e4ce <__smakebuf_r+0x46>
 800e4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4be:	059a      	lsls	r2, r3, #22
 800e4c0:	d4ee      	bmi.n	800e4a0 <__smakebuf_r+0x18>
 800e4c2:	f023 0303 	bic.w	r3, r3, #3
 800e4c6:	f043 0302 	orr.w	r3, r3, #2
 800e4ca:	81a3      	strh	r3, [r4, #12]
 800e4cc:	e7e2      	b.n	800e494 <__smakebuf_r+0xc>
 800e4ce:	89a3      	ldrh	r3, [r4, #12]
 800e4d0:	6020      	str	r0, [r4, #0]
 800e4d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4d6:	81a3      	strh	r3, [r4, #12]
 800e4d8:	9b01      	ldr	r3, [sp, #4]
 800e4da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e4de:	b15b      	cbz	r3, 800e4f8 <__smakebuf_r+0x70>
 800e4e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f000 f81d 	bl	800e524 <_isatty_r>
 800e4ea:	b128      	cbz	r0, 800e4f8 <__smakebuf_r+0x70>
 800e4ec:	89a3      	ldrh	r3, [r4, #12]
 800e4ee:	f023 0303 	bic.w	r3, r3, #3
 800e4f2:	f043 0301 	orr.w	r3, r3, #1
 800e4f6:	81a3      	strh	r3, [r4, #12]
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	431d      	orrs	r5, r3
 800e4fc:	81a5      	strh	r5, [r4, #12]
 800e4fe:	e7cf      	b.n	800e4a0 <__smakebuf_r+0x18>

0800e500 <_fstat_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	4d07      	ldr	r5, [pc, #28]	@ (800e520 <_fstat_r+0x20>)
 800e504:	2300      	movs	r3, #0
 800e506:	4604      	mov	r4, r0
 800e508:	4608      	mov	r0, r1
 800e50a:	4611      	mov	r1, r2
 800e50c:	602b      	str	r3, [r5, #0]
 800e50e:	f7f2 fdd1 	bl	80010b4 <_fstat>
 800e512:	1c43      	adds	r3, r0, #1
 800e514:	d102      	bne.n	800e51c <_fstat_r+0x1c>
 800e516:	682b      	ldr	r3, [r5, #0]
 800e518:	b103      	cbz	r3, 800e51c <_fstat_r+0x1c>
 800e51a:	6023      	str	r3, [r4, #0]
 800e51c:	bd38      	pop	{r3, r4, r5, pc}
 800e51e:	bf00      	nop
 800e520:	24005e20 	.word	0x24005e20

0800e524 <_isatty_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	4d06      	ldr	r5, [pc, #24]	@ (800e540 <_isatty_r+0x1c>)
 800e528:	2300      	movs	r3, #0
 800e52a:	4604      	mov	r4, r0
 800e52c:	4608      	mov	r0, r1
 800e52e:	602b      	str	r3, [r5, #0]
 800e530:	f7f2 fdd0 	bl	80010d4 <_isatty>
 800e534:	1c43      	adds	r3, r0, #1
 800e536:	d102      	bne.n	800e53e <_isatty_r+0x1a>
 800e538:	682b      	ldr	r3, [r5, #0]
 800e53a:	b103      	cbz	r3, 800e53e <_isatty_r+0x1a>
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	bd38      	pop	{r3, r4, r5, pc}
 800e540:	24005e20 	.word	0x24005e20

0800e544 <abort>:
 800e544:	b508      	push	{r3, lr}
 800e546:	2006      	movs	r0, #6
 800e548:	f000 f82c 	bl	800e5a4 <raise>
 800e54c:	2001      	movs	r0, #1
 800e54e:	f7f2 fd61 	bl	8001014 <_exit>

0800e552 <_raise_r>:
 800e552:	291f      	cmp	r1, #31
 800e554:	b538      	push	{r3, r4, r5, lr}
 800e556:	4605      	mov	r5, r0
 800e558:	460c      	mov	r4, r1
 800e55a:	d904      	bls.n	800e566 <_raise_r+0x14>
 800e55c:	2316      	movs	r3, #22
 800e55e:	6003      	str	r3, [r0, #0]
 800e560:	f04f 30ff 	mov.w	r0, #4294967295
 800e564:	bd38      	pop	{r3, r4, r5, pc}
 800e566:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e568:	b112      	cbz	r2, 800e570 <_raise_r+0x1e>
 800e56a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e56e:	b94b      	cbnz	r3, 800e584 <_raise_r+0x32>
 800e570:	4628      	mov	r0, r5
 800e572:	f000 f831 	bl	800e5d8 <_getpid_r>
 800e576:	4622      	mov	r2, r4
 800e578:	4601      	mov	r1, r0
 800e57a:	4628      	mov	r0, r5
 800e57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e580:	f000 b818 	b.w	800e5b4 <_kill_r>
 800e584:	2b01      	cmp	r3, #1
 800e586:	d00a      	beq.n	800e59e <_raise_r+0x4c>
 800e588:	1c59      	adds	r1, r3, #1
 800e58a:	d103      	bne.n	800e594 <_raise_r+0x42>
 800e58c:	2316      	movs	r3, #22
 800e58e:	6003      	str	r3, [r0, #0]
 800e590:	2001      	movs	r0, #1
 800e592:	e7e7      	b.n	800e564 <_raise_r+0x12>
 800e594:	2100      	movs	r1, #0
 800e596:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e59a:	4620      	mov	r0, r4
 800e59c:	4798      	blx	r3
 800e59e:	2000      	movs	r0, #0
 800e5a0:	e7e0      	b.n	800e564 <_raise_r+0x12>
	...

0800e5a4 <raise>:
 800e5a4:	4b02      	ldr	r3, [pc, #8]	@ (800e5b0 <raise+0xc>)
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	6818      	ldr	r0, [r3, #0]
 800e5aa:	f7ff bfd2 	b.w	800e552 <_raise_r>
 800e5ae:	bf00      	nop
 800e5b0:	24000020 	.word	0x24000020

0800e5b4 <_kill_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4d07      	ldr	r5, [pc, #28]	@ (800e5d4 <_kill_r+0x20>)
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	4608      	mov	r0, r1
 800e5be:	4611      	mov	r1, r2
 800e5c0:	602b      	str	r3, [r5, #0]
 800e5c2:	f7f2 fd17 	bl	8000ff4 <_kill>
 800e5c6:	1c43      	adds	r3, r0, #1
 800e5c8:	d102      	bne.n	800e5d0 <_kill_r+0x1c>
 800e5ca:	682b      	ldr	r3, [r5, #0]
 800e5cc:	b103      	cbz	r3, 800e5d0 <_kill_r+0x1c>
 800e5ce:	6023      	str	r3, [r4, #0]
 800e5d0:	bd38      	pop	{r3, r4, r5, pc}
 800e5d2:	bf00      	nop
 800e5d4:	24005e20 	.word	0x24005e20

0800e5d8 <_getpid_r>:
 800e5d8:	f7f2 bd04 	b.w	8000fe4 <_getpid>

0800e5dc <_init>:
 800e5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5de:	bf00      	nop
 800e5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5e2:	bc08      	pop	{r3}
 800e5e4:	469e      	mov	lr, r3
 800e5e6:	4770      	bx	lr

0800e5e8 <_fini>:
 800e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ea:	bf00      	nop
 800e5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ee:	bc08      	pop	{r3}
 800e5f0:	469e      	mov	lr, r3
 800e5f2:	4770      	bx	lr
